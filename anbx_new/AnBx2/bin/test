.\anbxc_new.exe ..\..\casestudies\ISOsymKeyTwoPassMutualAuthProt.AnBx -out:Java >> log
[execnarrKnowOfProt] compileAnB2ExecnarrKnow args:
  ctx: JContext (fromList [("A",VarBind JAgent),("B",VarBind JAgent),("NA",VarBind JNonce),("NB",VarBind JNonce),("Text1",VarBind JNonce),("Text2",VarBind JNonce),("Text3",VarBind JNonce),("Text4",VarBind JNonce),("shk",VarBind (JFunction ->* (AnBxParams [JAgent,JAgent],JSymmetricKey))),("tag",VarBind (JConstant JNonce)),("zero",VarBind JNonce)])
  types: [(Agent,["A","B"]),(Number,["NA","NB","Text1","Text2","Text3","Text4","tag"]),(Function [Agent,Agent ->* SymmetricKey],["shk"])]
  shares: [(share,["A","B"],[shk(A,B)])]
  decs: [B know B,B know A,B know tag,B know shk(<A,B>),A know A,A know B,A know tag,A know shk(<A,B>),private ShkAB     (* A,B share shk(<A,B>) *),A generates NA,B generates NB,A generates Text1,B generates Text3]
  equations: []
  actions: [((("A",False,Nothing),Insecure,("B",False,Nothing)),{|NA,B,Text1|}shk(A,B),Nothing,Nothing),((("B",False,Nothing),Insecure,("A",False,Nothing)),{|NB,A,Text3|}shk(A,B),Nothing,Nothing)]
  goals2ver: [WAuthentication ("A",False,Nothing) ("B",False,Nothing) Text3 "",WAuthentication ("B",False,Nothing) ("A",False,Nothing) Text1 ""]
  newmapgoals: fromList [(("A","_wauth_TEXT1_BA"),Nothing),(("A","_wauth_TEXT3_AB"),Nothing),(("B","_wauth_TEXT1_BA"),Nothing),(("B","_wauth_TEXT3_AB"),Nothing)]
  evn: (0,99,99)
  out: Java

[compileAnB2ExecnarrKnow] Processing action: ((("A",False,Nothing),Insecure,("B",False,Nothing)),{|NA,B,Text1|}shk(A,B),Nothing,Nothing)
next_var: 0
a: "A" b: "B"
msg: {|NA,B,Text1|}shk(A,B)
[compileAnB2ExecnarrKnow] Knowledge for sender (A): fromList [(A,fromList [A]),(B,fromList [B]),(NA,fromList [NA]),(Text1,fromList [Text1]),(tag,fromList [tag]),(shk(<A,B>),fromList [shk(<A,B>)])]
NExpression: encS(<NA,B,Text1>,shk(<A,B>))
[compileAnB2ExecnarrKnow] Processing action: ((("B",False,Nothing),Insecure,("A",False,Nothing)),{|NB,A,Text3|}shk(A,B),Nothing,Nothing)
next_var: 1
a: "B" b: "A"
msg: {|NB,A,Text3|}shk(A,B)
addknowledge
        (m,e): (encS(<NA,B,Text1>,shk(<A,B>)),R0)
        knowledge: ["(A:A)","(B:B)","(NB:NB)","(Text3:Text3)","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
formulas
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
form
        ats: fromList []
        knowledge: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(A) contiene subexpresi¢n A, se a¤ade.
addAtom
        at: wff(A)
        ats: fromList []
[addAtom] Comparando e=A con k=A, v=[A], resultado=True
[addAtom] FWff A ya est  en KnowledgeMap, no se a¤ade
formsub
        message: A
        es: A
        ats: fromList []
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(A,A) contiene subexpresi¢n A, se a¤ade.
addAtom
        at: inv(A,A)
        ats: fromList []
addAtom
        at: wff(A)
        ats: fromList []
[addAtom] Comparando e=A con k=A, v=[A], resultado=True
[addAtom] FWff A ya est  en KnowledgeMap, no se a¤ade
[form] m: A, e: A, es: fromList [A]
[form] ats1: fromList []
[form] ats2: fromList []
form
        ats: fromList []
        knowledge: ["(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(B) contiene subexpresi¢n B, se a¤ade.
[addAtomK] eq(B,proj[2/3][decS(R0,shk(<A,B>))]) contiene subexpresi¢n B, se a¤ade.
addAtom
        at: eq(B,proj[2/3][decS(R0,shk(<A,B>))])
        ats: fromList []
[simplAdd] A¤adiendo eq(B,proj[2/3][decS(R0,shk(<A,B>))]), filtrados: []
addAtom
        at: wff(B)
        ats: fromList [eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=B con k=A, v=[A], resultado=False
[addAtom] Comparando e=B con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=True
[addAtom] FWff B ya est  en KnowledgeMap, no se a¤ade
formsub
        message: B
        es: B,proj[2/3][decS(R0,shk(<A,B>))]
        ats: fromList [eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(B,B) contiene subexpresi¢n B, se a¤ade.
addAtom
        at: inv(B,B)
        ats: fromList [eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
addAtom
        at: wff(B)
        ats: fromList [eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=B con k=A, v=[A], resultado=False
[addAtom] Comparando e=B con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=True
[addAtom] FWff B ya est  en KnowledgeMap, no se a¤ade
[form] m: B, e: B, es: fromList [B,proj[2/3][decS(R0,shk(<A,B>))]]
[form] ats1: fromList [eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[form] ats2: fromList [eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
form
        ats: fromList [eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        knowledge: ["(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(proj[1/3][decS(R0,shk(<A,B>))]) contiene subexpresi¢n proj[1/3][decS(R0,shk(<A,B>))], se a¤ade.
addAtom
        at: wff(proj[1/3][decS(R0,shk(<A,B>))])
        ats: fromList [eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=A, v=[A], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=NB, v=[NB], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=Text1, v=[proj[3/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=Text3, v=[Text3], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=<NA,B,Text1>, v=[decS(R0,shk(<A,B>))], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=encS(<NA,B,Text1>,shk(<A,B>)), v=[R0], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=shk(<A,B>), v=[shk(<A,B>)], resultado=False
[addAtom] A¤adiendo FWff proj[1/3][decS(R0,shk(<A,B>))] porque no est  en KnowledgeMap
formsub
        message: NA
        es: proj[1/3][decS(R0,shk(<A,B>))]
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(proj[1/3][decS(R0,shk(<A,B>))],proj[1/3][decS(R0,shk(<A,B>))]) contiene subexpresi¢n proj[1/3][decS(R0,shk(<A,B>))], se a¤ade.
addAtom
        at: inv(proj[1/3][decS(R0,shk(<A,B>))],proj[1/3][decS(R0,shk(<A,B>))])
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
addAtom
        at: wff(proj[1/3][decS(R0,shk(<A,B>))])
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=A, v=[A], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=NB, v=[NB], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=Text1, v=[proj[3/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=Text3, v=[Text3], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=<NA,B,Text1>, v=[decS(R0,shk(<A,B>))], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=encS(<NA,B,Text1>,shk(<A,B>)), v=[R0], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R0,shk(<A,B>))] con k=shk(<A,B>), v=[shk(<A,B>)], resultado=False
[addAtom] A¤adiendo FWff proj[1/3][decS(R0,shk(<A,B>))] porque no est  en KnowledgeMap
[form] m: NA, e: proj[1/3][decS(R0,shk(<A,B>))], es: fromList [proj[1/3][decS(R0,shk(<A,B>))]]
[form] ats1: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[form] ats2: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
form
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        knowledge: ["(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(NB) contiene subexpresi¢n NB, se a¤ade.
addAtom
        at: wff(NB)
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=NB con k=A, v=[A], resultado=False
[addAtom] Comparando e=NB con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=NB con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=NB con k=NB, v=[NB], resultado=True
[addAtom] FWff NB ya est  en KnowledgeMap, no se a¤ade
formsub
        message: NB
        es: NB
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(NB,NB) contiene subexpresi¢n NB, se a¤ade.
addAtom
        at: inv(NB,NB)
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
addAtom
        at: wff(NB)
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=NB con k=A, v=[A], resultado=False
[addAtom] Comparando e=NB con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=NB con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=NB con k=NB, v=[NB], resultado=True
[addAtom] FWff NB ya est  en KnowledgeMap, no se a¤ade
[form] m: NB, e: NB, es: fromList [NB]
[form] ats1: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[form] ats2: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
form
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        knowledge: ["(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(proj[3/3][decS(R0,shk(<A,B>))]) contiene subexpresi¢n proj[3/3][decS(R0,shk(<A,B>))], se a¤ade.
addAtom
        at: wff(proj[3/3][decS(R0,shk(<A,B>))])
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=A, v=[A], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=NB, v=[NB], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=Text1, v=[proj[3/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=Text3, v=[Text3], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=<NA,B,Text1>, v=[decS(R0,shk(<A,B>))], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=encS(<NA,B,Text1>,shk(<A,B>)), v=[R0], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=shk(<A,B>), v=[shk(<A,B>)], resultado=False
[addAtom] A¤adiendo FWff proj[3/3][decS(R0,shk(<A,B>))] porque no est  en KnowledgeMap
formsub
        message: Text1
        es: proj[3/3][decS(R0,shk(<A,B>))]
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(proj[3/3][decS(R0,shk(<A,B>))],proj[3/3][decS(R0,shk(<A,B>))]) contiene subexpresi¢n proj[3/3][decS(R0,shk(<A,B>))], se a¤ade.
addAtom
        at: inv(proj[3/3][decS(R0,shk(<A,B>))],proj[3/3][decS(R0,shk(<A,B>))])
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
addAtom
        at: wff(proj[3/3][decS(R0,shk(<A,B>))])
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=A, v=[A], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=NB, v=[NB], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=Text1, v=[proj[3/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=Text3, v=[Text3], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=<NA,B,Text1>, v=[decS(R0,shk(<A,B>))], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=encS(<NA,B,Text1>,shk(<A,B>)), v=[R0], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R0,shk(<A,B>))] con k=shk(<A,B>), v=[shk(<A,B>)], resultado=False
[addAtom] A¤adiendo FWff proj[3/3][decS(R0,shk(<A,B>))] porque no est  en KnowledgeMap
[form] m: Text1, e: proj[3/3][decS(R0,shk(<A,B>))], es: fromList [proj[3/3][decS(R0,shk(<A,B>))]]
[form] ats1: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[form] ats2: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
form
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        knowledge: ["(Text3:Text3)","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(Text3) contiene subexpresi¢n Text3, se a¤ade.
addAtom
        at: wff(Text3)
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=Text3 con k=A, v=[A], resultado=False
[addAtom] Comparando e=Text3 con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=Text3 con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=Text3 con k=NB, v=[NB], resultado=False
[addAtom] Comparando e=Text3 con k=Text1, v=[proj[3/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=Text3 con k=Text3, v=[Text3], resultado=True
[addAtom] FWff Text3 ya est  en KnowledgeMap, no se a¤ade
formsub
        message: Text3
        es: Text3
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(Text3,Text3) contiene subexpresi¢n Text3, se a¤ade.
addAtom
        at: inv(Text3,Text3)
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
addAtom
        at: wff(Text3)
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=Text3 con k=A, v=[A], resultado=False
[addAtom] Comparando e=Text3 con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=Text3 con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=Text3 con k=NB, v=[NB], resultado=False
[addAtom] Comparando e=Text3 con k=Text1, v=[proj[3/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=Text3 con k=Text3, v=[Text3], resultado=True
[addAtom] FWff Text3 ya est  en KnowledgeMap, no se a¤ade
[form] m: Text3, e: Text3, es: fromList [Text3]
[form] ats1: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[form] ats2: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
form
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        knowledge: ["(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(tag) contiene subexpresi¢n tag, se a¤ade.
addAtom
        at: wff(tag)
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=tag con k=A, v=[A], resultado=False
[addAtom] Comparando e=tag con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=NB, v=[NB], resultado=False
[addAtom] Comparando e=tag con k=Text1, v=[proj[3/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=Text3, v=[Text3], resultado=False
[addAtom] Comparando e=tag con k=tag, v=[tag], resultado=True
[addAtom] FWff tag ya est  en KnowledgeMap, no se a¤ade
formsub
        message: tag
        es: tag
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(tag,tag) contiene subexpresi¢n tag, se a¤ade.
addAtom
        at: inv(tag,tag)
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
addAtom
        at: wff(tag)
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=tag con k=A, v=[A], resultado=False
[addAtom] Comparando e=tag con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=NB, v=[NB], resultado=False
[addAtom] Comparando e=tag con k=Text1, v=[proj[3/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=Text3, v=[Text3], resultado=False
[addAtom] Comparando e=tag con k=tag, v=[tag], resultado=True
[addAtom] FWff tag ya est  en KnowledgeMap, no se a¤ade
[form] m: tag, e: tag, es: fromList [tag]
[form] ats1: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[form] ats2: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
form
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        knowledge: ["(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(shk(<A,B>)) contiene subexpresi¢n shk(<A,B>), se a¤ade.
addAtom
        at: wff(shk(<A,B>))
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=shk(<A,B>) con k=A, v=[A], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=NB, v=[NB], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=Text1, v=[proj[3/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=Text3, v=[Text3], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=<NA,B,Text1>, v=[decS(R0,shk(<A,B>))], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=encS(<NA,B,Text1>,shk(<A,B>)), v=[R0], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=shk(<A,B>), v=[shk(<A,B>)], resultado=True
[addAtom] FWff shk(<A,B>) ya est  en KnowledgeMap, no se a¤ade
formsub
        message: shk(<A,B>)
        es: shk(<A,B>)
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(shk(<A,B>),shk(<A,B>)) contiene subexpresi¢n shk(<A,B>), se a¤ade.
addAtom
        at: inv(shk(<A,B>),shk(<A,B>))
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
addAtom
        at: wff(shk(<A,B>))
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addAtom] Comparando e=shk(<A,B>) con k=A, v=[A], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=B, v=[B,proj[2/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=NA, v=[proj[1/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=NB, v=[NB], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=Text1, v=[proj[3/3][decS(R0,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=Text3, v=[Text3], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=<NA,B,Text1>, v=[decS(R0,shk(<A,B>))], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=encS(<NA,B,Text1>,shk(<A,B>)), v=[R0], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=shk(<A,B>), v=[shk(<A,B>)], resultado=True
[addAtom] FWff shk(<A,B>) ya est  en KnowledgeMap, no se a¤ade
[form] m: shk(<A,B>), e: shk(<A,B>), es: fromList [shk(<A,B>)]
[form] ats1: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[form] ats2: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
form
        ats: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
        knowledge: []
        ak: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(<NA,B,Text1>:decS(R0,shk(<A,B>)))","(encS(<NA,B,Text1>,shk(<A,B>)):R0)","(shk(<A,B>):shk(<A,B>))"]
[formulas] reduced knowledge: ["(A:A)","(B:B,proj[2/3][decS(R0,shk(<A,B>))])","(NA:proj[1/3][decS(R0,shk(<A,B>))])","(NB:NB)","(Text1:proj[3/3][decS(R0,shk(<A,B>))])","(Text3:Text3)","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
[formulas] atoms: fromList [wff(proj[1/3][decS(R0,shk(<A,B>))]),wff(proj[3/3][decS(R0,shk(<A,B>))]),eq(B,proj[2/3][decS(R0,shk(<A,B>))])]
[addKnowledge] m: encS(<NA,B,Text1>,shk(<A,B>)), e: R0, phi: (*3*)
wff(proj[1/3][decS(R0,shk(<A,B>))])
wff(proj[3/3][decS(R0,shk(<A,B>))])
eq(B,proj[2/3][decS(R0,shk(<A,B>))])

[compileAnB2ExecnarrKnow] Knowledge for sender (B): fromList [(A,fromList [A]),(B,fromList [B]),(NA,fromList [proj[1/3][decS(R0,shk(<A,B>))]]),(NB,fromList [NB]),(Text1,fromList [proj[3/3][decS(R0,shk(<A,B>))]]),(Text3,fromList [Text3]),(tag,fromList [tag]),(shk(<A,B>),fromList [shk(<A,B>)])]
NExpression: encS(<NB,A,Text3>,shk(<A,B>))
addknowledge
        (m,e): (encS(<NB,A,Text3>,shk(<A,B>)),R1)
        knowledge: ["(A:A)","(B:B)","(NA:NA)","(Text1:Text1)","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
formulas
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
form
        ats: fromList []
        knowledge: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(A) contiene subexpresi¢n A, se a¤ade.
[addAtomK] eq(A,proj[2/3][decS(R1,shk(<A,B>))]) contiene subexpresi¢n A, se a¤ade.
addAtom
        at: eq(A,proj[2/3][decS(R1,shk(<A,B>))])
        ats: fromList []
[simplAdd] A¤adiendo eq(A,proj[2/3][decS(R1,shk(<A,B>))]), filtrados: []
addAtom
        at: wff(A)
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=A con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=True
[addAtom] FWff A ya est  en KnowledgeMap, no se a¤ade
formsub
        message: A
        es: A,proj[2/3][decS(R1,shk(<A,B>))]
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(A,A) contiene subexpresi¢n A, se a¤ade.
addAtom
        at: inv(A,A)
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
addAtom
        at: wff(A)
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=A con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=True
[addAtom] FWff A ya est  en KnowledgeMap, no se a¤ade
[form] m: A, e: A, es: fromList [A,proj[2/3][decS(R1,shk(<A,B>))]]
[form] ats1: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[form] ats2: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
form
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        knowledge: ["(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(B) contiene subexpresi¢n B, se a¤ade.
addAtom
        at: wff(B)
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=B con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=B con k=B, v=[B], resultado=True
[addAtom] FWff B ya est  en KnowledgeMap, no se a¤ade
formsub
        message: B
        es: B
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(B,B) contiene subexpresi¢n B, se a¤ade.
addAtom
        at: inv(B,B)
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
addAtom
        at: wff(B)
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=B con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=B con k=B, v=[B], resultado=True
[addAtom] FWff B ya est  en KnowledgeMap, no se a¤ade
[form] m: B, e: B, es: fromList [B]
[form] ats1: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[form] ats2: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
form
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        knowledge: ["(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(NA) contiene subexpresi¢n NA, se a¤ade.
addAtom
        at: wff(NA)
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=NA con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=NA con k=B, v=[B], resultado=False
[addAtom] Comparando e=NA con k=NA, v=[NA], resultado=True
[addAtom] FWff NA ya est  en KnowledgeMap, no se a¤ade
formsub
        message: NA
        es: NA
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(NA,NA) contiene subexpresi¢n NA, se a¤ade.
addAtom
        at: inv(NA,NA)
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
addAtom
        at: wff(NA)
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=NA con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=NA con k=B, v=[B], resultado=False
[addAtom] Comparando e=NA con k=NA, v=[NA], resultado=True
[addAtom] FWff NA ya est  en KnowledgeMap, no se a¤ade
[form] m: NA, e: NA, es: fromList [NA]
[form] ats1: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[form] ats2: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
form
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        knowledge: ["(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(proj[1/3][decS(R1,shk(<A,B>))]) contiene subexpresi¢n proj[1/3][decS(R1,shk(<A,B>))], se a¤ade.
addAtom
        at: wff(proj[1/3][decS(R1,shk(<A,B>))])
        ats: fromList [eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=B, v=[B], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=NA, v=[NA], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=NB, v=[proj[1/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=Text1, v=[Text1], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=Text3, v=[proj[3/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=<NB,A,Text3>, v=[decS(R1,shk(<A,B>))], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=encS(<NB,A,Text3>,shk(<A,B>)), v=[R1], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=shk(<A,B>), v=[shk(<A,B>)], resultado=False
[addAtom] A¤adiendo FWff proj[1/3][decS(R1,shk(<A,B>))] porque no est  en KnowledgeMap
formsub
        message: NB
        es: proj[1/3][decS(R1,shk(<A,B>))]
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(proj[1/3][decS(R1,shk(<A,B>))],proj[1/3][decS(R1,shk(<A,B>))]) contiene subexpresi¢n proj[1/3][decS(R1,shk(<A,B>))], se a¤ade.
addAtom
        at: inv(proj[1/3][decS(R1,shk(<A,B>))],proj[1/3][decS(R1,shk(<A,B>))])
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
addAtom
        at: wff(proj[1/3][decS(R1,shk(<A,B>))])
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=B, v=[B], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=NA, v=[NA], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=NB, v=[proj[1/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=Text1, v=[Text1], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=Text3, v=[proj[3/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=<NB,A,Text3>, v=[decS(R1,shk(<A,B>))], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=encS(<NB,A,Text3>,shk(<A,B>)), v=[R1], resultado=False
[addAtom] Comparando e=proj[1/3][decS(R1,shk(<A,B>))] con k=shk(<A,B>), v=[shk(<A,B>)], resultado=False
[addAtom] A¤adiendo FWff proj[1/3][decS(R1,shk(<A,B>))] porque no est  en KnowledgeMap
[form] m: NB, e: proj[1/3][decS(R1,shk(<A,B>))], es: fromList [proj[1/3][decS(R1,shk(<A,B>))]]
[form] ats1: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[form] ats2: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
form
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        knowledge: ["(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(Text1) contiene subexpresi¢n Text1, se a¤ade.
addAtom
        at: wff(Text1)
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=Text1 con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=Text1 con k=B, v=[B], resultado=False
[addAtom] Comparando e=Text1 con k=NA, v=[NA], resultado=False
[addAtom] Comparando e=Text1 con k=NB, v=[proj[1/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=Text1 con k=Text1, v=[Text1], resultado=True
[addAtom] FWff Text1 ya est  en KnowledgeMap, no se a¤ade
formsub
        message: Text1
        es: Text1
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(Text1,Text1) contiene subexpresi¢n Text1, se a¤ade.
addAtom
        at: inv(Text1,Text1)
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
addAtom
        at: wff(Text1)
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=Text1 con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=Text1 con k=B, v=[B], resultado=False
[addAtom] Comparando e=Text1 con k=NA, v=[NA], resultado=False
[addAtom] Comparando e=Text1 con k=NB, v=[proj[1/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=Text1 con k=Text1, v=[Text1], resultado=True
[addAtom] FWff Text1 ya est  en KnowledgeMap, no se a¤ade
[form] m: Text1, e: Text1, es: fromList [Text1]
[form] ats1: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[form] ats2: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
form
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        knowledge: ["(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(proj[3/3][decS(R1,shk(<A,B>))]) contiene subexpresi¢n proj[3/3][decS(R1,shk(<A,B>))], se a¤ade.
addAtom
        at: wff(proj[3/3][decS(R1,shk(<A,B>))])
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=B, v=[B], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=NA, v=[NA], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=NB, v=[proj[1/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=Text1, v=[Text1], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=Text3, v=[proj[3/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=<NB,A,Text3>, v=[decS(R1,shk(<A,B>))], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=encS(<NB,A,Text3>,shk(<A,B>)), v=[R1], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=shk(<A,B>), v=[shk(<A,B>)], resultado=False
[addAtom] A¤adiendo FWff proj[3/3][decS(R1,shk(<A,B>))] porque no est  en KnowledgeMap
formsub
        message: Text3
        es: proj[3/3][decS(R1,shk(<A,B>))]
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(proj[3/3][decS(R1,shk(<A,B>))],proj[3/3][decS(R1,shk(<A,B>))]) contiene subexpresi¢n proj[3/3][decS(R1,shk(<A,B>))], se a¤ade.
addAtom
        at: inv(proj[3/3][decS(R1,shk(<A,B>))],proj[3/3][decS(R1,shk(<A,B>))])
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
addAtom
        at: wff(proj[3/3][decS(R1,shk(<A,B>))])
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=B, v=[B], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=NA, v=[NA], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=NB, v=[proj[1/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=Text1, v=[Text1], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=Text3, v=[proj[3/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=<NB,A,Text3>, v=[decS(R1,shk(<A,B>))], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=encS(<NB,A,Text3>,shk(<A,B>)), v=[R1], resultado=False
[addAtom] Comparando e=proj[3/3][decS(R1,shk(<A,B>))] con k=shk(<A,B>), v=[shk(<A,B>)], resultado=False
[addAtom] A¤adiendo FWff proj[3/3][decS(R1,shk(<A,B>))] porque no est  en KnowledgeMap
[form] m: Text3, e: proj[3/3][decS(R1,shk(<A,B>))], es: fromList [proj[3/3][decS(R1,shk(<A,B>))]]
[form] ats1: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[form] ats2: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
form
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        knowledge: ["(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(tag) contiene subexpresi¢n tag, se a¤ade.
addAtom
        at: wff(tag)
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=tag con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=B, v=[B], resultado=False
[addAtom] Comparando e=tag con k=NA, v=[NA], resultado=False
[addAtom] Comparando e=tag con k=NB, v=[proj[1/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=Text1, v=[Text1], resultado=False
[addAtom] Comparando e=tag con k=Text3, v=[proj[3/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=tag, v=[tag], resultado=True
[addAtom] FWff tag ya est  en KnowledgeMap, no se a¤ade
formsub
        message: tag
        es: tag
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(tag,tag) contiene subexpresi¢n tag, se a¤ade.
addAtom
        at: inv(tag,tag)
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
addAtom
        at: wff(tag)
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=tag con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=B, v=[B], resultado=False
[addAtom] Comparando e=tag con k=NA, v=[NA], resultado=False
[addAtom] Comparando e=tag con k=NB, v=[proj[1/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=Text1, v=[Text1], resultado=False
[addAtom] Comparando e=tag con k=Text3, v=[proj[3/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=tag con k=tag, v=[tag], resultado=True
[addAtom] FWff tag ya est  en KnowledgeMap, no se a¤ade
[form] m: tag, e: tag, es: fromList [tag]
[form] ats1: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[form] ats2: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
form
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        knowledge: ["(shk(<A,B>):shk(<A,B>))"]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] wff(shk(<A,B>)) contiene subexpresi¢n shk(<A,B>), se a¤ade.
addAtom
        at: wff(shk(<A,B>))
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=shk(<A,B>) con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=B, v=[B], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=NA, v=[NA], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=NB, v=[proj[1/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=Text1, v=[Text1], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=Text3, v=[proj[3/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=<NB,A,Text3>, v=[decS(R1,shk(<A,B>))], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=encS(<NB,A,Text3>,shk(<A,B>)), v=[R1], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=shk(<A,B>), v=[shk(<A,B>)], resultado=True
[addAtom] FWff shk(<A,B>) ya est  en KnowledgeMap, no se a¤ade
formsub
        message: shk(<A,B>)
        es: shk(<A,B>)
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[addAtomK] inv(shk(<A,B>),shk(<A,B>)) contiene subexpresi¢n shk(<A,B>), se a¤ade.
addAtom
        at: inv(shk(<A,B>),shk(<A,B>))
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
addAtom
        at: wff(shk(<A,B>))
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addAtom] Comparando e=shk(<A,B>) con k=A, v=[A,proj[2/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=B, v=[B], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=NA, v=[NA], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=NB, v=[proj[1/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=Text1, v=[Text1], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=Text3, v=[proj[3/3][decS(R1,shk(<A,B>))]], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=tag, v=[tag], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=<NB,A,Text3>, v=[decS(R1,shk(<A,B>))], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=encS(<NB,A,Text3>,shk(<A,B>)), v=[R1], resultado=False
[addAtom] Comparando e=shk(<A,B>) con k=shk(<A,B>), v=[shk(<A,B>)], resultado=True
[addAtom] FWff shk(<A,B>) ya est  en KnowledgeMap, no se a¤ade
[form] m: shk(<A,B>), e: shk(<A,B>), es: fromList [shk(<A,B>)]
[form] ats1: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[form] ats2: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
form
        ats: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
        knowledge: []
        ak: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(<NB,A,Text3>:decS(R1,shk(<A,B>)))","(encS(<NB,A,Text3>,shk(<A,B>)):R1)","(shk(<A,B>):shk(<A,B>))"]
[formulas] reduced knowledge: ["(A:A,proj[2/3][decS(R1,shk(<A,B>))])","(B:B)","(NA:NA)","(NB:proj[1/3][decS(R1,shk(<A,B>))])","(Text1:Text1)","(Text3:proj[3/3][decS(R1,shk(<A,B>))])","(tag:tag)","(shk(<A,B>):shk(<A,B>))"]
[formulas] atoms: fromList [wff(proj[1/3][decS(R1,shk(<A,B>))]),wff(proj[3/3][decS(R1,shk(<A,B>))]),eq(A,proj[2/3][decS(R1,shk(<A,B>))])]
[addKnowledge] m: encS(<NB,A,Text3>,shk(<A,B>)), e: R1, phi: (*3*)
wff(proj[1/3][decS(R1,shk(<A,B>))])
wff(proj[3/3][decS(R1,shk(<A,B>))])
eq(A,proj[2/3][decS(R1,shk(<A,B>))])

[mkProt2J] execnarr original:
0| A: new Text1
0(0)| A: witness(_wauth_TEXT1_BA,Text1,[(B,B),(A,A)]) # side condition: False
0| A: new NA
0| A: VAR_A_SHKAB := shk(<A,B>)
0| A: send(B;encS(<NA,B,Text1>,VAR_A_SHKAB))    # A -> B
0| B: VAR_B_R0 := receive()     # A -> B
0| B: VAR_B_DSBR0SHKAB := decS(VAR_B_R0,shk(<A,B>))
0| B: wff(proj[1/3][VAR_B_DSBR0SHKAB])
0| B: wff(proj[3/3][VAR_B_DSBR0SHKAB])
0| B: eq(B,proj[2/3][VAR_B_DSBR0SHKAB])
1| B: new Text3
1(1)| B: witness(_wauth_TEXT3_AB,Text3,[(A,A),(B,B)]) # side condition: False
1| B: new NB
1| B: send(A;encS(<NB,A,Text3>,shk(<A,B>)))     # B -> A
1| A: VAR_A_R1 := receive()     # B -> A
1| A: VAR_A_DSAR1ASHKAB := decS(VAR_A_R1,VAR_A_SHKAB)
1| A: wff(proj[1/3][VAR_A_DSAR1ASHKAB])
1| A: wff(proj[3/3][VAR_A_DSAR1ASHKAB])
1| A: eq(A,proj[2/3][VAR_A_DSAR1ASHKAB])
99(1)| A: wrequest(_wauth_TEXT3_AB,proj[3/3][VAR_A_DSAR1ASHKAB],[(A,A),(B,B)]) # side condition: True
99(0)| B: wrequest(_wauth_TEXT1_BA,proj[3/3][VAR_B_DSBR0SHKAB],[(B,B),(A,A)]) # side condition: True

[mapActions] jactions: [B|99(0): wrequest((JNonce,"_wauth_TEXT1_BA"),proj[3/3][VAR_B_DSBR0SHKAB],[((JAgent,"B"),B),((JAgent,"A"),A)])]
jsteps0: [99]