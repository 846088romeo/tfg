(* Protocol: ISOCCFOnePassUnilateralAuthProt *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Projectors *)
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray,x4:SealedObject,x5:Crypto_ByteArray,x6:Agent,x7:Crypto_ByteArray; proj_1_7_BytAgeBytSeaBytAgeByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray,x4:SealedObject,x5:Crypto_ByteArray,x6:Agent,x7:Crypto_ByteArray; proj_2_7_BytAgeBytSeaBytAgeByt_Agent((x1,x2,x3,x4,x5,x6,x7)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray,x4:SealedObject,x5:Crypto_ByteArray,x6:Agent,x7:Crypto_ByteArray; proj_3_7_BytAgeBytSeaBytAgeByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray,x4:SealedObject,x5:Crypto_ByteArray,x6:Agent,x7:Crypto_ByteArray; proj_4_7_BytAgeBytSeaBytAgeByt_SealedObject((x1,x2,x3,x4,x5,x6,x7)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray,x4:SealedObject,x5:Crypto_ByteArray,x6:Agent,x7:Crypto_ByteArray; proj_5_7_BytAgeBytSeaBytAgeByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x5.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray,x4:SealedObject,x5:Crypto_ByteArray,x6:Agent,x7:Crypto_ByteArray; proj_6_7_BytAgeBytSeaBytAgeByt_Agent((x1,x2,x3,x4,x5,x6,x7)) = x6.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray,x4:SealedObject,x5:Crypto_ByteArray,x6:Agent,x7:Crypto_ByteArray; proj_7_7_BytAgeBytSeaBytAgeByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x7.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray; proj_1_3_BytAgeByt_Crypto_ByteArray((x1,x2,x3)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray; proj_2_3_BytAgeByt_Agent((x1,x2,x3)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray; proj_3_3_BytAgeByt_Crypto_ByteArray((x1,x2,x3)) = x3.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun shk(Agent,Agent): SecretKey [private].

(* Variable agents *)
free A: Agent.
free B: Agent.

(* Goal queries *)
event witness_wauth_TEXT1_BA(Crypto_ByteArray,Agent,Agent).
event wrequest_wauth_TEXT1_BA(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; event(wrequest_wauth_TEXT1_BA(m,a1,a2)) ==> event(witness_wauth_TEXT1_BA(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(A)).
query event(end(B)).

(* Process B *)
let process_B(A: Agent,B: Agent,honestA: Agent) =
in(ch,VAR_B_R0: bitstring);
let VAR_B_DSJ47BR0SHKAB: bitstring = decS(proj_4_7_BytAgeBytSeaBytAgeByt_SealedObject(VAR_B_R0),shk(A,B)) in 
if B = proj_2_3_BytAgeByt_Agent(VAR_B_DSJ47BR0SHKAB) then
if B = proj_2_7_BytAgeBytSeaBytAgeByt_Agent(VAR_B_R0) then
if B = proj_6_7_BytAgeBytSeaBytAgeByt_Agent(VAR_B_R0) then
let VAR_B_J13BDSJ47BR0SHKAB: Crypto_ByteArray = proj_1_3_BytAgeByt_Crypto_ByteArray(VAR_B_DSJ47BR0SHKAB) in 
if proj_1_7_BytAgeBytSeaBytAgeByt_Crypto_ByteArray(VAR_B_R0) = VAR_B_J13BDSJ47BR0SHKAB then
if proj_5_7_BytAgeBytSeaBytAgeByt_Crypto_ByteArray(VAR_B_R0) = VAR_B_J13BDSJ47BR0SHKAB then
if proj_7_7_BytAgeBytSeaBytAgeByt_Crypto_ByteArray(VAR_B_R0) = proj_3_3_BytAgeByt_Crypto_ByteArray(VAR_B_DSJ47BR0SHKAB) then
(if A = honestA then event wrequest_wauth_TEXT1_BA(proj_7_7_BytAgeBytSeaBytAgeByt_Crypto_ByteArray(VAR_B_R0),B,A)) |
event end(B);
0.

(* Process A *)
let process_A(A: Agent,B: Agent,honestB: Agent) =
new Text1: Crypto_ByteArray;
event witness_wauth_TEXT1_BA(Text1,B,A);
new NxA: Crypto_ByteArray;
new Text2: Crypto_ByteArray;
out(ch,(NxA,B,Text2,encS((NxA,B,Text1),shk(A,B)),NxA,B,Text1));
event end(A);
0.

(* Process ISOCCFOnePassUnilateralAuthProt *)
let process_ISOCCFOnePassUnilateralAuthProt(A: Agent,B: Agent) =
(!in(ch,XA: Agent);
process_B(XA,B,A)) |
(!in(ch,XB: Agent);
process_A(A,XB,B)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,shk(X,B));
out(ch,shk(A,X))
) | (
out(ch,A);
out(ch,B);
process_ISOCCFOnePassUnilateralAuthProt(A,B) | process_ISOCCFOnePassUnilateralAuthProt(B,A))