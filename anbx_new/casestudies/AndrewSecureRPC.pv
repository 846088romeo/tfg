(* Protocol: AndrewSecureRPC *)
(* ProVerif/Applied-pi specification mode: PV *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = true. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Projectors *)
reduc forall x1:bitstring,x2:bitstring; proj_1_2((x1,x2)) = x1.
reduc forall x1:bitstring,x2:bitstring; proj_2_2((x1,x2)) = x2.

(* hash/hmac functions *)
fun hash(bitstring): bitstring.
fun hmac(bitstring,bitstring): bitstring.

(* Public key encryption *)
fun inv(bitstring): bitstring [private].
fun enc(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(bitstring): bitstring [private].
fun pk(bitstring): bitstring.
fun enc_pk(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(bitstring): bitstring [private].
fun hk(bitstring): bitstring.
fun enc_hk(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(bitstring): bitstring [private].
fun sk(bitstring): bitstring.
fun sign_sk(bitstring,bitstring): bitstring.
    reduc forall m: bitstring, k: bitstring; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: bitstring; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: bitstring [data].
fun kas(bitstring,bitstring): bitstring.
fun kap(bitstring,bitstring): bitstring.
equation forall x: bitstring, y: bitstring; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: bitstring [data].
fun xor(bitstring,bitstring): bitstring.
equation forall x:bitstring,y:bitstring; xor(xor(x,y),y) = x.
equation forall x:bitstring; xor(x,zero) = x.
equation forall x:bitstring; xor(zero,x) = x.
equation forall x:bitstring; xor(x,x) = zero.

(* Functions *)
fun succ(bitstring): bitstring.

fun shk(bitstring,bitstring): bitstring [private].

(* Variable agents *)
free A: bitstring.
free B: bitstring.

(* Constants *)
const tag: bitstring.

(* Goal queries *)
free chgoal_Confidential_NB2_BA: bitstring [private].query attacker(chgoal_Confidential_NB2_BA).
event witness_chgoal_FreshSecure_NB2_AB(bitstring,bitstring,bitstring).
event witness_auth_NB2_AB(bitstring,bitstring,bitstring).
event request_chgoal_FreshSecure_NB2_AB(bitstring,bitstring,bitstring).
query m: bitstring, a1: bitstring, a2: bitstring; inj-event(request_chgoal_FreshSecure_NB2_AB(m,a1,a2)) ==> inj-event(witness_chgoal_FreshSecure_NB2_AB(m,a1,a2)).
event request_auth_NB2_AB(bitstring,bitstring,bitstring).
query m: bitstring, a1: bitstring, a2: bitstring; inj-event(request_auth_NB2_AB(m,a1,a2)) ==> inj-event(witness_auth_NB2_AB(m,a1,a2)).

(* Process B *)
let process_B(A: bitstring,B: bitstring,honestA: bitstring) =
in(ch,VAR_B_R0: bitstring);
let VAR_B_SHKAB: bitstring = shk(A,B) in 
let VAR_B_J22DSJ22BR0SHKAB: bitstring = proj_2_2(decS(proj_2_2(VAR_B_R0),VAR_B_SHKAB)) in 
if VAR_B_J22DSJ22BR0SHKAB = VAR_B_J22DSJ22BR0SHKAB then
if A = proj_1_2(VAR_B_R0) then
new NB2: bitstring;
event witness_chgoal_FreshSecure_NB2_AB(NB2,A,B);
event witness_auth_NB2_AB(NB2,A,B);
new NB: bitstring;
out(ch,encS((succ(VAR_B_J22DSJ22BR0SHKAB),NB),VAR_B_SHKAB));
in(ch,VAR_B_R2: bitstring);
if succ(NB) = decS(VAR_B_R2,VAR_B_SHKAB) then
out(ch,encS(NB2,VAR_B_SHKAB));
(if A = honestA then out(ch,encS(chgoal_Confidential_NB2_BA,NB2))) |
0.

(* Process A *)
let process_A(A: bitstring,B: bitstring,honestB: bitstring) =
new NA: bitstring;
let VAR_A_SHKAB: bitstring = shk(A,B) in 
out(ch,(A,encS((tag,NA),VAR_A_SHKAB)));
in(ch,VAR_A_R1: bitstring);
let VAR_A_DSAR1ASHKAB: bitstring = decS(VAR_A_R1,VAR_A_SHKAB) in 
if succ(NA) = proj_1_2(VAR_A_DSAR1ASHKAB) then
let VAR_A_J22ADSAR1ASHKAB: bitstring = proj_2_2(VAR_A_DSAR1ASHKAB) in 
out(ch,encS(succ(VAR_A_J22ADSAR1ASHKAB),VAR_A_SHKAB));
in(ch,VAR_A_R3: bitstring);
if VAR_A_J22ADSAR1ASHKAB = VAR_A_J22ADSAR1ASHKAB then
if decS(VAR_A_R3,VAR_A_SHKAB) = decS(VAR_A_R3,VAR_A_SHKAB) then
(if B = honestB then event request_chgoal_FreshSecure_NB2_AB(decS(VAR_A_R3,VAR_A_SHKAB),A,B)) |
(if B = honestB then event request_auth_NB2_AB(decS(VAR_A_R3,VAR_A_SHKAB),A,B)) |
0.

(* Process AndrewSecureRPC *)
let process_AndrewSecureRPC(A: bitstring,B: bitstring) =
(!in(ch,XA: bitstring);
process_B(XA,B,A)) |
(!in(ch,XB: bitstring);
process_A(A,XB,B)).

(* Initialisation process *)
process
(!new X: bitstring;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,shk(X,B));
out(ch,shk(A,X))
) | (
out(ch,A);
out(ch,B);
process_AndrewSecureRPC(A,B) | process_AndrewSecureRPC(B,A))