(* Protocol: TLS_pw *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Private channel declaration *)
free ch_priv_s_B: channel [private].

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun SecretKey2bitstring(SecretKey): bitstring [data,typeConverter].
reduc forall x: SecretKey; bitstring2SecretKey(SecretKey2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_1_4_AgeBytBytByt_Agent((x1,x2,x3,x4)) = x1.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_2_4_AgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x2.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_3_4_AgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_4_4_AgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:SignedObject; proj_1_4_BytBytBytSig_Crypto_ByteArray((x1,x2,x3,x4)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:SignedObject; proj_2_4_BytBytBytSig_Crypto_ByteArray((x1,x2,x3,x4)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:SignedObject; proj_3_4_BytBytBytSig_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:SignedObject; proj_4_4_BytBytBytSig_SignedObject((x1,x2,x3,x4)) = x4.
reduc forall x1:Agent,x2:PublicKey; proj_1_2_AgePub_Agent((x1,x2)) = x1.
reduc forall x1:Agent,x2:PublicKey; proj_2_2_AgePub_PublicKey((x1,x2)) = x2.
reduc forall x1:SealedPair,x2:Crypto_ByteArray,x3:SealedObject; proj_1_3_SePBytSea_SealedPair((x1,x2,x3)) = x1.
reduc forall x1:SealedPair,x2:Crypto_ByteArray,x3:SealedObject; proj_2_3_SePBytSea_Crypto_ByteArray((x1,x2,x3)) = x2.
reduc forall x1:SealedPair,x2:Crypto_ByteArray,x3:SealedObject; proj_3_3_SePBytSea_SealedObject((x1,x2,x3)) = x3.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun prf(Crypto_ByteArray,Crypto_ByteArray,Crypto_ByteArray): SecretKey.
fun serverK(Crypto_ByteArray,Crypto_ByteArray,SecretKey): SecretKey.

fun pw(Agent,Agent): SecretKey [private].

(* Secret Goal Testing Functions *)
fun fun_goal_INVSS_s(PrivateKey): SecretKey.
fun fun_goal_INVPB_B(PrivateKey): SecretKey.

(* Variable agents *)
free B: Agent.
free A: Agent.

(* Constants *)
const empty: Crypto_ByteArray.
const s: Agent.

(* Secrecy assumptions *)
not attacker(new Invpks).
not attacker(new Invhks).
not attacker(new Invsks).

(* Goal queries *)
free InvskINVSS_s: PrivateKey [private].query attacker(InvskINVSS_s).
free InvpkINVPB_B: PrivateKey [private].query attacker(InvpkINVPB_B).
free PRFPMSNANB_AB: SecretKey [private].query attacker(PRFPMSNANB_AB).
free wPWAB_AB: SecretKey [private].weaksecret wPWAB_AB.
event witness_auth_PRFPMSNANB_BA(SecretKey,Agent,Agent).
event witness_auth_PRFPMSNANB_AB(SecretKey,Agent,Agent).
event request_auth_PRFPMSNANB_BA(SecretKey,Agent,Agent).
query m: SecretKey, a1: Agent, a2: Agent; inj-event(request_auth_PRFPMSNANB_BA(m,a1,a2)) ==> inj-event(witness_auth_PRFPMSNANB_BA(m,a1,a2)).
event request_auth_PRFPMSNANB_AB(SecretKey,Agent,Agent).
query m: SecretKey, a1: Agent, a2: Agent; inj-event(request_auth_PRFPMSNANB_AB(m,a1,a2)) ==> inj-event(witness_auth_PRFPMSNANB_AB(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(s)).
query event(end(B)).
query event(end(A)).

(* Process s *)
let process_s(A: Agent,B: Agent,pkB: PublicKey,Invsks: PrivateKey,honestB: Agent,honestA: Agent) =
out(ch_priv_s_B,sign_sk((B,pkB),Invsks));
out(ch,encS(PrivateKey2bitstring(InvskINVSS_s),fun_goal_INVSS_s(Invsks)));
event end(s);
0.

(* Process B *)
let process_B(A: Agent,B: Agent,pkB: PublicKey,sks: PublicKey,InvpkB: PrivateKey,honestA: Agent) =
in(ch_priv_s_B,VAR_B_R0: SignedObject);
let VAR_B_DBR0SS: bitstring = verify_sk(VAR_B_R0,sks) in 
if VAR_B_DBR0SS = (B,pkB) then
out(ch,empty);
in(ch,VAR_B_R2: bitstring);
if A = proj_1_4_AgeBytBytByt_Agent(VAR_B_R2) then
new NB: Crypto_ByteArray;
new PB: Crypto_ByteArray;
let VAR_B_J34BR2: Crypto_ByteArray = proj_3_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_R2) in 
out(ch,(NB,VAR_B_J34BR2,PB,VAR_B_R0));
in(ch,VAR_B_R4: bitstring);
let VAR_B_DJ13BR4INVPB: Crypto_ByteArray = bitstring2Crypto_ByteArray(dec_pk(proj_1_3_SePBytSea_SealedPair(VAR_B_R4),InvpkB)) in 
if proj_2_3_SePBytSea_Crypto_ByteArray(VAR_B_R4) = hash((NB,B,VAR_B_DJ13BR4INVPB)) then
let VAR_B_HPRFBDJ13BR4INVPBJ24BR2NBABJ24BR2NBBJ34BR2J44BR2PBBDJ13BR4INVPB: Crypto_ByteArray = hash((prf(VAR_B_DJ13BR4INVPB,proj_2_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_R2),NB),A,B,proj_2_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_R2),NB,VAR_B_J34BR2,proj_4_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_R2),PB,VAR_B_DJ13BR4INVPB)) in 
if bitstring2Crypto_ByteArray(decS(proj_3_3_SePBytSea_SealedObject(VAR_B_R4),pw(A,B))) = VAR_B_HPRFBDJ13BR4INVPBJ24BR2NBABJ24BR2NBBJ34BR2J44BR2PBBDJ13BR4INVPB then
event witness_auth_PRFPMSNANB_AB(prf(VAR_B_DJ13BR4INVPB,proj_2_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_R2),NB),A,B);
out(ch,encS(Crypto_ByteArray2bitstring(VAR_B_HPRFBDJ13BR4INVPBJ24BR2NBABJ24BR2NBBJ34BR2J44BR2PBBDJ13BR4INVPB),serverK(proj_2_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_R2),NB,prf(VAR_B_DJ13BR4INVPB,proj_2_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_R2),NB))));
out(ch,encS(PrivateKey2bitstring(InvpkINVPB_B),fun_goal_INVPB_B(InvpkB)));
(if A = honestA then event request_auth_PRFPMSNANB_BA(prf(VAR_B_DJ13BR4INVPB,proj_2_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_R2),NB),B,A)) |
(if A = honestA then out(ch,encS(SecretKey2bitstring(PRFPMSNANB_AB),prf(VAR_B_DJ13BR4INVPB,proj_2_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_R2),NB)))) |
(if A = honestA then out(ch,encS(SecretKey2bitstring(wPWAB_AB),pw(A,B)))) |
event end(B);
0.

(* Process A *)
let process_A(A: Agent,B: Agent,pkB: PublicKey,sks: PublicKey,honestB: Agent) =
in(ch,VAR_A_R1: Crypto_ByteArray);
if VAR_A_R1 = VAR_A_R1 then
new NA: Crypto_ByteArray;
new Sid: Crypto_ByteArray;
new PA: Crypto_ByteArray;
out(ch,(A,NA,Sid,PA));
in(ch,VAR_A_R3: bitstring);
let VAR_A_DJ44AR3SS: bitstring = verify_sk(proj_4_4_BytBytBytSig_SignedObject(VAR_A_R3),sks) in 
if proj_2_2_AgePub_PublicKey(VAR_A_DJ44AR3SS) = proj_2_2_AgePub_PublicKey(VAR_A_DJ44AR3SS) then
if Sid = proj_2_4_BytBytBytSig_Crypto_ByteArray(VAR_A_R3) then
if VAR_A_DJ44AR3SS = (B,pkB) then
new PMS: Crypto_ByteArray;
event witness_auth_PRFPMSNANB_BA(prf(PMS,NA,proj_1_4_BytBytBytSig_Crypto_ByteArray(VAR_A_R3)),B,A);
let VAR_A_J14AR3: Crypto_ByteArray = proj_1_4_BytBytBytSig_Crypto_ByteArray(VAR_A_R3) in 
let VAR_A_HPRFPMSNAJ14AR3ABNAJ14AR3SIDPAJ34AR3PMS: Crypto_ByteArray = hash((prf(PMS,NA,VAR_A_J14AR3),A,B,NA,VAR_A_J14AR3,Sid,PA,proj_3_4_BytBytBytSig_Crypto_ByteArray(VAR_A_R3),PMS)) in 
out(ch,(enc_pk(Crypto_ByteArray2bitstring(PMS),pkB),hash((VAR_A_J14AR3,B,PMS)),encS(Crypto_ByteArray2bitstring(VAR_A_HPRFPMSNAJ14AR3ABNAJ14AR3SIDPAJ34AR3PMS),pw(A,B))));
in(ch,VAR_A_R5: SealedObject);
if bitstring2Crypto_ByteArray(decS(VAR_A_R5,serverK(NA,VAR_A_J14AR3,prf(PMS,NA,VAR_A_J14AR3)))) = VAR_A_HPRFPMSNAJ14AR3ABNAJ14AR3SIDPAJ34AR3PMS then
(if B = honestB then event request_auth_PRFPMSNANB_AB(prf(PMS,NA,VAR_A_J14AR3),A,B)) |
(if B = honestB then out(ch,encS(SecretKey2bitstring(PRFPMSNANB_AB),prf(PMS,NA,VAR_A_J14AR3)))) |
(if B = honestB then out(ch,encS(SecretKey2bitstring(wPWAB_AB),pw(A,B)))) |
event end(A);
0.

(* Process TLS_pw *)
let process_TLS_pw(A: Agent,B: Agent,sks: PublicKey,Invsks: PrivateKey) =
(!in(ch,XB: Agent);
in(ch,XA: Agent);
process_s(XA,XB,pk(priv_pk(XB)),Invsks,B,A)) |
(!in(ch,XA: Agent);
process_B(XA,B,pk(priv_pk(B)),sks,priv_pk(B),A)) |
(!in(ch,XB: Agent);
process_A(A,XB,pk(priv_pk(XB)),sks,B)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,pw(A,X));
out(ch,pw(X,B))
) | (
out(ch,B);
out(ch,A);
out(ch,pk(priv_pk(B)));
new Invsks: PrivateKey;
new Invpks: PrivateKey;
new Invhks: PrivateKey;
let pks = pk(Invpks) in out(ch,pks);
let hks = hk(Invhks) in out(ch,hks);
let sks = sk(Invsks) in out(ch,sks);
process_TLS_pw(B,A,sks,Invsks) | process_TLS_pw(A,B,sks,Invsks))