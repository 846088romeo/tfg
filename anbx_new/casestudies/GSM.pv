(* Protocol: GSM *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SecretKey; proj_1_3_BytBytSec_Crypto_ByteArray((x1,x2,x3)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SecretKey; proj_2_3_BytBytSec_Crypto_ByteArray((x1,x2,x3)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SecretKey; proj_3_3_BytBytSec_SecretKey((x1,x2,x3)) = x3.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun kc(Crypto_ByteArray,Crypto_ByteArray): SecretKey.

fun ki(Agent,Agent): Crypto_ByteArray [private].

(* Secret Goal Testing Functions *)
fun fun_goal_MSG_BM(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free H: Agent.
free B: Agent.
free M: Agent.

(* Goal queries *)
free MSG_BM: Crypto_ByteArray [private].query attacker(MSG_BM).
event witness_auth_NB_BM(Crypto_ByteArray,Agent,Agent).
event request_auth_NB_BM(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_auth_NB_BM(m,a1,a2)) ==> inj-event(witness_auth_NB_BM(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(H)).
query event(end(B)).
query event(end(M)).

(* Process M *)
let process_M(B: Agent,H: Agent,M: Agent,honestH: Agent,honestB: Agent) =
in(ch,VAR_M_R1: Crypto_ByteArray);
if VAR_M_R1 = VAR_M_R1 then
event witness_auth_NB_BM(VAR_M_R1,B,M);
let VAR_M_KIMH: Crypto_ByteArray = ki(M,H) in 
out(ch,hash((VAR_M_R1,VAR_M_KIMH)));
in(ch,VAR_M_R3: SealedObject);
if bitstring2Crypto_ByteArray(decS(VAR_M_R3,kc(VAR_M_R1,VAR_M_KIMH))) = bitstring2Crypto_ByteArray(decS(VAR_M_R3,kc(VAR_M_R1,VAR_M_KIMH))) then
(if B = honestB then out(ch,encS(Crypto_ByteArray2bitstring(MSG_BM),fun_goal_MSG_BM(bitstring2Crypto_ByteArray(decS(VAR_M_R3,kc(VAR_M_R1,VAR_M_KIMH))))))) |
event end(M);
0.

(* Process H *)
let process_H(H: Agent,M: Agent,honestB: Agent,honestM: Agent) =
new NB: Crypto_ByteArray;
out(ch,(NB,hash((NB,ki(M,H))),kc(NB,ki(M,H))));
event end(H);
0.

(* Process B *)
let process_B(B: Agent,H: Agent,M: Agent,honestH: Agent,honestM: Agent) =
in(ch,VAR_B_R0: bitstring);
let VAR_B_J13BR0: Crypto_ByteArray = proj_1_3_BytBytSec_Crypto_ByteArray(VAR_B_R0) in 
if VAR_B_J13BR0 = VAR_B_J13BR0 then
out(ch,VAR_B_J13BR0);
in(ch,VAR_B_R2: Crypto_ByteArray);
if VAR_B_R2 = proj_2_3_BytBytSec_Crypto_ByteArray(VAR_B_R0) then
new Msg: Crypto_ByteArray;
out(ch,encS(Crypto_ByteArray2bitstring(Msg),proj_3_3_BytBytSec_SecretKey(VAR_B_R0)));
(if M = honestM then event request_auth_NB_BM(VAR_B_J13BR0,B,M)) |
(if M = honestM then out(ch,encS(Crypto_ByteArray2bitstring(MSG_BM),fun_goal_MSG_BM(Msg)))) |
event end(B);
0.

(* Process GSM *)
let process_GSM(B: Agent,H: Agent,M: Agent) =
(!in(ch,XH: Agent);
in(ch,XB: Agent);
process_M(XB,XH,M,H,B)) |
(!in(ch,XB: Agent);
in(ch,XM: Agent);
process_H(H,XM,B,M)) |
(!in(ch,XH: Agent);
in(ch,XM: Agent);
process_B(B,XH,XM,H,M)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,ki(M,X));
out(ch,ki(X,H))
) | (
out(ch,H);
out(ch,B);
out(ch,M);
process_GSM(H,B,M) | process_GSM(H,M,B) | process_GSM(B,H,M) | process_GSM(B,M,H) | process_GSM(M,H,B) | process_GSM(M,B,H))