(* Protocol: Amended_NSCK *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = true. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:SealedObject; proj_1_4_AgeAgeBytSea_Agent((x1,x2,x3,x4)) = x1.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:SealedObject; proj_2_4_AgeAgeBytSea_Agent((x1,x2,x3,x4)) = x2.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:SealedObject; proj_3_4_AgeAgeBytSea_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:SealedObject; proj_4_4_AgeAgeBytSea_SealedObject((x1,x2,x3,x4)) = x4.
reduc forall x1:Agent,x2:Crypto_ByteArray; proj_1_2_AgeByt_Agent((x1,x2)) = x1.
reduc forall x1:Agent,x2:Crypto_ByteArray; proj_2_2_AgeByt_Crypto_ByteArray((x1,x2)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:SecretKey,x4:SealedObject; proj_1_4_BytAgeSecSea_Crypto_ByteArray((x1,x2,x3,x4)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:SecretKey,x4:SealedObject; proj_2_4_BytAgeSecSea_Agent((x1,x2,x3,x4)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:SecretKey,x4:SealedObject; proj_3_4_BytAgeSecSea_SecretKey((x1,x2,x3,x4)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:SecretKey,x4:SealedObject; proj_4_4_BytAgeSecSea_SealedObject((x1,x2,x3,x4)) = x4.
reduc forall x1:SecretKey,x2:Crypto_ByteArray,x3:Agent; proj_1_3_SecBytAge_SecretKey((x1,x2,x3)) = x1.
reduc forall x1:SecretKey,x2:Crypto_ByteArray,x3:Agent; proj_2_3_SecBytAge_Crypto_ByteArray((x1,x2,x3)) = x2.
reduc forall x1:SecretKey,x2:Crypto_ByteArray,x3:Agent; proj_3_3_SecBytAge_Agent((x1,x2,x3)) = x3.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun pre(Crypto_ByteArray): Crypto_ByteArray.

fun shk(Agent,Agent): SecretKey [private].

(* Secret Goal Testing Functions *)
fun fun_goal_chgoal_Confidential_NXNB_BA(Crypto_ByteArray): SecretKey.
fun fun_goal_NXNB_AB(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free A: Agent.
free B: Agent.

(* Constants *)
const s: Agent.

(* Secrecy assumptions *)
not attacker(new Invpks).
not attacker(new Invhks).
not attacker(new Invsks).

(* Goal queries *)
free chgoal_Confidential_NXNB_BA: Crypto_ByteArray [private].query attacker(chgoal_Confidential_NXNB_BA).
free NXNB_AB: Crypto_ByteArray [private].query attacker(NXNB_AB).
event witness_auth_NXNB_AB(Crypto_ByteArray,Agent,Agent).
event witness_chgoal_FreshSecure_NXNB_AB(Crypto_ByteArray,Agent,Agent).
event witness_auth_KXKAB_As(SecretKey,Agent,Agent).
event witness_auth_KXKAB_Bs(SecretKey,Agent,Agent).
event witness_auth_NXNB_BA(Crypto_ByteArray,Agent,Agent).
event request_auth_KXKAB_Bs(SecretKey,Agent,Agent).
query m: SecretKey, a1: Agent, a2: Agent; inj-event(request_auth_KXKAB_Bs(m,a1,a2)) ==> inj-event(witness_auth_KXKAB_Bs(m,a1,a2)).
event request_auth_KXKAB_As(SecretKey,Agent,Agent).
query m: SecretKey, a1: Agent, a2: Agent; inj-event(request_auth_KXKAB_As(m,a1,a2)) ==> inj-event(witness_auth_KXKAB_As(m,a1,a2)).
event request_auth_NXNB_AB(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_auth_NXNB_AB(m,a1,a2)) ==> inj-event(witness_auth_NXNB_AB(m,a1,a2)).
event request_chgoal_FreshSecure_NXNB_AB(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_chgoal_FreshSecure_NXNB_AB(m,a1,a2)) ==> inj-event(witness_chgoal_FreshSecure_NXNB_AB(m,a1,a2)).
event request_auth_NXNB_BA(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_auth_NXNB_BA(m,a1,a2)) ==> inj-event(witness_auth_NXNB_BA(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(A)).
query event(end(B)).
query event(end(s)).

(* Process s *)
let process_s(A: Agent,B: Agent,honestA: Agent,honestB: Agent) =
in(ch,VAR_S_R2: bitstring);
let VAR_S_DSJ44SR2SHKBS: bitstring = decS(proj_4_4_AgeAgeBytSea_SealedObject(VAR_S_R2),shk(B,s)) in 
if A = proj_1_2_AgeByt_Agent(VAR_S_DSJ44SR2SHKBS) then
if A = proj_1_4_AgeAgeBytSea_Agent(VAR_S_R2) then
if B = proj_2_4_AgeAgeBytSea_Agent(VAR_S_R2) then
new KxKAB: SecretKey;
event witness_auth_KXKAB_As(KxKAB,A,s);
event witness_auth_KXKAB_Bs(KxKAB,B,s);
out(ch,encS((proj_3_4_AgeAgeBytSea_Crypto_ByteArray(VAR_S_R2),B,KxKAB,encS((KxKAB,proj_2_2_AgeByt_Crypto_ByteArray(VAR_S_DSJ44SR2SHKBS),A),shk(B,s))),shk(A,s)));
event end(s);
0.

(* Process B *)
let process_B(A: Agent,B: Agent,honestA: Agent) =
in(ch,VAR_B_R0: Agent);
if A = VAR_B_R0 then
new NxNB: Crypto_ByteArray;
event witness_auth_NXNB_AB(NxNB,A,B);
event witness_chgoal_FreshSecure_NXNB_AB(NxNB,A,B);
new NxNB0: Crypto_ByteArray;
let VAR_B_SHKBS: SecretKey = shk(B,s) in 
out(ch,encS((A,NxNB0),VAR_B_SHKBS));
in(ch,VAR_B_R4: SealedObject);
let VAR_B_DSBR4BSHKBS: bitstring = decS(VAR_B_R4,VAR_B_SHKBS) in 
if A = proj_3_3_SecBytAge_Agent(VAR_B_DSBR4BSHKBS) then
if NxNB0 = proj_2_3_SecBytAge_Crypto_ByteArray(VAR_B_DSBR4BSHKBS) then
let VAR_B_J13BDSBR4BSHKBS: SecretKey = proj_1_3_SecBytAge_SecretKey(VAR_B_DSBR4BSHKBS) in 
out(ch,encS(Crypto_ByteArray2bitstring(NxNB),VAR_B_J13BDSBR4BSHKBS));
in(ch,VAR_B_R6: SealedObject);
if pre(NxNB) = bitstring2Crypto_ByteArray(decS(VAR_B_R6,VAR_B_J13BDSBR4BSHKBS)) then
event request_auth_KXKAB_Bs(VAR_B_J13BDSBR4BSHKBS,B,s);
(if A = honestA then event request_auth_NXNB_BA(NxNB,B,A)) |
(if A = honestA then out(ch,encS(Crypto_ByteArray2bitstring(chgoal_Confidential_NXNB_BA),fun_goal_chgoal_Confidential_NXNB_BA(NxNB)))) |
(if A = honestA then out(ch,encS(Crypto_ByteArray2bitstring(NXNB_AB),fun_goal_NXNB_AB(NxNB)))) |
event end(B);
0.

(* Process A *)
let process_A(A: Agent,B: Agent,honestB: Agent) =
out(ch,A);
in(ch,VAR_A_R1: SealedObject);
if VAR_A_R1 = VAR_A_R1 then
new NxNA: Crypto_ByteArray;
out(ch,(A,B,NxNA,VAR_A_R1));
in(ch,VAR_A_R3: SealedObject);
let VAR_A_DSAR3SHKAS: bitstring = decS(VAR_A_R3,shk(A,s)) in 
if B = proj_2_4_BytAgeSecSea_Agent(VAR_A_DSAR3SHKAS) then
if NxNA = proj_1_4_BytAgeSecSea_Crypto_ByteArray(VAR_A_DSAR3SHKAS) then
out(ch,proj_4_4_BytAgeSecSea_SealedObject(VAR_A_DSAR3SHKAS));
in(ch,VAR_A_R5: SealedObject);
let VAR_A_DSAR5J34ADSAR3SHKAS: Crypto_ByteArray = bitstring2Crypto_ByteArray(decS(VAR_A_R5,proj_3_4_BytAgeSecSea_SecretKey(VAR_A_DSAR3SHKAS))) in 
if VAR_A_DSAR5J34ADSAR3SHKAS = VAR_A_DSAR5J34ADSAR3SHKAS then
event witness_auth_NXNB_BA(VAR_A_DSAR5J34ADSAR3SHKAS,B,A);
out(ch,encS(Crypto_ByteArray2bitstring(pre(VAR_A_DSAR5J34ADSAR3SHKAS)),proj_3_4_BytAgeSecSea_SecretKey(VAR_A_DSAR3SHKAS)));
event request_auth_KXKAB_As(proj_3_4_BytAgeSecSea_SecretKey(VAR_A_DSAR3SHKAS),A,s);
(if B = honestB then event request_auth_NXNB_AB(VAR_A_DSAR5J34ADSAR3SHKAS,A,B)) |
(if B = honestB then event request_chgoal_FreshSecure_NXNB_AB(VAR_A_DSAR5J34ADSAR3SHKAS,A,B)) |
(if B = honestB then out(ch,encS(Crypto_ByteArray2bitstring(NXNB_AB),fun_goal_NXNB_AB(VAR_A_DSAR5J34ADSAR3SHKAS)))) |
event end(A);
0.

(* Process Amended_NSCK *)
let process_Amended_NSCK(A: Agent,B: Agent) =
(!in(ch,XA: Agent);
in(ch,XB: Agent);
process_s(XA,XB,A,B)) |
(!in(ch,XA: Agent);
process_B(XA,B,A)) |
(!in(ch,XB: Agent);
process_A(A,XB,B)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,shk(X,s))
) | (
out(ch,A);
out(ch,B);
new Invpks: PrivateKey;
new Invhks: PrivateKey;
new Invsks: PrivateKey;
let pks = pk(Invpks) in out(ch,pks);
let hks = hk(Invhks) in out(ch,hks);
let sks = sk(Invsks) in out(ch,sks);
process_Amended_NSCK(A,B) | process_Amended_NSCK(B,A))