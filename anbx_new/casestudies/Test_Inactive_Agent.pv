(* Protocol: Test_Inactive_Agent *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Crypto_ByteArray,x2:SealedPair,x3:SealedPair; proj_1_3_BytSePSeP_Crypto_ByteArray((x1,x2,x3)) = x1.
reduc forall x1:Crypto_ByteArray,x2:SealedPair,x3:SealedPair; proj_2_3_BytSePSeP_SealedPair((x1,x2,x3)) = x2.
reduc forall x1:Crypto_ByteArray,x2:SealedPair,x3:SealedPair; proj_3_3_BytSePSeP_SealedPair((x1,x2,x3)) = x3.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Secret Goal Testing Functions *)
fun fun_goal_INVPB_B(PrivateKey): SecretKey.

(* Variable agents *)
free A: Agent.
free B: Agent.
free C: Agent.

(* Goal queries *)
free InvpkINVPB_B: PrivateKey [private].query attacker(InvpkINVPB_B).
event witness_chgoal_Insecure_NXA_BA(Crypto_ByteArray,Agent,Agent).
event wrequest_chgoal_Insecure_NXA_BA(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; event(wrequest_chgoal_Insecure_NXA_BA(m,a1,a2)) ==> event(witness_chgoal_Insecure_NXA_BA(m,a1,a2)) || event(wrequest_chgoal_Insecure_NXA_BA(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(A)).
query event(end(B)).
query event(end(C)).

(* Process C *)
let process_C(honestA: Agent,honestB: Agent) =
event end(C);
0.

(* Process B *)
let process_B(A: Agent,B: Agent,C: Agent,InvpkB: PrivateKey,honestA: Agent,honestC: Agent) =
in(ch,VAR_B_R0: SealedPair);
if proj_3_3_BytSePSeP_SealedPair(dec_pk(VAR_B_R0,InvpkB)) = proj_2_3_BytSePSeP_SealedPair(dec_pk(VAR_B_R0,InvpkB)) then
out(ch,encS(PrivateKey2bitstring(InvpkINVPB_B),fun_goal_INVPB_B(InvpkB)));
(if A = honestA then event wrequest_chgoal_Insecure_NXA_BA(proj_1_3_BytSePSeP_Crypto_ByteArray(dec_pk(VAR_B_R0,InvpkB)),B,A)) |
event end(B);
0.

(* Process A *)
let process_A(A: Agent,B: Agent,pkB: PublicKey,pkC: PublicKey,honestB: Agent,honestC: Agent) =
new NxA: Crypto_ByteArray;
event witness_chgoal_Insecure_NXA_BA(NxA,B,A);
out(ch,enc_pk((NxA,enc_pk(Crypto_ByteArray2bitstring(NxA),pkC),enc_pk(Crypto_ByteArray2bitstring(NxA),pkC)),pkB));
event end(A);
0.

(* Process Test_Inactive_Agent *)
let process_Test_Inactive_Agent(A: Agent,B: Agent,C: Agent) =
(!in(ch,XA: Agent);
in(ch,XB: Agent);
process_C(A,B)) |
(!in(ch,XA: Agent);
in(ch,XC: Agent);
process_B(XA,B,XC,priv_pk(B),A,C)) |
(!in(ch,XB: Agent);
in(ch,XC: Agent);
process_A(A,XB,pk(priv_pk(XB)),pk(priv_pk(XC)),B,C)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X))
) | (
out(ch,A);
out(ch,B);
out(ch,C);
out(ch,pk(priv_pk(B)));
out(ch,pk(priv_pk(C)));
process_Test_Inactive_Agent(A,B,C) | process_Test_Inactive_Agent(A,C,B) | process_Test_Inactive_Agent(B,A,C) | process_Test_Inactive_Agent(B,C,A) | process_Test_Inactive_Agent(C,A,B) | process_Test_Inactive_Agent(C,B,A))