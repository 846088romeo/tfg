(* Protocol: SSO *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Private channel declaration *)
free ch_priv_SP_C: channel [private].
free ch_priv_idp_C: channel [private].

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray; proj_1_3_AgeAgeByt_Agent((x1,x2,x3)) = x1.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray; proj_2_3_AgeAgeByt_Agent((x1,x2,x3)) = x2.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray; proj_3_3_AgeAgeByt_Crypto_ByteArray((x1,x2,x3)) = x3.
reduc forall x1:Agent,x2:Agent,x3:Agent,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_1_5_AgeAgeAgeBytByt_Agent((x1,x2,x3,x4,x5)) = x1.
reduc forall x1:Agent,x2:Agent,x3:Agent,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_2_5_AgeAgeAgeBytByt_Agent((x1,x2,x3,x4,x5)) = x2.
reduc forall x1:Agent,x2:Agent,x3:Agent,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_3_5_AgeAgeAgeBytByt_Agent((x1,x2,x3,x4,x5)) = x3.
reduc forall x1:Agent,x2:Agent,x3:Agent,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_4_5_AgeAgeAgeBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x4.
reduc forall x1:Agent,x2:Agent,x3:Agent,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_5_5_AgeAgeAgeBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x5.
reduc forall x1:SignedObject,x2:Crypto_ByteArray; proj_1_2_SigByt_SignedObject((x1,x2)) = x1.
reduc forall x1:SignedObject,x2:Crypto_ByteArray; proj_2_2_SigByt_Crypto_ByteArray((x1,x2)) = x2.
reduc forall x1:Agent,x2:Agent; proj_1_2_AgeAge_Agent((x1,x2)) = x1.
reduc forall x1:Agent,x2:Agent; proj_2_2_AgeAge_Agent((x1,x2)) = x2.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Secret Goal Testing Functions *)
fun fun_goal_INVSSP_SP(PrivateKey): SecretKey.
fun fun_goal_INVHKSP_SP(PrivateKey): SecretKey.
fun fun_goal_INVPSP_SP(PrivateKey): SecretKey.
fun fun_goal_INVHKIDP_idp(PrivateKey): SecretKey.
fun fun_goal_INVPIDP_idp(PrivateKey): SecretKey.
fun fun_goal_INVSIDP_idp(PrivateKey): SecretKey.
fun fun_goal_INVSC_C(PrivateKey): SecretKey.
fun fun_goal_INVHKC_C(PrivateKey): SecretKey.
fun fun_goal_INVPC_C(PrivateKey): SecretKey.
fun fun_goal_DATA_SPC(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free C: Agent.
free SP: Agent.

(* Constants *)
const empty: Crypto_ByteArray.
const idp: Agent.

(* Secrecy assumptions *)
not attacker(new Invpkidp).
not attacker(new Invhkidp).
not attacker(new Invskidp).

(* Goal queries *)
free InvskINVSSP_SP: PrivateKey [private].query attacker(InvskINVSSP_SP).
free InvhkINVHKSP_SP: PrivateKey [private].query attacker(InvhkINVHKSP_SP).
free InvpkINVPSP_SP: PrivateKey [private].query attacker(InvpkINVPSP_SP).
free InvhkINVHKIDP_idp: PrivateKey [private].query attacker(InvhkINVHKIDP_idp).
free InvpkINVPIDP_idp: PrivateKey [private].query attacker(InvpkINVPIDP_idp).
free InvskINVSIDP_idp: PrivateKey [private].query attacker(InvskINVSIDP_idp).
free InvskINVSC_C: PrivateKey [private].query attacker(InvskINVSC_C).
free InvhkINVHKC_C: PrivateKey [private].query attacker(InvhkINVHKC_C).
free InvpkINVPC_C: PrivateKey [private].query attacker(InvpkINVPC_C).
free DATA_SPC: Crypto_ByteArray [private].query attacker(DATA_SPC).
event witness_auth_URI_SPC(Crypto_ByteArray,Agent,Agent).
event witness_auth_DATA_CSP(Crypto_ByteArray,Agent,Agent).
event request_auth_DATA_CSP(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_auth_DATA_CSP(m,a1,a2)) ==> inj-event(witness_auth_DATA_CSP(m,a1,a2)).
event request_auth_URI_SPC(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_auth_URI_SPC(m,a1,a2)) ==> inj-event(witness_auth_URI_SPC(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(C)).
query event(end(SP)).
query event(end(idp)).

(* Process idp *)
let process_idp(C: Agent,SP: Agent,pkSP: PublicKey,skSP: PublicKey,hkSP: PublicKey,Invpkidp: PrivateKey,Invskidp: PrivateKey,Invhkidp: PrivateKey,honestC: Agent,honestSP: Agent) =
in(ch_priv_idp_C,VAR_IDP_R2: bitstring);
if C = proj_1_5_AgeAgeAgeBytByt_Agent(VAR_IDP_R2) then
if idp = proj_2_5_AgeAgeAgeBytByt_Agent(VAR_IDP_R2) then
if hkSP = hk(priv_hk(proj_3_5_AgeAgeAgeBytByt_Agent(VAR_IDP_R2))) then
if pkSP = pk(priv_pk(proj_3_5_AgeAgeAgeBytByt_Agent(VAR_IDP_R2))) then
if skSP = sk(priv_sk(proj_3_5_AgeAgeAgeBytByt_Agent(VAR_IDP_R2))) then
out(ch_priv_idp_C,(sign_sk((C,idp),Invskidp),proj_5_5_AgeAgeAgeBytByt_Crypto_ByteArray(VAR_IDP_R2)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKIDP_idp),fun_goal_INVHKIDP_idp(Invhkidp)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPIDP_idp),fun_goal_INVPIDP_idp(Invpkidp)));
out(ch,encS(PrivateKey2bitstring(InvskINVSIDP_idp),fun_goal_INVSIDP_idp(Invskidp)));
event end(idp);
0.

(* Process SP *)
let process_SP(C: Agent,SP: Agent,pkC: PublicKey,skC: PublicKey,skidp: PublicKey,hkC: PublicKey,InvpkSP: PrivateKey,InvskSP: PrivateKey,InvhkSP: PrivateKey,honestC: Agent) =
in(ch_priv_SP_C,VAR_SP_R0: bitstring);
if SP = proj_2_3_AgeAgeByt_Agent(VAR_SP_R0) then
if hkC = hk(priv_hk(proj_1_3_AgeAgeByt_Agent(VAR_SP_R0))) then
if pkC = pk(priv_pk(proj_1_3_AgeAgeByt_Agent(VAR_SP_R0))) then
if skC = sk(priv_sk(proj_1_3_AgeAgeByt_Agent(VAR_SP_R0))) then
new Data: Crypto_ByteArray;
event witness_auth_DATA_CSP(Data,C,SP);
new ID: Crypto_ByteArray;
let VAR_SP_J13SPR0: Agent = proj_1_3_AgeAgeByt_Agent(VAR_SP_R0) in 
let VAR_SP_J33SPR0: Crypto_ByteArray = proj_3_3_AgeAgeByt_Crypto_ByteArray(VAR_SP_R0) in 
out(ch_priv_SP_C,(VAR_SP_J13SPR0,idp,SP,ID,VAR_SP_J33SPR0));
in(ch_priv_SP_C,VAR_SP_R4: bitstring);
let VAR_SP_DJ12SPR4SIDP: bitstring = verify_sk(proj_1_2_SigByt_SignedObject(VAR_SP_R4),skidp) in 
if idp = proj_2_2_AgeAge_Agent(VAR_SP_DJ12SPR4SIDP) then
if VAR_SP_J13SPR0 = proj_1_2_AgeAge_Agent(VAR_SP_DJ12SPR4SIDP) then
if VAR_SP_J33SPR0 = proj_2_2_SigByt_Crypto_ByteArray(VAR_SP_R4) then
out(ch_priv_SP_C,Data);
out(ch,encS(PrivateKey2bitstring(InvskINVSSP_SP),fun_goal_INVSSP_SP(InvskSP)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKSP_SP),fun_goal_INVHKSP_SP(InvhkSP)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPSP_SP),fun_goal_INVPSP_SP(InvpkSP)));
(if VAR_SP_J13SPR0 = honestC then event request_auth_URI_SPC(VAR_SP_J33SPR0,SP,VAR_SP_J13SPR0)) |
(if C = honestC then out(ch,encS(Crypto_ByteArray2bitstring(DATA_SPC),fun_goal_DATA_SPC(Data)))) |
event end(SP);
0.

(* Process C *)
let process_C(C: Agent,SP: Agent,skidp: PublicKey,InvpkC: PrivateKey,InvskC: PrivateKey,InvhkC: PrivateKey,honestSP: Agent) =
new URI: Crypto_ByteArray;
event witness_auth_URI_SPC(URI,SP,C);
out(ch_priv_SP_C,(C,SP,URI));
in(ch_priv_SP_C,VAR_C_R1: bitstring);
if C = proj_1_5_AgeAgeAgeBytByt_Agent(VAR_C_R1) then
if SP = proj_3_5_AgeAgeAgeBytByt_Agent(VAR_C_R1) then
if idp = proj_2_5_AgeAgeAgeBytByt_Agent(VAR_C_R1) then
if URI = proj_5_5_AgeAgeAgeBytByt_Crypto_ByteArray(VAR_C_R1) then
let VAR_C_J45CR1: Crypto_ByteArray = proj_4_5_AgeAgeAgeBytByt_Crypto_ByteArray(VAR_C_R1) in 
out(ch_priv_idp_C,(C,idp,SP,VAR_C_J45CR1,URI));
in(ch_priv_idp_C,VAR_C_R3: bitstring);
if VAR_C_J45CR1 = VAR_C_J45CR1 then
if URI = proj_2_2_SigByt_Crypto_ByteArray(VAR_C_R3) then
let VAR_C_J12CR3: SignedObject = proj_1_2_SigByt_SignedObject(VAR_C_R3) in 
if verify_sk(VAR_C_J12CR3,skidp) = (C,idp) then
out(ch_priv_SP_C,(VAR_C_J12CR3,URI));
in(ch_priv_SP_C,VAR_C_R5: Crypto_ByteArray);
if VAR_C_R5 = VAR_C_R5 then
out(ch,encS(PrivateKey2bitstring(InvskINVSC_C),fun_goal_INVSC_C(InvskC)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKC_C),fun_goal_INVHKC_C(InvhkC)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPC_C),fun_goal_INVPC_C(InvpkC)));
(if SP = honestSP then event request_auth_DATA_CSP(VAR_C_R5,C,SP)) |
(if SP = honestSP then out(ch,encS(Crypto_ByteArray2bitstring(DATA_SPC),fun_goal_DATA_SPC(VAR_C_R5)))) |
event end(C);
0.

(* Process SSO *)
let process_SSO(C: Agent,SP: Agent,skidp: PublicKey,Invpkidp: PrivateKey,Invskidp: PrivateKey,Invhkidp: PrivateKey) =
(!in(ch,XC: Agent);
in(ch,XSP: Agent);
process_idp(XC,XSP,pk(priv_pk(XSP)),sk(priv_sk(XSP)),hk(priv_hk(XSP)),Invpkidp,Invskidp,Invhkidp,C,SP)) |
(!in(ch,XC: Agent);
process_SP(XC,SP,pk(priv_pk(XC)),sk(priv_sk(XC)),skidp,hk(priv_hk(XC)),priv_pk(SP),priv_sk(SP),priv_hk(SP),C)) |
(!in(ch,XSP: Agent);
process_C(C,XSP,skidp,priv_pk(C),priv_sk(C),priv_hk(C),SP)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X))
) | (
out(ch,C);
out(ch,SP);
out(ch,pk(priv_pk(C)));
out(ch,pk(priv_pk(SP)));
out(ch,sk(priv_sk(C)));
out(ch,sk(priv_sk(SP)));
out(ch,hk(priv_hk(C)));
out(ch,hk(priv_hk(SP)));
new Invpkidp: PrivateKey;
new Invskidp: PrivateKey;
new Invhkidp: PrivateKey;
let pkidp = pk(Invpkidp) in out(ch,pkidp);
let hkidp = hk(Invhkidp) in out(ch,hkidp);
let skidp = sk(Invskidp) in out(ch,skidp);
process_SSO(C,SP,skidp,Invpkidp,Invskidp,Invhkidp) | process_SSO(SP,C,skidp,Invpkidp,Invskidp,Invhkidp))