Protocol: ISOsymKeyTwoPassMutualAuthProt

Knowledge: 
A knows: A,B,tag,shk(<A,B>)
B knows: B,A,tag,shk(<A,B>)
A generates: NA,Text1
B generates: NB,Text3
private ShkAB     (* A,B share shk(<A,B>) *)

Actions: 
0| A: new Text1
0(0)| A: witness(_wauth_TEXT1_BA,Text1,[(B,B),(A,A)]) # side condition: False
0| A: new NA
0| A: VAR_A_SHKAB := shk(<A,B>)
0| A: send(B;encS(<NA,B,Text1>,VAR_A_SHKAB))	# A -> B
0| B: VAR_B_R0 := receive()	# A -> B
0| B: VAR_B_SHKAB := shk(<A,B>)
0| B: eq(B,proj[2/3][decS(VAR_B_R0,VAR_B_SHKAB)])
1| B: new Text3
1(1)| B: witness(_wauth_TEXT3_AB,Text3,[(A,A),(B,B)]) # side condition: False
1| B: new NB
1| B: send(A;encS(<NB,A,Text3>,VAR_B_SHKAB))	# B -> A
1| A: VAR_A_R1 := receive()	# B -> A
1| A: eq(A,proj[2/3][decS(VAR_A_R1,VAR_A_SHKAB)])
99(1)| A: wrequest(_wauth_TEXT3_AB,proj[3/3][decS(VAR_A_R1,VAR_A_SHKAB)],[(A,A),(B,B)]) # side condition: True
99(0)| B: wrequest(_wauth_TEXT1_BA,proj[3/3][decS(VAR_B_R0,VAR_B_SHKAB)],[(B,B),(A,A)]) # side condition: True

