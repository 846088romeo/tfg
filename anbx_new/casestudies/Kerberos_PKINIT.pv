(* Protocol: Kerberos_PKINIT *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun SecretKey2bitstring(SecretKey): bitstring [data,typeConverter].
reduc forall x: SecretKey; bitstring2SecretKey(SecretKey2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:SignedObject; proj_1_4_AgeAgeBytSig_Agent((x1,x2,x3,x4)) = x1.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:SignedObject; proj_2_4_AgeAgeBytSig_Agent((x1,x2,x3,x4)) = x2.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:SignedObject; proj_3_4_AgeAgeBytSig_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:SignedObject; proj_4_4_AgeAgeBytSig_SignedObject((x1,x2,x3,x4)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray; proj_1_3_BytBytByt_Crypto_ByteArray((x1,x2,x3)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray; proj_2_3_BytBytByt_Crypto_ByteArray((x1,x2,x3)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray; proj_3_3_BytBytByt_Crypto_ByteArray((x1,x2,x3)) = x3.
reduc forall x1:Agent,x2:SealedObject,x3:SealedObject,x4:SealedPair; proj_1_4_AgeSeaSeaSeP_Agent((x1,x2,x3,x4)) = x1.
reduc forall x1:Agent,x2:SealedObject,x3:SealedObject,x4:SealedPair; proj_2_4_AgeSeaSeaSeP_SealedObject((x1,x2,x3,x4)) = x2.
reduc forall x1:Agent,x2:SealedObject,x3:SealedObject,x4:SealedPair; proj_3_4_AgeSeaSeaSeP_SealedObject((x1,x2,x3,x4)) = x3.
reduc forall x1:Agent,x2:SealedObject,x3:SealedObject,x4:SealedPair; proj_4_4_AgeSeaSeaSeP_SealedPair((x1,x2,x3,x4)) = x4.
reduc forall x1:Crypto_ByteArray,x2:SignedObject; proj_1_2_BytSig_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:SignedObject; proj_2_2_BytSig_SignedObject((x1,x2)) = x2.
reduc forall x1:Agent,x2:SecretKey,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_1_4_AgeSecBytByt_Agent((x1,x2,x3,x4)) = x1.
reduc forall x1:Agent,x2:SecretKey,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_2_4_AgeSecBytByt_SecretKey((x1,x2,x3,x4)) = x2.
reduc forall x1:Agent,x2:SecretKey,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_3_4_AgeSecBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:Agent,x2:SecretKey,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_4_4_AgeSecBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x4.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:SealedObject,x4:SealedObject; proj_1_4_AgeBytSeaSea_Agent((x1,x2,x3,x4)) = x1.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:SealedObject,x4:SealedObject; proj_2_4_AgeBytSeaSea_Crypto_ByteArray((x1,x2,x3,x4)) = x2.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:SealedObject,x4:SealedObject; proj_3_4_AgeBytSeaSea_SealedObject((x1,x2,x3,x4)) = x3.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:SealedObject,x4:SealedObject; proj_4_4_AgeBytSeaSea_SealedObject((x1,x2,x3,x4)) = x4.
reduc forall x1:Agent,x2:Agent,x3:Agent,x4:SecretKey,x5:Crypto_ByteArray; proj_1_5_AgeAgeAgeSecByt_Agent((x1,x2,x3,x4,x5)) = x1.
reduc forall x1:Agent,x2:Agent,x3:Agent,x4:SecretKey,x5:Crypto_ByteArray; proj_2_5_AgeAgeAgeSecByt_Agent((x1,x2,x3,x4,x5)) = x2.
reduc forall x1:Agent,x2:Agent,x3:Agent,x4:SecretKey,x5:Crypto_ByteArray; proj_3_5_AgeAgeAgeSecByt_Agent((x1,x2,x3,x4,x5)) = x3.
reduc forall x1:Agent,x2:Agent,x3:Agent,x4:SecretKey,x5:Crypto_ByteArray; proj_4_5_AgeAgeAgeSecByt_SecretKey((x1,x2,x3,x4,x5)) = x4.
reduc forall x1:Agent,x2:Agent,x3:Agent,x4:SecretKey,x5:Crypto_ByteArray; proj_5_5_AgeAgeAgeSecByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x5.
reduc forall x1:Agent,x2:Crypto_ByteArray; proj_1_2_AgeByt_Agent((x1,x2)) = x1.
reduc forall x1:Agent,x2:Crypto_ByteArray; proj_2_2_AgeByt_Crypto_ByteArray((x1,x2)) = x2.
reduc forall x1:Agent,x2:SealedObject,x3:SealedObject; proj_1_3_AgeSeaSea_Agent((x1,x2,x3)) = x1.
reduc forall x1:Agent,x2:SealedObject,x3:SealedObject; proj_2_3_AgeSeaSea_SealedObject((x1,x2,x3)) = x2.
reduc forall x1:Agent,x2:SealedObject,x3:SealedObject; proj_3_3_AgeSeaSea_SealedObject((x1,x2,x3)) = x3.
reduc forall x1:SealedObject,x2:SealedObject; proj_1_2_SeaSea_SealedObject((x1,x2)) = x1.
reduc forall x1:SealedObject,x2:SealedObject; proj_2_2_SeaSea_SealedObject((x1,x2)) = x2.
reduc forall x1:Agent,x2:Agent,x3:SecretKey,x4:Crypto_ByteArray; proj_1_4_AgeAgeSecByt_Agent((x1,x2,x3,x4)) = x1.
reduc forall x1:Agent,x2:Agent,x3:SecretKey,x4:Crypto_ByteArray; proj_2_4_AgeAgeSecByt_Agent((x1,x2,x3,x4)) = x2.
reduc forall x1:Agent,x2:Agent,x3:SecretKey,x4:Crypto_ByteArray; proj_3_4_AgeAgeSecByt_SecretKey((x1,x2,x3,x4)) = x3.
reduc forall x1:Agent,x2:Agent,x3:SecretKey,x4:Crypto_ByteArray; proj_4_4_AgeAgeSecByt_Crypto_ByteArray((x1,x2,x3,x4)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_1_2_BytByt_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_2_2_BytByt_Crypto_ByteArray((x1,x2)) = x2.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun shk(Agent,Agent): SecretKey [private].

(* Secret Goal Testing Functions *)
fun fun_goal_INVSATH_ath(PrivateKey): SecretKey.
fun fun_goal_INVPC_C(PrivateKey): SecretKey.
fun fun_goal_INVSC_C(PrivateKey): SecretKey.
fun fun_goal_chgoal_Confidential_PAYLOAD_sC(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free C: Agent.

(* Constants *)
const tag: Crypto_ByteArray.
const ath: Agent.
const gw: Agent.
const s: Agent.

(* Secrecy assumptions *)
not attacker(new Invpkath).
not attacker(new Invpkgw).
not attacker(new Invpks).
not attacker(new Invhkath).
not attacker(new Invhkgw).
not attacker(new Invhks).
not attacker(new Invskath).
not attacker(new Invskgw).
not attacker(new Invsks).

(* Goal queries *)
free InvskINVSATH_ath: PrivateKey [private].query attacker(InvskINVSATH_ath).
free InvpkINVPC_C: PrivateKey [private].query attacker(InvpkINVPC_C).
free InvskINVSC_C: PrivateKey [private].query attacker(InvskINVSC_C).
free chgoal_Confidential_PAYLOAD_sC: Crypto_ByteArray [private].query attacker(chgoal_Confidential_PAYLOAD_sC).
event witness_chgoal_FreshSecure_PAYLOAD_Cs(Crypto_ByteArray,Agent,Agent).
event request_chgoal_FreshSecure_PAYLOAD_Cs(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_chgoal_FreshSecure_PAYLOAD_Cs(m,a1,a2)) ==> inj-event(witness_chgoal_FreshSecure_PAYLOAD_Cs(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(C)).
query event(end(ath)).
query event(end(gw)).
query event(end(s)).

(* Process s *)
let process_s(C: Agent,honestC: Agent) =
in(ch,VAR_S_R4: bitstring);
let VAR_S_DSJ12SR4SHKGWS: bitstring = decS(proj_1_2_SeaSea_SealedObject(VAR_S_R4),shk(gw,s)) in 
if s = proj_2_4_AgeAgeSecByt_Agent(VAR_S_DSJ12SR4SHKGWS) then
let VAR_S_DSJ22SR4J34SDSJ12SR4SHKGWS: bitstring = decS(proj_2_2_SeaSea_SealedObject(VAR_S_R4),proj_3_4_AgeAgeSecByt_SecretKey(VAR_S_DSJ12SR4SHKGWS)) in 
if proj_1_4_AgeAgeSecByt_Agent(VAR_S_DSJ12SR4SHKGWS) = proj_1_2_AgeByt_Agent(VAR_S_DSJ22SR4J34SDSJ12SR4SHKGWS) then
let VAR_S_HJ44SDSJ12SR4SHKGWS: Crypto_ByteArray = hash(Crypto_ByteArray2bitstring(proj_4_4_AgeAgeSecByt_Crypto_ByteArray(VAR_S_DSJ12SR4SHKGWS))) in 
if VAR_S_HJ44SDSJ12SR4SHKGWS = proj_2_2_AgeByt_Crypto_ByteArray(VAR_S_DSJ22SR4J34SDSJ12SR4SHKGWS) then
new Payload: Crypto_ByteArray;
event witness_chgoal_FreshSecure_PAYLOAD_Cs(Payload,proj_1_4_AgeAgeSecByt_Agent(VAR_S_DSJ12SR4SHKGWS),s);
out(ch,(encS(Crypto_ByteArray2bitstring(VAR_S_HJ44SDSJ12SR4SHKGWS),proj_3_4_AgeAgeSecByt_SecretKey(VAR_S_DSJ12SR4SHKGWS)),encS((tag,Payload),proj_3_4_AgeAgeSecByt_SecretKey(VAR_S_DSJ12SR4SHKGWS))));
(if proj_1_4_AgeAgeSecByt_Agent(VAR_S_DSJ12SR4SHKGWS) = honestC then out(ch,encS(Crypto_ByteArray2bitstring(chgoal_Confidential_PAYLOAD_sC),fun_goal_chgoal_Confidential_PAYLOAD_sC(Payload)))) |
event end(s);
0.

(* Process gw *)
let process_gw(honestC: Agent) =
in(ch,VAR_GW_R2: bitstring);
let VAR_GW_DSJ34GWR2SHKATHGW: bitstring = decS(proj_3_4_AgeBytSeaSea_SealedObject(VAR_GW_R2),shk(ath,gw)) in 
if ath = proj_1_5_AgeAgeAgeSecByt_Agent(VAR_GW_DSJ34GWR2SHKATHGW) then
if gw = proj_3_5_AgeAgeAgeSecByt_Agent(VAR_GW_DSJ34GWR2SHKATHGW) then
if s = proj_1_4_AgeBytSeaSea_Agent(VAR_GW_R2) then
let VAR_GW_DSJ44GWR2J45GWDSJ34GWR2SHKATHGW: bitstring = decS(proj_4_4_AgeBytSeaSea_SealedObject(VAR_GW_R2),proj_4_5_AgeAgeAgeSecByt_SecretKey(VAR_GW_DSJ34GWR2SHKATHGW)) in 
let VAR_GW_J25GWDSJ34GWR2SHKATHGW: Agent = proj_2_5_AgeAgeAgeSecByt_Agent(VAR_GW_DSJ34GWR2SHKATHGW) in 
if VAR_GW_J25GWDSJ34GWR2SHKATHGW = proj_1_2_AgeByt_Agent(VAR_GW_DSJ44GWR2J45GWDSJ34GWR2SHKATHGW) then
if proj_5_5_AgeAgeAgeSecByt_Crypto_ByteArray(VAR_GW_DSJ34GWR2SHKATHGW) = proj_2_2_AgeByt_Crypto_ByteArray(VAR_GW_DSJ44GWR2J45GWDSJ34GWR2SHKATHGW) then
new T2: Crypto_ByteArray;
new KCS: SecretKey;
out(ch,(VAR_GW_J25GWDSJ34GWR2SHKATHGW,encS((VAR_GW_J25GWDSJ34GWR2SHKATHGW,s,KCS,T2),shk(gw,s)),encS((s,KCS,T2,proj_2_4_AgeBytSeaSea_Crypto_ByteArray(VAR_GW_R2)),proj_4_5_AgeAgeAgeSecByt_SecretKey(VAR_GW_DSJ34GWR2SHKATHGW))));
event end(gw);
0.

(* Process ath *)
let process_ath(C: Agent,pkC: PublicKey,skC: PublicKey,Invskath: PrivateKey,honestC: Agent) =
if not (ath = C) then
in(ch,VAR_ATH_R0: bitstring);
let VAR_ATH_J14ATHR0: Agent = proj_1_4_AgeAgeBytSig_Agent(VAR_ATH_R0) in 
if C = VAR_ATH_J14ATHR0 then
let VAR_ATH_J24ATHR0: Agent = proj_2_4_AgeAgeBytSig_Agent(VAR_ATH_R0) in 
if gw = VAR_ATH_J24ATHR0 then
let VAR_ATH_J23DJ44ATHR0SC: Crypto_ByteArray = proj_2_3_BytBytByt_Crypto_ByteArray(verify_sk(proj_4_4_AgeAgeBytSig_SignedObject(VAR_ATH_R0),skC)) in 
let VAR_ATH_J33DJ44ATHR0SC: Crypto_ByteArray = proj_3_3_BytBytByt_Crypto_ByteArray(verify_sk(proj_4_4_AgeAgeBytSig_SignedObject(VAR_ATH_R0),skC)) in 
if VAR_ATH_J33DJ44ATHR0SC = hash((VAR_ATH_J14ATHR0,VAR_ATH_J24ATHR0,VAR_ATH_J23DJ44ATHR0SC)) then
let VAR_ATH_J34ATHR0: Crypto_ByteArray = proj_3_4_AgeAgeBytSig_Crypto_ByteArray(VAR_ATH_R0) in 
if VAR_ATH_J33DJ44ATHR0SC = hash((VAR_ATH_J14ATHR0,VAR_ATH_J24ATHR0,VAR_ATH_J34ATHR0)) then
if VAR_ATH_J34ATHR0 = VAR_ATH_J23DJ44ATHR0SC then
new T1: Crypto_ByteArray;
new KCG: SecretKey;
new Ktemp: SecretKey;
out(ch,(C,encS((ath,C,gw,KCG,T1),shk(ath,gw)),encS((gw,KCG,T1,VAR_ATH_J34ATHR0),Ktemp),enc_pk((tag,sign_sk(SecretKey2bitstring(Ktemp),Invskath)),pkC)));
out(ch,encS(PrivateKey2bitstring(InvskINVSATH_ath),fun_goal_INVSATH_ath(Invskath)));
event end(ath);
0.

(* Process C *)
let process_C(C: Agent,skath: PublicKey,InvpkC: PrivateKey,InvskC: PrivateKey) =
if not (C = ath) then
new N1: Crypto_ByteArray;
new T0: Crypto_ByteArray;
out(ch,(C,gw,N1,sign_sk((T0,N1,hash((C,gw,N1))),InvskC)));
in(ch,VAR_C_R1: bitstring);
if C = proj_1_4_AgeSeaSeaSeP_Agent(VAR_C_R1) then
let VAR_C_DSJ34CR1DJ22DJ44CR1INVPCSATH: bitstring = decS(proj_3_4_AgeSeaSeaSeP_SealedObject(VAR_C_R1),bitstring2SecretKey(verify_sk(proj_2_2_BytSig_SignedObject(dec_pk(proj_4_4_AgeSeaSeaSeP_SealedPair(VAR_C_R1),InvpkC)),skath))) in 
if gw = proj_1_4_AgeSecBytByt_Agent(VAR_C_DSJ34CR1DJ22DJ44CR1INVPCSATH) then
if N1 = proj_4_4_AgeSecBytByt_Crypto_ByteArray(VAR_C_DSJ34CR1DJ22DJ44CR1INVPCSATH) then
if tag = proj_1_2_BytSig_Crypto_ByteArray(dec_pk(proj_4_4_AgeSeaSeaSeP_SealedPair(VAR_C_R1),InvpkC)) then
new N2: Crypto_ByteArray;
let VAR_C_J24CDSJ34CR1DJ22DJ44CR1INVPCSATH: SecretKey = proj_2_4_AgeSecBytByt_SecretKey(VAR_C_DSJ34CR1DJ22DJ44CR1INVPCSATH) in 
out(ch,(s,N2,proj_2_4_AgeSeaSeaSeP_SealedObject(VAR_C_R1),encS((C,proj_3_4_AgeSecBytByt_Crypto_ByteArray(VAR_C_DSJ34CR1DJ22DJ44CR1INVPCSATH)),VAR_C_J24CDSJ34CR1DJ22DJ44CR1INVPCSATH)));
in(ch,VAR_C_R3: bitstring);
if C = proj_1_3_AgeSeaSea_Agent(VAR_C_R3) then
let VAR_C_DSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH: bitstring = decS(proj_3_3_AgeSeaSea_SealedObject(VAR_C_R3),VAR_C_J24CDSJ34CR1DJ22DJ44CR1INVPCSATH) in 
if s = proj_1_4_AgeSecBytByt_Agent(VAR_C_DSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH) then
if N2 = proj_4_4_AgeSecBytByt_Crypto_ByteArray(VAR_C_DSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH) then
let VAR_C_HJ34CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH: Crypto_ByteArray = hash(Crypto_ByteArray2bitstring(proj_3_4_AgeSecBytByt_Crypto_ByteArray(VAR_C_DSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH))) in 
let VAR_C_J24CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH: SecretKey = proj_2_4_AgeSecBytByt_SecretKey(VAR_C_DSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH) in 
out(ch,(proj_2_3_AgeSeaSea_SealedObject(VAR_C_R3),encS((C,VAR_C_HJ34CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH),VAR_C_J24CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH)));
in(ch,VAR_C_R5: bitstring);
if tag = proj_1_2_BytByt_Crypto_ByteArray(decS(proj_2_2_SeaSea_SealedObject(VAR_C_R5),VAR_C_J24CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH)) then
if VAR_C_HJ34CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH = bitstring2Crypto_ByteArray(decS(proj_1_2_SeaSea_SealedObject(VAR_C_R5),VAR_C_J24CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH)) then
event request_chgoal_FreshSecure_PAYLOAD_Cs(proj_2_2_BytByt_Crypto_ByteArray(decS(proj_2_2_SeaSea_SealedObject(VAR_C_R5),VAR_C_J24CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH)),C,s);
out(ch,encS(PrivateKey2bitstring(InvpkINVPC_C),fun_goal_INVPC_C(InvpkC)));
out(ch,encS(PrivateKey2bitstring(InvskINVSC_C),fun_goal_INVSC_C(InvskC)));
event end(C);
0.

(* Process Kerberos_PKINIT *)
let process_Kerberos_PKINIT(C: Agent,skath: PublicKey,Invskath: PrivateKey) =
(!in(ch,XC: Agent);
process_s(XC,C)) |
(!in(ch,XC: Agent);
process_gw(C)) |
(!in(ch,XC: Agent);
process_ath(XC,pk(priv_pk(XC)),sk(priv_sk(XC)),Invskath,C)) |
(!process_C(C,skath,priv_pk(C),priv_sk(C))).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X))
) | (
out(ch,C);
out(ch,pk(priv_pk(C)));
out(ch,sk(priv_sk(C)));
new Invskath: PrivateKey;
new Invpkath: PrivateKey;
new Invpkgw: PrivateKey;
new Invpks: PrivateKey;
new Invhkath: PrivateKey;
new Invhkgw: PrivateKey;
new Invhks: PrivateKey;
new Invskgw: PrivateKey;
new Invsks: PrivateKey;
let pkath = pk(Invpkath) in out(ch,pkath);
let pkgw = pk(Invpkgw) in out(ch,pkgw);
let pks = pk(Invpks) in out(ch,pks);
let hkath = hk(Invhkath) in out(ch,hkath);
let hkgw = hk(Invhkgw) in out(ch,hkgw);
let hks = hk(Invhks) in out(ch,hks);
let skath = sk(Invskath) in out(ch,skath);
let skgw = sk(Invskgw) in out(ch,skgw);
let sks = sk(Invsks) in out(ch,sks);
process_Kerberos_PKINIT(C,skath,Invskath))