(* Protocol: Orig_2KP *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Private channel declaration *)
free ch_priv_M_C: channel [private].

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_1_2_BytByt_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_2_2_BytByt_Crypto_ByteArray((x1,x2)) = x2.
reduc forall x1:SecretKey,x2:Crypto_ByteArray; proj_1_2_SecByt_SecretKey((x1,x2)) = x1.
reduc forall x1:SecretKey,x2:Crypto_ByteArray; proj_2_2_SecByt_Crypto_ByteArray((x1,x2)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SignedObject; proj_1_7_BytBytBytBytBytBytSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SignedObject; proj_2_7_BytBytBytBytBytBytSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SignedObject; proj_3_7_BytBytBytBytBytBytSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SignedObject; proj_4_7_BytBytBytBytBytBytSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SignedObject; proj_5_7_BytBytBytBytBytBytSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x5.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SignedObject; proj_6_7_BytBytBytBytBytBytSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x6.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SignedObject; proj_7_7_BytBytBytBytBytBytSig_SignedObject((x1,x2,x3,x4,x5,x6,x7)) = x7.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:SealedPair,x9:SignedObject; proj_1_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:SealedPair,x9:SignedObject; proj_2_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:SealedPair,x9:SignedObject; proj_3_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:SealedPair,x9:SignedObject; proj_4_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:SealedPair,x9:SignedObject; proj_5_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x5.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:SealedPair,x9:SignedObject; proj_6_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x6.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:SealedPair,x9:SignedObject; proj_7_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x7.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:SealedPair,x9:SignedObject; proj_8_9_BytBytBytBytBytBytBytSePSig_SealedPair((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x8.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:SealedPair,x9:SignedObject; proj_9_9_BytBytBytBytBytBytBytSePSig_SignedObject((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x9.
reduc forall x1:Crypto_ByteArray,x2:SealedPair; proj_1_2_BytSeP_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:SealedPair; proj_2_2_BytSeP_SealedPair((x1,x2)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:SecretKey; proj_1_4_BytBytBytSec_Crypto_ByteArray((x1,x2,x3,x4)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:SecretKey; proj_2_4_BytBytBytSec_Crypto_ByteArray((x1,x2,x3,x4)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:SecretKey; proj_3_4_BytBytBytSec_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:SecretKey; proj_4_4_BytBytBytSec_SecretKey((x1,x2,x3,x4)) = x4.
reduc forall x1:Crypto_ByteArray,x2:SignedObject; proj_1_2_BytSig_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:SignedObject; proj_2_2_BytSig_SignedObject((x1,x2)) = x2.
reduc forall x1:Crypto_ByteArray,x2:SignedObject,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_1_4_BytSigBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x1.
reduc forall x1:Crypto_ByteArray,x2:SignedObject,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_2_4_BytSigBytByt_SignedObject((x1,x2,x3,x4)) = x2.
reduc forall x1:Crypto_ByteArray,x2:SignedObject,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_3_4_BytSigBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:Crypto_ByteArray,x2:SignedObject,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_4_4_BytSigBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x4.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun can(Agent,Agent): Crypto_ByteArray [private].

(* Secret Goal Testing Functions *)
fun fun_goal_INVSA_a(PrivateKey): SecretKey.
fun fun_goal_INVHKA_a(PrivateKey): SecretKey.
fun fun_goal_INVPA_a(PrivateKey): SecretKey.
fun fun_goal_INVSM_M(PrivateKey): SecretKey.
fun fun_goal_INVHKM_M(PrivateKey): SecretKey.
fun fun_goal_INVPM_M(PrivateKey): SecretKey.
fun fun_goal_CANCA_Ca(Crypto_ByteArray): SecretKey.
fun fun_goal_DESC_CM(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free C: Agent.
free M: Agent.

(* Constants *)
const empty: Crypto_ByteArray.
const a: Agent.

(* Secrecy assumptions *)
not attacker(new Invpka).
not attacker(new Invhka).
not attacker(new Invska).

(* Goal queries *)
free InvskINVSA_a: PrivateKey [private].query attacker(InvskINVSA_a).
free InvhkINVHKA_a: PrivateKey [private].query attacker(InvhkINVHKA_a).
free InvpkINVPA_a: PrivateKey [private].query attacker(InvpkINVPA_a).
free InvskINVSM_M: PrivateKey [private].query attacker(InvskINVSM_M).
free InvhkINVHKM_M: PrivateKey [private].query attacker(InvhkINVHKM_M).
free InvpkINVPM_M: PrivateKey [private].query attacker(InvpkINVPM_M).
free CANCA_Ca: Crypto_ByteArray [private].query attacker(CANCA_Ca).
free DESC_CM: Crypto_ByteArray [private].query attacker(DESC_CM).
event witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_CM(bitstring,Agent,Agent).
event witness_wauth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_aM(bitstring,Agent,Agent).
event seen_TID_C(Crypto_ByteArray,Agent).
event seen_TID_a(Crypto_ByteArray,Agent).
event witness_auth_AUTH_Ca(Crypto_ByteArray,Agent,Agent).
event witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVCAUTH_Ca(bitstring,Agent,Agent).
event seen_Auth_M(Crypto_ByteArray,Agent).
event seen_Auth_C(Crypto_ByteArray,Agent).
event request_auth_AUTH_Ca(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; inj-event(request_auth_AUTH_Ca(m,a1,a2)) ==> inj-event(witness_auth_AUTH_Ca(m,a1,a2))
|| inj-event(seen_TID_C(sqn,a1)) && event(witness_auth_AUTH_Ca(m,a1,a2))
|| inj-event(seen_TID_a(sqn,a1)) && event(witness_auth_AUTH_Ca(m,a1,a2))
|| inj-event(seen_Auth_M(sqn,a1)) && event(witness_auth_AUTH_Ca(m,a1,a2))
|| inj-event(seen_Auth_C(sqn,a1)) && event(witness_auth_AUTH_Ca(m,a1,a2)).
event request_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVCAUTH_Ca(bitstring,Agent,Agent).
query m: bitstring, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; inj-event(request_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVCAUTH_Ca(m,a1,a2)) ==> inj-event(witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVCAUTH_Ca(m,a1,a2))
|| inj-event(seen_TID_C(sqn,a1)) && event(witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVCAUTH_Ca(m,a1,a2))
|| inj-event(seen_TID_a(sqn,a1)) && event(witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVCAUTH_Ca(m,a1,a2))
|| inj-event(seen_Auth_M(sqn,a1)) && event(witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVCAUTH_Ca(m,a1,a2))
|| inj-event(seen_Auth_C(sqn,a1)) && event(witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVCAUTH_Ca(m,a1,a2)).
event wrequest_wauth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_aM(bitstring,Agent,Agent).
query m: bitstring, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; event(wrequest_wauth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_aM(m,a1,a2)) ==> event(witness_wauth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_aM(m,a1,a2)).
event request_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_CM(bitstring,Agent,Agent).
query m: bitstring, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; inj-event(request_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_CM(m,a1,a2)) ==> inj-event(witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_CM(m,a1,a2))
|| inj-event(seen_TID_C(sqn,a1)) && event(witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_CM(m,a1,a2))
|| inj-event(seen_TID_a(sqn,a1)) && event(witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_CM(m,a1,a2))
|| inj-event(seen_Auth_M(sqn,a1)) && event(witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_CM(m,a1,a2))
|| inj-event(seen_Auth_C(sqn,a1)) && event(witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_CM(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(C)).
query event(end(M)).
query event(end(a)).

(* Process a *)
let process_a(C: Agent,M: Agent,skM: PublicKey,Invpka: PrivateKey,Invska: PrivateKey,Invhka: PrivateKey,honestC: Agent,honestM: Agent) =
in(ch,VAR_A_R5: bitstring);
let VAR_A_J29AR5: Crypto_ByteArray = proj_2_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray(VAR_A_R5) in 
event seen_TID_a(VAR_A_J29AR5,a);
let VAR_A_DJ22DJ99AR5SMINVPA: bitstring = dec_pk(proj_2_2_BytSeP_SealedPair(verify_sk(proj_9_9_BytBytBytBytBytBytBytSePSig_SignedObject(VAR_A_R5),skM)),Invpka) in 
let VAR_A_J12DJ99AR5SM: Crypto_ByteArray = proj_1_2_BytSeP_Crypto_ByteArray(verify_sk(proj_9_9_BytBytBytBytBytBytBytSePSig_SignedObject(VAR_A_R5),skM)) in 
if VAR_A_J12DJ99AR5SM = proj_2_4_BytBytBytSec_Crypto_ByteArray(VAR_A_DJ22DJ99AR5SMINVPA) then
let VAR_A_J14ADJ22DJ99AR5SMINVPA: Crypto_ByteArray = proj_1_4_BytBytBytSec_Crypto_ByteArray(VAR_A_DJ22DJ99AR5SMINVPA) in 
let VAR_A_J19AR5: Crypto_ByteArray = proj_1_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray(VAR_A_R5) in 
let VAR_A_J34ADJ22DJ99AR5SMINVPA: Crypto_ByteArray = proj_3_4_BytBytBytSec_Crypto_ByteArray(VAR_A_DJ22DJ99AR5SMINVPA) in 
let VAR_A_J39AR5: Crypto_ByteArray = proj_3_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray(VAR_A_R5) in 
let VAR_A_J44ADJ22DJ99AR5SMINVPA: SecretKey = proj_4_4_BytBytBytSec_SecretKey(VAR_A_DJ22DJ99AR5SMINVPA) in 
let VAR_A_J59AR5: Crypto_ByteArray = proj_5_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray(VAR_A_R5) in 
let VAR_A_J69AR5: Crypto_ByteArray = proj_6_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray(VAR_A_R5) in 
let VAR_A_J79AR5: Crypto_ByteArray = proj_7_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray(VAR_A_R5) in 
if VAR_A_J12DJ99AR5SM = hash((VAR_A_J14ADJ22DJ99AR5SMINVPA,VAR_A_J19AR5,VAR_A_J29AR5,VAR_A_J39AR5,hmac(Crypto_ByteArray2bitstring(VAR_A_J34ADJ22DJ99AR5SMINVPA),VAR_A_J44ADJ22DJ99AR5SMINVPA),VAR_A_J79AR5,VAR_A_J59AR5,VAR_A_J69AR5)) then
let VAR_A_DJ89AR5INVPA: bitstring = dec_pk(proj_8_9_BytBytBytBytBytBytBytSePSig_SealedPair(VAR_A_R5),Invpka) in 
let VAR_A_J14DJ89AR5INVPA: Crypto_ByteArray = proj_1_4_BytBytBytSec_Crypto_ByteArray(VAR_A_DJ89AR5INVPA) in 
if VAR_A_J14DJ89AR5INVPA = VAR_A_J14ADJ22DJ99AR5SMINVPA then
if proj_2_4_BytBytBytSec_Crypto_ByteArray(VAR_A_DJ89AR5INVPA) = VAR_A_J12DJ99AR5SM then
if proj_3_4_BytBytBytSec_Crypto_ByteArray(VAR_A_DJ89AR5INVPA) = VAR_A_J34ADJ22DJ99AR5SMINVPA then
let VAR_A_J44ADJ89AR5INVPA: SecretKey = proj_4_4_BytBytBytSec_SecretKey(VAR_A_DJ89AR5INVPA) in 
if VAR_A_J44ADJ89AR5INVPA = VAR_A_J44ADJ22DJ99AR5SMINVPA then
if proj_4_9_BytBytBytBytBytBytBytSePSig_Crypto_ByteArray(VAR_A_R5) = VAR_A_J12DJ99AR5SM then
let VAR_A_CANCA: Crypto_ByteArray = can(C,a) in 
if VAR_A_CANCA = VAR_A_J34ADJ22DJ99AR5SMINVPA then
new Auth: Crypto_ByteArray;
event witness_auth_AUTH_Ca(Auth,C,a);
event witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVCAUTH_Ca((VAR_A_J14DJ89AR5INVPA,VAR_A_J19AR5,VAR_A_J29AR5,VAR_A_J39AR5,hmac(Crypto_ByteArray2bitstring(VAR_A_CANCA),VAR_A_J44ADJ89AR5INVPA),VAR_A_J79AR5,VAR_A_J59AR5,VAR_A_J69AR5,Auth),C,a);
out(ch,(Auth,sign_sk(Crypto_ByteArray2bitstring(hash((Auth,hash((VAR_A_J14DJ89AR5INVPA,VAR_A_J19AR5,VAR_A_J29AR5,VAR_A_J39AR5,hmac(Crypto_ByteArray2bitstring(VAR_A_CANCA),VAR_A_J44ADJ89AR5INVPA),VAR_A_J79AR5,VAR_A_J59AR5,VAR_A_J69AR5))))),Invska)));
out(ch,encS(PrivateKey2bitstring(InvskINVSA_a),fun_goal_INVSA_a(Invska)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKA_a),fun_goal_INVHKA_a(Invhka)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPA_a),fun_goal_INVPA_a(Invpka)));
(if M = honestM then event wrequest_wauth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_aM((VAR_A_J14DJ89AR5INVPA,VAR_A_J19AR5,VAR_A_J29AR5,VAR_A_J39AR5,hmac(Crypto_ByteArray2bitstring(VAR_A_CANCA),VAR_A_J44ADJ89AR5INVPA),VAR_A_J79AR5,VAR_A_J59AR5,VAR_A_J69AR5),a,M)) |
(if C = honestC then out(ch,encS(Crypto_ByteArray2bitstring(CANCA_Ca),fun_goal_CANCA_Ca(VAR_A_CANCA)))) |
event end(a);
0.

(* Process M *)
let process_M(C: Agent,M: Agent,ska: PublicKey,InvpkM: PrivateKey,InvskM: PrivateKey,InvhkM: PrivateKey,honestC: Agent) =
in(ch_priv_M_C,VAR_M_R0: bitstring) [precise];
let VAR_M_J22MR0: Crypto_ByteArray = proj_2_2_BytByt_Crypto_ByteArray(VAR_M_R0) in 
if VAR_M_J22MR0 = VAR_M_J22MR0 then
out(ch_priv_M_C,empty);
in(ch,VAR_M_R2: bitstring);
let VAR_M_J12MR2: SecretKey = proj_1_2_SecByt_SecretKey(VAR_M_R2) in 
if VAR_M_J12MR2 = VAR_M_J12MR2 then
new ID: Crypto_ByteArray;
new NxV: Crypto_ByteArray;
new NxVC: Crypto_ByteArray;
new NxNONCE: Crypto_ByteArray;
new TID: Crypto_ByteArray;
event witness_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_CM((proj_1_2_BytByt_Crypto_ByteArray(VAR_M_R0),ID,TID,NxNONCE,proj_2_2_SecByt_Crypto_ByteArray(VAR_M_R2),hmac(Crypto_ByteArray2bitstring(VAR_M_J22MR0),VAR_M_J12MR2),hash(Crypto_ByteArray2bitstring(NxV)),hash(Crypto_ByteArray2bitstring(NxVC))),C,M);
event witness_wauth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_aM((proj_1_2_BytByt_Crypto_ByteArray(VAR_M_R0),ID,TID,NxNONCE,proj_2_2_SecByt_Crypto_ByteArray(VAR_M_R2),hmac(Crypto_ByteArray2bitstring(VAR_M_J22MR0),VAR_M_J12MR2),hash(Crypto_ByteArray2bitstring(NxV)),hash(Crypto_ByteArray2bitstring(NxVC))),a,M);
let VAR_M_HNXV: Crypto_ByteArray = hash(Crypto_ByteArray2bitstring(NxV)) in 
let VAR_M_HJ12MR0IDTIDNXNONCEJ22MR2MMJ22MR0MJ12MR2HNXVHNXVC: Crypto_ByteArray = hash((proj_1_2_BytByt_Crypto_ByteArray(VAR_M_R0),ID,TID,NxNONCE,proj_2_2_SecByt_Crypto_ByteArray(VAR_M_R2),hmac(Crypto_ByteArray2bitstring(VAR_M_J22MR0),VAR_M_J12MR2),VAR_M_HNXV,hash(Crypto_ByteArray2bitstring(NxVC)))) in 
let VAR_M_HNXVC: Crypto_ByteArray = hash(Crypto_ByteArray2bitstring(NxVC)) in 
out(ch,(ID,TID,NxNONCE,VAR_M_HJ12MR0IDTIDNXNONCEJ22MR2MMJ22MR0MJ12MR2HNXVHNXVC,VAR_M_HNXV,VAR_M_HNXVC,sign_sk(Crypto_ByteArray2bitstring(VAR_M_HJ12MR0IDTIDNXNONCEJ22MR2MMJ22MR0MJ12MR2HNXVHNXVC),InvskM)));
in(ch,VAR_M_R4: SealedPair);
if VAR_M_R4 = VAR_M_R4 then
out(ch,(ID,TID,NxNONCE,VAR_M_HJ12MR0IDTIDNXNONCEJ22MR2MMJ22MR0MJ12MR2HNXVHNXVC,VAR_M_HNXV,VAR_M_HNXVC,hmac(Crypto_ByteArray2bitstring(VAR_M_J22MR0),VAR_M_J12MR2),VAR_M_R4,sign_sk((VAR_M_HJ12MR0IDTIDNXNONCEJ22MR2MMJ22MR0MJ12MR2HNXVHNXVC,VAR_M_R4),InvskM)));
in(ch,VAR_M_R6: bitstring);
let VAR_M_J12MR6: Crypto_ByteArray = proj_1_2_BytSig_Crypto_ByteArray(VAR_M_R6) in 
event seen_Auth_M(VAR_M_J12MR6,M);
let VAR_M_J22MR6: SignedObject = proj_2_2_BytSig_SignedObject(VAR_M_R6) in 
if bitstring2Crypto_ByteArray(verify_sk(VAR_M_J22MR6,ska)) = hash((VAR_M_J12MR6,VAR_M_HJ12MR0IDTIDNXNONCEJ22MR2MMJ22MR0MJ12MR2HNXVHNXVC)) then
out(ch,(VAR_M_J12MR6,VAR_M_J22MR6,NxV,NxVC));
out(ch,encS(PrivateKey2bitstring(InvskINVSM_M),fun_goal_INVSM_M(InvskM)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKM_M),fun_goal_INVHKM_M(InvhkM)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPM_M),fun_goal_INVPM_M(InvpkM)));
(if C = honestC then out(ch,encS(Crypto_ByteArray2bitstring(DESC_CM),fun_goal_DESC_CM(VAR_M_J22MR0)))) |
event end(M);
0.

(* Process C *)
let process_C(C: Agent,M: Agent,pka: PublicKey,skM: PublicKey,ska: PublicKey,honestM: Agent) =
new Desc: Crypto_ByteArray;
new Price: Crypto_ByteArray;
out(ch_priv_M_C,(Price,Desc));
in(ch_priv_M_C,VAR_C_R1: Crypto_ByteArray) [precise];
if empty = VAR_C_R1 then
new HxRC: SecretKey;
new HxSALTC: SecretKey;
let VAR_C_MCANCAHXRC: Crypto_ByteArray = hmac(Crypto_ByteArray2bitstring(can(C,a)),HxRC) in 
out(ch,(HxSALTC,VAR_C_MCANCAHXRC));
in(ch,VAR_C_R3: bitstring);
let VAR_C_J27CR3: Crypto_ByteArray = proj_2_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3) in 
event seen_TID_C(VAR_C_J27CR3,C);
let VAR_C_DJ77CR3SM: Crypto_ByteArray = bitstring2Crypto_ByteArray(verify_sk(proj_7_7_BytBytBytBytBytBytSig_SignedObject(VAR_C_R3),skM)) in 
let VAR_C_J47CR3: Crypto_ByteArray = proj_4_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3) in 
if VAR_C_J47CR3 = VAR_C_DJ77CR3SM then
let VAR_C_HPRICEJ17CR3CJ27CR3J37CR3CMCANCAHXRCMDESCHXSALTCJ57CR3J67CR3: Crypto_ByteArray = hash((Price,proj_1_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3),VAR_C_J27CR3,proj_3_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3),VAR_C_MCANCAHXRC,hmac(Crypto_ByteArray2bitstring(Desc),HxSALTC),proj_5_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3),proj_6_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3))) in 
if VAR_C_J47CR3 = VAR_C_HPRICEJ17CR3CJ27CR3J37CR3CMCANCAHXRCMDESCHXSALTCJ57CR3J67CR3 then
out(ch,enc_pk((Price,VAR_C_HPRICEJ17CR3CJ27CR3J37CR3CMCANCAHXRCMDESCHXSALTCJ57CR3J67CR3,can(C,a),HxRC),pka));
in(ch,VAR_C_R7: bitstring);
let VAR_C_J14CR7: Crypto_ByteArray = proj_1_4_BytSigBytByt_Crypto_ByteArray(VAR_C_R7) in 
event seen_Auth_C(VAR_C_J14CR7,C);
if proj_5_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3) = hash(Crypto_ByteArray2bitstring(proj_3_4_BytSigBytByt_Crypto_ByteArray(VAR_C_R7))) then
if proj_6_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3) = hash(Crypto_ByteArray2bitstring(proj_4_4_BytSigBytByt_Crypto_ByteArray(VAR_C_R7))) then
if bitstring2Crypto_ByteArray(verify_sk(proj_2_4_BytSigBytByt_SignedObject(VAR_C_R7),ska)) = hash((VAR_C_J14CR7,VAR_C_DJ77CR3SM)) then
if VAR_C_DJ77CR3SM = VAR_C_HPRICEJ17CR3CJ27CR3J37CR3CMCANCAHXRCMDESCHXSALTCJ57CR3J67CR3 then
event request_auth_AUTH_Ca(VAR_C_J14CR7,C,a);
event request_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVCAUTH_Ca((Price,proj_1_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3),VAR_C_J27CR3,proj_3_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3),VAR_C_MCANCAHXRC,hmac(Crypto_ByteArray2bitstring(Desc),HxSALTC),hash(Crypto_ByteArray2bitstring(proj_3_4_BytSigBytByt_Crypto_ByteArray(VAR_C_R7))),hash(Crypto_ByteArray2bitstring(proj_4_4_BytSigBytByt_Crypto_ByteArray(VAR_C_R7))),VAR_C_J14CR7),C,a);
out(ch,encS(Crypto_ByteArray2bitstring(CANCA_Ca),fun_goal_CANCA_Ca(can(C,a))));
(if M = honestM then event request_auth_PRICEIDTIDNXNONCEMCANCAHXRCMDESCHXSALTCHNXVHNXVC_CM((Price,proj_1_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3),VAR_C_J27CR3,proj_3_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3),VAR_C_MCANCAHXRC,hmac(Crypto_ByteArray2bitstring(Desc),HxSALTC),proj_5_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3),proj_6_7_BytBytBytBytBytBytSig_Crypto_ByteArray(VAR_C_R3)),C,M)) |
(if M = honestM then out(ch,encS(Crypto_ByteArray2bitstring(DESC_CM),fun_goal_DESC_CM(Desc)))) |
event end(C);
0.

(* Process Orig_2KP *)
let process_Orig_2KP(C: Agent,M: Agent,pka: PublicKey,ska: PublicKey,Invpka: PrivateKey,Invska: PrivateKey,Invhka: PrivateKey) =
(!in(ch,XC: Agent);
in(ch,XM: Agent);
process_a(XC,XM,sk(priv_sk(XM)),Invpka,Invska,Invhka,C,M)) |
(!in(ch,XC: Agent);
process_M(XC,M,ska,priv_pk(M),priv_sk(M),priv_hk(M),C)) |
(!in(ch,XM: Agent);
process_C(C,XM,pka,sk(priv_sk(XM)),ska,M)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,can(X,a))
) | (
out(ch,C);
out(ch,M);
out(ch,pk(priv_pk(M)));
out(ch,sk(priv_sk(M)));
out(ch,hk(priv_hk(M)));
new Invpka: PrivateKey;
new Invska: PrivateKey;
new Invhka: PrivateKey;
let pka = pk(Invpka) in out(ch,pka);
let hka = hk(Invhka) in out(ch,hka);
let ska = sk(Invska) in out(ch,ska);
process_Orig_2KP(C,M,pka,ska,Invpka,Invska,Invhka) | process_Orig_2KP(M,C,pka,ska,Invpka,Invska,Invhka))