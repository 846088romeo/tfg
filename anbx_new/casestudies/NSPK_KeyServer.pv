(* Protocol: NSPK_KeyServer *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Agent,x2:Agent; proj_1_2_AgeAge_Agent((x1,x2)) = x1.
reduc forall x1:Agent,x2:Agent; proj_2_2_AgeAge_Agent((x1,x2)) = x2.
reduc forall x1:Agent,x2:PublicKey; proj_1_2_AgePub_Agent((x1,x2)) = x1.
reduc forall x1:Agent,x2:PublicKey; proj_2_2_AgePub_PublicKey((x1,x2)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Agent; proj_1_2_BytAge_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Agent; proj_2_2_BytAge_Agent((x1,x2)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_1_2_BytByt_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_2_2_BytByt_Crypto_ByteArray((x1,x2)) = x2.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Secret Goal Testing Functions *)
fun fun_goal_INVSS_s(PrivateKey): SecretKey.
fun fun_goal_INVPB_B(PrivateKey): SecretKey.
fun fun_goal_INVPA_A(PrivateKey): SecretKey.
fun fun_goal_chgoal_Confidential_NA_AB(Crypto_ByteArray): SecretKey.
fun fun_goal_chgoal_Confidential_NB_BA(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free A: Agent.
free B: Agent.

(* Constants *)
const s: Agent.

(* Secrecy assumptions *)
not attacker(new Invpks).
not attacker(new Invhks).
not attacker(new Invsks).

(* Goal queries *)
free InvskINVSS_s: PrivateKey [private].query attacker(InvskINVSS_s).
free InvpkINVPB_B: PrivateKey [private].query attacker(InvpkINVPB_B).
free InvpkINVPA_A: PrivateKey [private].query attacker(InvpkINVPA_A).
free chgoal_Confidential_NA_AB: Crypto_ByteArray [private].query attacker(chgoal_Confidential_NA_AB).
free chgoal_Confidential_NB_BA: Crypto_ByteArray [private].query attacker(chgoal_Confidential_NB_BA).
event witness_chgoal_FreshSecure_NA_BA(Crypto_ByteArray,Agent,Agent).
event witness_chgoal_FreshSecure_NB_AB(Crypto_ByteArray,Agent,Agent).
event request_chgoal_FreshSecure_NB_AB(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_chgoal_FreshSecure_NB_AB(m,a1,a2)) ==> inj-event(witness_chgoal_FreshSecure_NB_AB(m,a1,a2)).
event request_chgoal_FreshSecure_NA_BA(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_chgoal_FreshSecure_NA_BA(m,a1,a2)) ==> inj-event(witness_chgoal_FreshSecure_NA_BA(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(A)).
query event(end(s)).
query event(end(B)).

(* Process s *)
let process_s(A: Agent,B: Agent,pkA: PublicKey,pkB: PublicKey,Invsks: PrivateKey,honestA: Agent,honestB: Agent) =
in(ch,VAR_S_R0: bitstring);
if pkA = pk(priv_pk(proj_1_2_AgeAge_Agent(VAR_S_R0))) then
if pkB = pk(priv_pk(proj_2_2_AgeAge_Agent(VAR_S_R0))) then
let VAR_S_J22SR0: Agent = proj_2_2_AgeAge_Agent(VAR_S_R0) in 
out(ch,sign_sk((VAR_S_J22SR0,pk(priv_pk(VAR_S_J22SR0))),Invsks));
in(ch,VAR_S_R3: bitstring);
if VAR_S_J22SR0 = proj_1_2_AgeAge_Agent(VAR_S_R3) then
let VAR_S_J22SR3: Agent = proj_2_2_AgeAge_Agent(VAR_S_R3) in 
if VAR_S_J22SR3 = proj_1_2_AgeAge_Agent(VAR_S_R0) then
out(ch,sign_sk((VAR_S_J22SR3,pk(priv_pk(VAR_S_J22SR3))),Invsks));
out(ch,encS(PrivateKey2bitstring(InvskINVSS_s),fun_goal_INVSS_s(Invsks)));
event end(s);
0.

(* Process B *)
let process_B(A: Agent,B: Agent,pkA: PublicKey,sks: PublicKey,InvpkB: PrivateKey,honestA: Agent) =
in(ch,VAR_B_R2: SealedPair);
let VAR_B_J22DBR2INVPB: Agent = proj_2_2_BytAge_Agent(dec_pk(VAR_B_R2,InvpkB)) in 
if VAR_B_J22DBR2INVPB = VAR_B_J22DBR2INVPB then
new NB: Crypto_ByteArray;
event witness_chgoal_FreshSecure_NB_AB(NB,VAR_B_J22DBR2INVPB,B);
out(ch,(B,VAR_B_J22DBR2INVPB));
in(ch,VAR_B_R4: SignedObject);
let VAR_B_DBR4SS: bitstring = verify_sk(VAR_B_R4,sks) in 
if VAR_B_J22DBR2INVPB = proj_1_2_AgePub_Agent(VAR_B_DBR4SS) then
if pkA = proj_2_2_AgePub_PublicKey(VAR_B_DBR4SS) then
out(ch,enc_pk((proj_1_2_BytAge_Crypto_ByteArray(dec_pk(VAR_B_R2,InvpkB)),NB),pkA));
in(ch,VAR_B_R6: SealedPair);
if NB = bitstring2Crypto_ByteArray(dec_pk(VAR_B_R6,InvpkB)) then
out(ch,encS(PrivateKey2bitstring(InvpkINVPB_B),fun_goal_INVPB_B(InvpkB)));
(if VAR_B_J22DBR2INVPB = honestA then event request_chgoal_FreshSecure_NA_BA(proj_1_2_BytAge_Crypto_ByteArray(dec_pk(VAR_B_R2,InvpkB)),B,VAR_B_J22DBR2INVPB)) |
(if VAR_B_J22DBR2INVPB = honestA then out(ch,encS(Crypto_ByteArray2bitstring(chgoal_Confidential_NB_BA),fun_goal_chgoal_Confidential_NB_BA(NB)))) |
event end(B);
0.

(* Process A *)
let process_A(A: Agent,B: Agent,pkB: PublicKey,sks: PublicKey,InvpkA: PrivateKey,honestB: Agent) =
new NA: Crypto_ByteArray;
event witness_chgoal_FreshSecure_NA_BA(NA,B,A);
out(ch,(A,B));
in(ch,VAR_A_R1: SignedObject);
let VAR_A_DAR1SS: bitstring = verify_sk(VAR_A_R1,sks) in 
if proj_2_2_AgePub_PublicKey(VAR_A_DAR1SS) = proj_2_2_AgePub_PublicKey(VAR_A_DAR1SS) then
if VAR_A_DAR1SS = (B,pkB) then
out(ch,enc_pk((NA,A),pkB));
in(ch,VAR_A_R5: SealedPair);
let VAR_A_DAR5INVPA: bitstring = dec_pk(VAR_A_R5,InvpkA) in 
if NA = proj_1_2_BytByt_Crypto_ByteArray(VAR_A_DAR5INVPA) then
out(ch,enc_pk(Crypto_ByteArray2bitstring(proj_2_2_BytByt_Crypto_ByteArray(VAR_A_DAR5INVPA)),pkB));
out(ch,encS(PrivateKey2bitstring(InvpkINVPA_A),fun_goal_INVPA_A(InvpkA)));
(if B = honestB then event request_chgoal_FreshSecure_NB_AB(proj_2_2_BytByt_Crypto_ByteArray(VAR_A_DAR5INVPA),A,B)) |
(if B = honestB then out(ch,encS(Crypto_ByteArray2bitstring(chgoal_Confidential_NA_AB),fun_goal_chgoal_Confidential_NA_AB(NA)))) |
event end(A);
0.

(* Process NSPK_KeyServer *)
let process_NSPK_KeyServer(A: Agent,B: Agent,sks: PublicKey,Invsks: PrivateKey) =
(!in(ch,XA: Agent);
in(ch,XB: Agent);
process_s(XA,XB,pk(priv_pk(XA)),pk(priv_pk(XB)),Invsks,A,B)) |
(!in(ch,XA: Agent);
process_B(XA,B,pk(priv_pk(XA)),sks,priv_pk(B),A)) |
(!in(ch,XB: Agent);
process_A(A,XB,pk(priv_pk(XB)),sks,priv_pk(A),B)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X))
) | (
out(ch,A);
out(ch,B);
out(ch,pk(priv_pk(A)));
out(ch,pk(priv_pk(B)));
new Invsks: PrivateKey;
new Invpks: PrivateKey;
new Invhks: PrivateKey;
let pks = pk(Invpks) in out(ch,pks);
let hks = hk(Invhks) in out(ch,hks);
let sks = sk(Invsks) in out(ch,sks);
process_NSPK_KeyServer(A,B,sks,Invsks) | process_NSPK_KeyServer(B,A,sks,Invsks))