/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-02-04 11:59:25.3228784 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package tls_noclientauth;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class TLS_noClientAuth_ROLE_A extends AnB_Protocol<TLS_noClientAuth_Steps,TLS_noClientAuth_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	
	// local vars
	private Crypto_ByteArray NA = null;
	private Crypto_ByteArray Sid = null;
	private Crypto_ByteArray PA = null;
	private Crypto_ByteArray PMS = null;
	private AnBx_Params VAR_A_R1 = null;
	private AnBx_Params VAR_A_DJ44AR1SS = null;
	private Crypto_ByteArray VAR_A_J14AR1 = null;
	private Crypto_ByteArray VAR_A_HPRFPMSNAJ14AR1ABNAJ14AR1SIDPAJ34AR1PMS = null;
	private Crypto_ByteArray VAR_A_PRFPMSNAJ14AR1 = null;
	private SealedObject VAR_A_R3 = null;
	
	
	public TLS_noClientAuth_ROLE_A(TLS_noClientAuth_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
        };

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		TLS_noClientAuth_ROLE_A.sessions = sessions;
		
		AnB_Session ROLE_A_channel_ROLE_B_Client_Authentic = lbs.get("ROLE_A_channel_ROLE_B_Client_Authentic");
        AnB_Session ROLE_A_channel_ROLE_B_Server_Insecure = lbs.get("ROLE_A_channel_ROLE_B_Server_Insecure");
        
		init();
		
        ROLE_A_channel_ROLE_B_Client_Authentic.Open();
		ROLE_A_channel_ROLE_B_Server_Insecure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_A_channel_ROLE_B_Client_Authentic, TLS_noClientAuth_Steps.STEP_0);
					executeStep(ROLE_A_channel_ROLE_B_Server_Insecure, TLS_noClientAuth_Steps.STEP_1);
					executeStep(ROLE_A_channel_ROLE_B_Server_Insecure, TLS_noClientAuth_Steps.STEP_2);
					executeStep(ROLE_A_channel_ROLE_B_Server_Insecure, TLS_noClientAuth_Steps.STEP_3);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_A_channel_ROLE_B_Client_Authentic.Close();
		ROLE_A_channel_ROLE_B_Server_Insecure.Close();
		
	};

	protected void executeStep(AnB_Session s, TLS_noClientAuth_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_0:
			
			NA = s.getNonce();
			Sid = s.getNonce();
			PA = s.getNonce();
			s.Send(new AnBx_Params(aliases.get("ROLE_A"),NA,Sid,PA));

			break;
		
		case STEP_1:
			
			VAR_A_R1 = (AnBx_Params) s.Receive();
			VAR_A_DJ44AR1SS = (AnBx_Params) s.verify((SignedObject) VAR_A_R1.getValue(3),aliases.get("ROLE_s"));
			eqCheck("1.1",aliases.get("ROLE_B"),(String) VAR_A_DJ44AR1SS.getValue(0));
			eqCheck("1.2",Sid,(Crypto_ByteArray) VAR_A_R1.getValue(1));

			break;
		
		case STEP_2:
			
			PMS = s.getNonce();
			
			VAR_A_J14AR1 = (Crypto_ByteArray) VAR_A_R1.getValue(0);
			VAR_A_HPRFPMSNAJ14AR1ABNAJ14AR1SIDPAJ34AR1PMS = s.makeDigest(new AnBx_Params(prf(s,PMS,NA,VAR_A_J14AR1),aliases.get("ROLE_A"),aliases.get("ROLE_B"),NA,VAR_A_J14AR1,Sid,PA,(Crypto_ByteArray) VAR_A_R1.getValue(2),PMS));
			VAR_A_PRFPMSNAJ14AR1 = prf(s,PMS,NA,VAR_A_J14AR1);
			s.Send(new AnBx_Params(s.encrypt(PMS,(PublicKey) VAR_A_DJ44AR1SS.getValue(1)),s.makeDigest(new AnBx_Params(VAR_A_J14AR1,aliases.get("ROLE_B"),PMS)),s.encrypt(VAR_A_HPRFPMSNAJ14AR1ABNAJ14AR1SIDPAJ34AR1PMS,clientK(s,NA,VAR_A_J14AR1,VAR_A_PRFPMSNAJ14AR1))));

			break;
		
		case STEP_3:
			
			VAR_A_R3 = (SealedObject) s.Receive();
			eqCheck("3.1",(Crypto_ByteArray) s.decrypt(VAR_A_R3,serverK(s,NA,VAR_A_J14AR1,VAR_A_PRFPMSNAJ14AR1)),VAR_A_HPRFPMSNAJ14AR1ABNAJ14AR1SIDPAJ34AR1PMS);

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	private SecretKey clientK(AnB_Session s,Crypto_ByteArray par1,Crypto_ByteArray par2,Crypto_ByteArray par3) {
		return TLS_noClientAuth_Functions.clientK(s,par1,par2,par3);
	}
	
	private SecretKey serverK(AnB_Session s,Crypto_ByteArray par1,Crypto_ByteArray par2,Crypto_ByteArray par3) {
		return TLS_noClientAuth_Functions.serverK(s,par1,par2,par3);
	}
	
	private Crypto_ByteArray prf(AnB_Session s,Crypto_ByteArray par1,Crypto_ByteArray par2,Crypto_ByteArray par3) {
		return TLS_noClientAuth_Functions.prf(s,par1,par2,par3);
	}
	
	

	
	

}