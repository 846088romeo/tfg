/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-02-04 11:59:13.9224955 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package orig_2kp;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class Orig_2KP_ROLE_a extends AnB_Protocol<Orig_2KP_Steps,Orig_2KP_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	private static Crypto_ByteArray empty = new Crypto_ByteArray("empty".getBytes());
	
	// local vars
	private Crypto_ByteArray CanCa = null;
	private Crypto_ByteArray Auth = null;
	private AnBx_Params VAR_A_R3 = null;
	private Crypto_ByteArray VAR_A_J29AR3 = null;
	private AnBx_Params VAR_A_DJ22DJ99AR3SMINVPA = null;
	private Crypto_ByteArray VAR_A_J12DJ99AR3SM = null;
	private Crypto_ByteArray VAR_A_J14ADJ22DJ99AR3SMINVPA = null;
	private Crypto_ByteArray VAR_A_J19AR3 = null;
	private Crypto_ByteArray VAR_A_J34ADJ22DJ99AR3SMINVPA = null;
	private Crypto_ByteArray VAR_A_J39AR3 = null;
	private SecretKey VAR_A_J44ADJ22DJ99AR3SMINVPA = null;
	private Crypto_ByteArray VAR_A_J59AR3 = null;
	private Crypto_ByteArray VAR_A_J69AR3 = null;
	private Crypto_ByteArray VAR_A_J79AR3 = null;
	private AnBx_Params VAR_A_DJ89AR3INVPA = null;
	private Crypto_ByteArray VAR_A_J14DJ89AR3INVPA = null;
	private SecretKey VAR_A_J44ADJ89AR3INVPA = null;
	private Crypto_ByteArray VAR_A_CANCA = null;
	
	
	public Orig_2KP_ROLE_a(Orig_2KP_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
         CanCa = (Crypto_ByteArray) AnB_Session.readObject(sharepath+"can_"+aliases.get("ROLE_C")+"_"+aliases.get("ROLE_a")+".ser");
		};

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		Orig_2KP_ROLE_a.sessions = sessions;
		
		AnB_Session ROLE_a_channel_ROLE_M_Server_Insecure = lbs.get("ROLE_a_channel_ROLE_M_Server_Insecure");
        
		init();
		
        ROLE_a_channel_ROLE_M_Server_Insecure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_a_channel_ROLE_M_Server_Insecure, Orig_2KP_Steps.STEP_3);
					executeStep(ROLE_a_channel_ROLE_M_Server_Insecure, Orig_2KP_Steps.STEP_4);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_a_channel_ROLE_M_Server_Insecure.Close();
		
	};

	protected void executeStep(AnB_Session s, Orig_2KP_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_3:
			
			VAR_A_R3 = (AnBx_Params) s.Receive();
			VAR_A_J29AR3 = (Crypto_ByteArray) VAR_A_R3.getValue(1);
			seen("3.0",VAR_A_J29AR3);
			VAR_A_DJ22DJ99AR3SMINVPA = (AnBx_Params) s.decrypt((Crypto_SealedPair) new AnBx_Params((AnBx_Params) s.verify((SignedObject) VAR_A_R3.getValue(8),aliases.get("ROLE_M"))).getValue(1));
			VAR_A_J12DJ99AR3SM = (Crypto_ByteArray) new AnBx_Params((AnBx_Params) s.verify((SignedObject) VAR_A_R3.getValue(8),aliases.get("ROLE_M"))).getValue(0);
			eqCheck("3.1",VAR_A_J12DJ99AR3SM,(Crypto_ByteArray) VAR_A_DJ22DJ99AR3SMINVPA.getValue(1));
			VAR_A_J14ADJ22DJ99AR3SMINVPA = (Crypto_ByteArray) VAR_A_DJ22DJ99AR3SMINVPA.getValue(0);
			VAR_A_J19AR3 = (Crypto_ByteArray) VAR_A_R3.getValue(0);
			VAR_A_J34ADJ22DJ99AR3SMINVPA = (Crypto_ByteArray) VAR_A_DJ22DJ99AR3SMINVPA.getValue(2);
			VAR_A_J39AR3 = (Crypto_ByteArray) VAR_A_R3.getValue(2);
			VAR_A_J44ADJ22DJ99AR3SMINVPA = (SecretKey) VAR_A_DJ22DJ99AR3SMINVPA.getValue(3);
			VAR_A_J59AR3 = (Crypto_ByteArray) VAR_A_R3.getValue(4);
			VAR_A_J69AR3 = (Crypto_ByteArray) VAR_A_R3.getValue(5);
			VAR_A_J79AR3 = (Crypto_ByteArray) VAR_A_R3.getValue(6);
			eqCheck("3.2",VAR_A_J12DJ99AR3SM,s.makeDigest(new AnBx_Params(VAR_A_J14ADJ22DJ99AR3SMINVPA,VAR_A_J19AR3,VAR_A_J29AR3,VAR_A_J39AR3,s.makeHmac(VAR_A_J34ADJ22DJ99AR3SMINVPA,(SecretKey) VAR_A_J44ADJ22DJ99AR3SMINVPA),VAR_A_J79AR3,VAR_A_J59AR3,VAR_A_J69AR3)));
			VAR_A_DJ89AR3INVPA = (AnBx_Params) s.decrypt((Crypto_SealedPair) VAR_A_R3.getValue(7));
			VAR_A_J14DJ89AR3INVPA = (Crypto_ByteArray) VAR_A_DJ89AR3INVPA.getValue(0);
			eqCheck("3.3",VAR_A_J14DJ89AR3INVPA,VAR_A_J14ADJ22DJ99AR3SMINVPA);
			eqCheck("3.4",(Crypto_ByteArray) VAR_A_DJ89AR3INVPA.getValue(1),VAR_A_J12DJ99AR3SM);
			eqCheck("3.5",(Crypto_ByteArray) VAR_A_DJ89AR3INVPA.getValue(2),VAR_A_J34ADJ22DJ99AR3SMINVPA);
			VAR_A_J44ADJ89AR3INVPA = (SecretKey) VAR_A_DJ89AR3INVPA.getValue(3);
			eqCheck("3.6",VAR_A_J44ADJ89AR3INVPA,VAR_A_J44ADJ22DJ99AR3SMINVPA);
			eqCheck("3.7",(Crypto_ByteArray) VAR_A_R3.getValue(3),VAR_A_J12DJ99AR3SM);
			VAR_A_CANCA = CanCa;
			eqCheck("3.8",VAR_A_CANCA,VAR_A_J34ADJ22DJ99AR3SMINVPA);

			break;
		
		case STEP_4:
			
			Auth = s.getSeqNumber();
			
			
			s.Send(new AnBx_Params(Auth,s.sign(s.makeDigest(new AnBx_Params(Auth,s.makeDigest(new AnBx_Params(VAR_A_J14DJ89AR3INVPA,VAR_A_J19AR3,VAR_A_J29AR3,VAR_A_J39AR3,s.makeHmac(VAR_A_CANCA,(SecretKey) VAR_A_J44ADJ89AR3INVPA),VAR_A_J79AR3,VAR_A_J59AR3,VAR_A_J69AR3)))))));

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	

	
	

}