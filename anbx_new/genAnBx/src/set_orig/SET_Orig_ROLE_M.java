/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-02-04 11:59:19.5051868 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package set_orig;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class SET_Orig_ROLE_M extends AnB_Protocol<SET_Orig_Steps,SET_Orig_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	private static Crypto_ByteArray empty = new Crypto_ByteArray("empty".getBytes());
	
	// local vars
	private Crypto_ByteArray OrderDesc = null;
	private Crypto_ByteArray PurchAmt = null;
	private Crypto_ByteArray NxXID = null;
	private Crypto_ByteArray NxChallM = null;
	private AnBx_Params VAR_M_R0 = null;
	private Crypto_ByteArray VAR_M_J22MR0 = null;
	private Crypto_ByteArray VAR_M_J12MR0 = null;
	private AnBx_Params VAR_M_R2 = null;
	private Crypto_ByteArray VAR_M_J78MR2 = null;
	private Crypto_ByteArray VAR_M_J48MR2 = null;
	private SignedObject VAR_M_J18MR2 = null;
	private Crypto_ByteArray VAR_M_J22DJ18MR2SC = null;
	private Crypto_ByteArray VAR_M_J68MR2 = null;
	private Crypto_ByteArray VAR_M_HORDERDESCPURCHAMT = null;
	private Crypto_ByteArray VAR_M_J38MR2 = null;
	private Crypto_ByteArray VAR_M_J58MR2 = null;
	private Crypto_SealedPair VAR_M_R4 = null;
	private AnBx_Params VAR_M_DDMR4INVPMSA = null;
	private Crypto_ByteArray VAR_M_J25MDDMR4INVPMSA = null;
	
	
	public SET_Orig_ROLE_M(SET_Orig_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
         PurchAmt = (Crypto_ByteArray) AnB_Session.readObject(sharepath+"PurchAmt.ser");
		 OrderDesc = (Crypto_ByteArray) AnB_Session.readObject(sharepath+"OrderDesc.ser");
		};

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		SET_Orig_ROLE_M.sessions = sessions;
		
		AnB_Session ROLE_M_channel_ROLE_C_Server_Insecure = lbs.get("ROLE_M_channel_ROLE_C_Server_Insecure");
        AnB_Session ROLE_M_channel_ROLE_a_Client_Insecure = lbs.get("ROLE_M_channel_ROLE_a_Client_Insecure");
        
		init();
		
        ROLE_M_channel_ROLE_C_Server_Insecure.Open();
		ROLE_M_channel_ROLE_a_Client_Insecure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_M_channel_ROLE_C_Server_Insecure, SET_Orig_Steps.STEP_0);
					executeStep(ROLE_M_channel_ROLE_C_Server_Insecure, SET_Orig_Steps.STEP_1);
					executeStep(ROLE_M_channel_ROLE_C_Server_Insecure, SET_Orig_Steps.STEP_2);
					executeStep(ROLE_M_channel_ROLE_a_Client_Insecure, SET_Orig_Steps.STEP_3);
					executeStep(ROLE_M_channel_ROLE_a_Client_Insecure, SET_Orig_Steps.STEP_4);
					executeStep(ROLE_M_channel_ROLE_C_Server_Insecure, SET_Orig_Steps.STEP_5);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_M_channel_ROLE_C_Server_Insecure.Close();
		ROLE_M_channel_ROLE_a_Client_Insecure.Close();
		
	};

	protected void executeStep(AnB_Session s, SET_Orig_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_0:
			
			VAR_M_R0 = (AnBx_Params) s.Receive();
			VAR_M_J22MR0 = (Crypto_ByteArray) VAR_M_R0.getValue(1);
			wffCheck("0.1",VAR_M_J22MR0);

			break;
		
		case STEP_1:
			
			NxXID = s.getNonce();
			NxChallM = s.getNonce();
			VAR_M_J12MR0 = (Crypto_ByteArray) VAR_M_R0.getValue(0);
			s.Send(s.sign(new AnBx_Params(VAR_M_J12MR0,NxXID,VAR_M_J22MR0,NxChallM)));

			break;
		
		case STEP_2:
			
			VAR_M_R2 = (AnBx_Params) s.Receive();
			VAR_M_J78MR2 = (Crypto_ByteArray) VAR_M_R2.getValue(6);
			eqCheck("2.1",NxChallM,VAR_M_J78MR2);
			VAR_M_J48MR2 = (Crypto_ByteArray) VAR_M_R2.getValue(3);
			eqCheck("2.2",NxXID,VAR_M_J48MR2);
			VAR_M_J18MR2 = (SignedObject) VAR_M_R2.getValue(0);
			VAR_M_J22DJ18MR2SC = (Crypto_ByteArray) new AnBx_Params((AnBx_Params) s.verify(VAR_M_J18MR2,aliases.get("ROLE_C"))).getValue(1);
			VAR_M_J68MR2 = (Crypto_ByteArray) VAR_M_R2.getValue(5);
			eqCheck("2.3",VAR_M_J22DJ18MR2SC,s.makeDigest(new AnBx_Params(VAR_M_J12MR0,VAR_M_J48MR2,VAR_M_J22MR0,VAR_M_J68MR2,VAR_M_J78MR2)));
			VAR_M_HORDERDESCPURCHAMT = s.makeDigest(new AnBx_Params(OrderDesc,PurchAmt));
			VAR_M_J38MR2 = (Crypto_ByteArray) VAR_M_R2.getValue(2);
			VAR_M_J58MR2 = (Crypto_ByteArray) VAR_M_R2.getValue(4);
			eqCheck("2.4",VAR_M_J22DJ18MR2SC,s.makeDigest(new AnBx_Params(VAR_M_J38MR2,VAR_M_J48MR2,VAR_M_J58MR2,VAR_M_HORDERDESCPURCHAMT,VAR_M_J78MR2)));
			eqCheck("2.5",VAR_M_J38MR2,VAR_M_J12MR0);
			eqCheck("2.6",VAR_M_J58MR2,VAR_M_J22MR0);
			eqCheck("2.7",(Crypto_ByteArray) VAR_M_R2.getValue(7),(Crypto_ByteArray) new AnBx_Params((AnBx_Params) s.verify(VAR_M_J18MR2,aliases.get("ROLE_C"))).getValue(0));
			eqCheck("2.8",VAR_M_HORDERDESCPURCHAMT,VAR_M_J68MR2);

			break;
		
		case STEP_3:
			
			
			s.Send(s.encrypt(s.sign(new AnBx_Params(VAR_M_J38MR2,NxXID,s.makeDigest(new AnBx_Params(VAR_M_J38MR2,NxXID,VAR_M_J58MR2,VAR_M_HORDERDESCPURCHAMT,NxChallM)),VAR_M_HORDERDESCPURCHAMT,VAR_M_J18MR2,(Crypto_SealedPair) VAR_M_R2.getValue(1))),aliases.get("ROLE_a")));

			break;
		
		case STEP_4:
			
			VAR_M_R4 = (Crypto_SealedPair) s.Receive();
			VAR_M_DDMR4INVPMSA = (AnBx_Params) s.verify((SignedObject) s.decrypt(VAR_M_R4),aliases.get("ROLE_a"));
			eqCheck("4.1",aliases.get("ROLE_M"),(String) VAR_M_DDMR4INVPMSA.getValue(0));
			eqCheck("4.2",NxXID,(Crypto_ByteArray) VAR_M_DDMR4INVPMSA.getValue(2));
			eqCheck("4.3",PurchAmt,(Crypto_ByteArray) VAR_M_DDMR4INVPMSA.getValue(3));
			VAR_M_J25MDDMR4INVPMSA = (Crypto_ByteArray) VAR_M_DDMR4INVPMSA.getValue(1);
			eqCheck("4.4",VAR_M_J22DJ18MR2SC,s.makeDigest(new AnBx_Params(VAR_M_J25MDDMR4INVPMSA,NxXID,VAR_M_J58MR2,VAR_M_HORDERDESCPURCHAMT,NxChallM)));
			eqCheck("4.5",VAR_M_J38MR2,VAR_M_J25MDDMR4INVPMSA);

			break;
		
		case STEP_5:
			
			
			s.Send(s.sign(new AnBx_Params(aliases.get("ROLE_C"),VAR_M_J38MR2,NxXID,VAR_M_J58MR2,s.makeDigest(PurchAmt),(Crypto_ByteArray) VAR_M_DDMR4INVPMSA.getValue(4))));

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	

	
	

}