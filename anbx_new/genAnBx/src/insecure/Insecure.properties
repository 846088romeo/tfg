# Protocol: Insecure
# Java Configuration File: "N:/JavaProjects/genAnBx/src/insecure/Insecure.properties"
# AnBx Compiler and Code Generator - Version 2025.01
# -----------------------------
# Roles/Share
# -----------------------------
ROLESHARE = ROLE_A
# Aliases for agents A,B from the point of view of ROLE_x
ROLE_A = alice,bob
ROLE_B = alice,bob
# -----------------------------
# Channels
# -----------------------------
# A -> B - 192.168.0.32 -> 192.168.0.32:55555
ROLE_B_channel_ROLE_A_Server_Insecure_role = Server
ROLE_B_channel_ROLE_A_Server_Insecure_host = 0.0.0.0
ROLE_B_channel_ROLE_A_Server_Insecure_port = 55555
ROLE_B_channel_ROLE_A_Server_Insecure_type = SSL_PLAIN
# B -> A - 192.168.0.32:55555 -> 192.168.0.32
ROLE_A_channel_ROLE_B_Client_Insecure_role = Client
ROLE_A_channel_ROLE_B_Client_Insecure_host = 192.168.0.32
ROLE_A_channel_ROLE_B_Client_Insecure_port = 55555
ROLE_A_channel_ROLE_B_Client_Insecure_type = SSL_PLAIN
# -----------------------------
# Paths
# -----------------------------
keypath = ../../keystore/
sharepath = ./
anbxjpath = ../../../AnBxJ/
# -----------------------------
# Cryptographic Engine Settings
# -----------------------------
# Java Cryptography Architecture (JCA) Reference Guide
# For more information, refer to the JCA Reference Guide:
# https://docs.oracle.com/en/java/javase/21/security/java-cryptography-architecture-jca-reference-guide.html
# see names at
# Java 21 - https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html
# Information about cryptographic specifications can also be found at:
# Bouncy Castle - https://www.bouncycastle.org/documentation/specification_interoperability/#algorithms-and-key-types
#
# Note: Signature Algorithms and (Asymmetric Encryption) Cipher Algorithms
# are automatically detected from the keys used, which are pre-memorized in the keystore
#
# -----------------------------
# Cipher scheme used for encryption, including algorithm name, mode, and padding, separated by /
# https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#cipher-algorithm-names
# https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#cipher-algorithm-modes
# https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#cipher-algorithm-paddings
cipherScheme = ChaCha
# Key length in bits for ciphers supporting different key lengths
keySize = 256
# -----------------------------
# Key generator algorithm for dynamic key generation in symmetric encryption
keyGenerationScheme = AES
# Key length in bits for dynamic symmetric key generation, for ciphers supporting different key lengths 
keyGenerationSize = 256
# -----------------------------
# Secret Key Factory algorithm used for Password-Based Encryption (PBE) dynamic symmetric key generation
# https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.htmld#secretkeyfactory-algorithms
keyGenerationSchemePBE = PBKDF2WithHmacSHA512
# -----------------------------
# Key Pair Generator algorithm for dynamic creation of asymmetric key pairs
# https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#keypairgenerator-algorithms
keyPairGenerationScheme = RSA
# Key length for dynamic creation of asymmetric key pairs
keyPairGenerationSize = 2048
# -----------------------------
# SecureRandom Number Generation Algorithm
# https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms
secureRandomAlgorithm = DRBG
# -----------------------------
# (H)MAC Algorithm, used for key generation
# https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#mac-algorithms
hMacAlgorithm = HmacSHA256
# -----------------------------
# MessageDigest Algorithm (Hash)
# https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#messagedigest-algorithms
messageDigestAlgorithm = SHA-256
# -----------------------------
# Key Agreement Algorithm, used for key exchange (e.g., Diffie-Hellman)
# https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#keyagreement-algorithms
keyAgreementAlgorithm = ECDH
# Key Pair Generation for Key Agreement Algorithm, used for key exchange (e.g., Diffie-Hellman)
# https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#keypairgenerator-algorithms
keyAgreementKeyPairGenerationScheme = ECDH
# Length in bits for random exponents in Diffie-Hellman key agreement
dhRndExpSize = 4096
# The elliptic curve used for ECDH key agreement
# https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.htmlparameterspec-names
ecGenParameterSpec = secp521r1
# -----------------------------
# Asymmetric encryption scheme block mode (experimental feature)
asymcipherSchemeBlock = RSA
# SSLContext Algorithm
sslContext = TLSv1.3
# -----------------------------
# Java Security provider: default uses the java.security settings (preferred option)
# Or select a specific provider (e.g., 'BC' for Bouncy Castle)
securityProvider = BC
# Optional: Specific Java Security providers for different schemes
# These settings will override the securityProvider value if uncommented
# cipherSchemeProvider = BC
# keyGenerationSchemeProvider = BC
# keyGenerationSchemePBEProvider = BC
# keyPairGenerationSchemeProvider = BC
# secureRandomProvider = default
# hmacProvider = BC
# messageDigestProvider = BC
# signatureProvider = BC
# asymEncProvider = BC
# keyAgreementProvider = BC
# sslContextProvider = BC
