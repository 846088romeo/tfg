/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-02-04 11:58:51.2541306 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package definition_test;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnBx_CommandLine_Parser;
import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.Crypto_Config;
import anbxj.Crypto_KeyStoreSettings_Map;

public class Definition_Test_Setup extends AnBx_CommandLine_Parser<Definition_Test_Roles, Definition_Test_Channels> {

	public static void main(String[] args) {

		// AnBx_Debug.setAPPLICATION(true);
		// AnBx_Debug.setPROTOCOL(true);
		// AnBx_Debug.setSESSION(true);
		// AnBx_Debug.setLANGUAGE(true);
		// AnBx_Debug.setENCRYPTION(true);
		// AnBx_Debug.setBUSINESS_LOGIC(true);
		// AnBx_Debug.setALL(true); // true only for testing speed

		long start = System.nanoTime();

		Definition_Test_Setup p = new Definition_Test_Setup(args, Definition_Test_Setup.class.getSimpleName(), Definition_Test.class.getSimpleName(), true, false);
		p.setLayer(AnBx_Layers.APPLICATION);
		p.initProtocol();
		
		long end = System.nanoTime();
      	double durationInMs = (end - start) / 1_000_000.0;
		System.out.println(String.format("%s - Execution time was %.3f ms.", "Definition_Test_Setup", durationInMs));
	}

	public Definition_Test_Setup(String[] args, String prot, String configName, boolean vflag, boolean parseFullArgs) {
	 	super(args, prot, configName, Definition_Test_Roles.class, vflag, parseFullArgs);
	}

	@Override
	protected void initProtocol() {
		Map<String, String> aliases = new HashMap<String, String>();
		Definition_Test_Roles roleshare = getRoleShare(Definition_Test_Roles.class);
		readConfigFile(aliases, Definition_Test_Roles.class, roleshare);

		AnB_Crypto_Wrapper s;
		Crypto_KeyStoreSettings_Map kssd = new Crypto_KeyStoreSettings_Map(keypath, myAlias);
		s = new AnB_Crypto_Wrapper(kssd,new Crypto_Config(configFile));

        // create shared knowledge objects
		
        
        // create agreed knowledge objects
		
	}

	void createSharedObject(Object obj, List<Definition_Test_Roles> shroles, List<Definition_Test_Roles> parroles, String filenameprefix, String ext) {
	    // Create the aliases map outside of the loop
	    Map<String, String> aliases = new HashMap<String, String>();

	    // Populate the aliases map for each role
	    for (Definition_Test_Roles shrole : shroles) {
	        readConfigFile(aliases, Definition_Test_Roles.class, shrole); // Pass enum type role
	        // Construct the filename using the aliases map
	        
		    StringBuilder filenameBuilder = new StringBuilder(filenameprefix);
		    if (!parroles.isEmpty()) {
		    	for (Definition_Test_Roles parrole : parroles) {
		    		filenameBuilder.append("_").append(aliases.get(parrole.toString()));
		    	}	
		    }
            String filename = filenameBuilder.append(ext).toString();
	        AnB_Crypto_Wrapper.writeObject(obj, sharepath + filename);
	    }
	}

}