/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-02-04 11:59:05.5318374 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package kerberos_pkinit;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class Kerberos_PKINIT_ROLE_C extends AnB_Protocol<Kerberos_PKINIT_Steps,Kerberos_PKINIT_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	private static Crypto_ByteArray tag = new Crypto_ByteArray("tag".getBytes());
	
	// local vars
	private Crypto_ByteArray N1 = null;
	private Crypto_ByteArray N2 = null;
	private Crypto_ByteArray T0 = null;
	private AnBx_Params VAR_C_R1 = null;
	private AnBx_Params VAR_C_DSJ34CR1DJ22DJ44CR1INVPCSATH = null;
	private SecretKey VAR_C_J24CDSJ34CR1DJ22DJ44CR1INVPCSATH = null;
	private AnBx_Params VAR_C_R3 = null;
	private AnBx_Params VAR_C_DSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH = null;
	private Crypto_ByteArray VAR_C_HJ34CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH = null;
	private SecretKey VAR_C_J24CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH = null;
	private AnBx_Params VAR_C_R5 = null;
	
	
	public Kerberos_PKINIT_ROLE_C(Kerberos_PKINIT_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
        };

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		Kerberos_PKINIT_ROLE_C.sessions = sessions;
		
		AnB_Session ROLE_C_channel_ROLE_ath_Client_Insecure = lbs.get("ROLE_C_channel_ROLE_ath_Client_Insecure");
        AnB_Session ROLE_C_channel_ROLE_gw_Client_Insecure = lbs.get("ROLE_C_channel_ROLE_gw_Client_Insecure");
        AnB_Session ROLE_C_channel_ROLE_s_Client_Insecure = lbs.get("ROLE_C_channel_ROLE_s_Client_Insecure");
        
		init();
		
        ROLE_C_channel_ROLE_ath_Client_Insecure.Open();
		ROLE_C_channel_ROLE_gw_Client_Insecure.Open();
		ROLE_C_channel_ROLE_s_Client_Insecure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_C_channel_ROLE_ath_Client_Insecure, Kerberos_PKINIT_Steps.STEP_0);
					executeStep(ROLE_C_channel_ROLE_ath_Client_Insecure, Kerberos_PKINIT_Steps.STEP_1);
					executeStep(ROLE_C_channel_ROLE_gw_Client_Insecure, Kerberos_PKINIT_Steps.STEP_2);
					executeStep(ROLE_C_channel_ROLE_gw_Client_Insecure, Kerberos_PKINIT_Steps.STEP_3);
					executeStep(ROLE_C_channel_ROLE_s_Client_Insecure, Kerberos_PKINIT_Steps.STEP_4);
					executeStep(ROLE_C_channel_ROLE_s_Client_Insecure, Kerberos_PKINIT_Steps.STEP_5);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_C_channel_ROLE_ath_Client_Insecure.Close();
		ROLE_C_channel_ROLE_gw_Client_Insecure.Close();
		ROLE_C_channel_ROLE_s_Client_Insecure.Close();
		
	};

	protected void executeStep(AnB_Session s, Kerberos_PKINIT_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_0:
			
			noteqCheck("0.1",aliases.get("ROLE_C"),aliases.get("ROLE_ath"));
			N1 = s.getNonce();
			T0 = s.getNonce();
			s.Send(new AnBx_Params(aliases.get("ROLE_C"),aliases.get("ROLE_gw"),N1,s.sign(new AnBx_Params(T0,N1,s.makeDigest(new AnBx_Params(aliases.get("ROLE_C"),aliases.get("ROLE_gw"),N1))))));

			break;
		
		case STEP_1:
			
			VAR_C_R1 = (AnBx_Params) s.Receive();
			eqCheck("1.1",aliases.get("ROLE_C"),(String) VAR_C_R1.getValue(0));
			VAR_C_DSJ34CR1DJ22DJ44CR1INVPCSATH = (AnBx_Params) s.decrypt((SealedObject) VAR_C_R1.getValue(2),(SecretKey) s.verify((SignedObject) new AnBx_Params((AnBx_Params) s.decrypt((Crypto_SealedPair) VAR_C_R1.getValue(3))).getValue(1),aliases.get("ROLE_ath")));
			eqCheck("1.2",aliases.get("ROLE_gw"),(String) VAR_C_DSJ34CR1DJ22DJ44CR1INVPCSATH.getValue(0));
			eqCheck("1.3",N1,(Crypto_ByteArray) VAR_C_DSJ34CR1DJ22DJ44CR1INVPCSATH.getValue(3));
			eqCheck("1.4",tag,(Crypto_ByteArray) new AnBx_Params((AnBx_Params) s.decrypt((Crypto_SealedPair) VAR_C_R1.getValue(3))).getValue(0));

			break;
		
		case STEP_2:
			
			N2 = s.getNonce();
			VAR_C_J24CDSJ34CR1DJ22DJ44CR1INVPCSATH = (SecretKey) VAR_C_DSJ34CR1DJ22DJ44CR1INVPCSATH.getValue(1);
			s.Send(new AnBx_Params(aliases.get("ROLE_s"),N2,(SealedObject) VAR_C_R1.getValue(1),s.encrypt(new AnBx_Params(aliases.get("ROLE_C"),(Crypto_ByteArray) VAR_C_DSJ34CR1DJ22DJ44CR1INVPCSATH.getValue(2)),VAR_C_J24CDSJ34CR1DJ22DJ44CR1INVPCSATH)));

			break;
		
		case STEP_3:
			
			VAR_C_R3 = (AnBx_Params) s.Receive();
			eqCheck("3.1",aliases.get("ROLE_C"),(String) VAR_C_R3.getValue(0));
			VAR_C_DSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH = (AnBx_Params) s.decrypt((SealedObject) VAR_C_R3.getValue(2),VAR_C_J24CDSJ34CR1DJ22DJ44CR1INVPCSATH);
			eqCheck("3.2",aliases.get("ROLE_s"),(String) VAR_C_DSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH.getValue(0));
			eqCheck("3.3",N2,(Crypto_ByteArray) VAR_C_DSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH.getValue(3));

			break;
		
		case STEP_4:
			
			VAR_C_HJ34CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH = s.makeDigest((Crypto_ByteArray) VAR_C_DSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH.getValue(2));
			VAR_C_J24CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH = (SecretKey) VAR_C_DSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH.getValue(1);
			s.Send(new AnBx_Params((SealedObject) VAR_C_R3.getValue(1),s.encrypt(new AnBx_Params(aliases.get("ROLE_C"),VAR_C_HJ34CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH),VAR_C_J24CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH)));

			break;
		
		case STEP_5:
			
			VAR_C_R5 = (AnBx_Params) s.Receive();
			eqCheck("5.1",tag,(Crypto_ByteArray) new AnBx_Params((AnBx_Params) s.decrypt((SealedObject) VAR_C_R5.getValue(1),VAR_C_J24CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH)).getValue(0));
			eqCheck("5.2",VAR_C_HJ34CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH,(Crypto_ByteArray) s.decrypt((SealedObject) VAR_C_R5.getValue(0),VAR_C_J24CDSJ33CR3CJ24CDSJ34CR1DJ22DJ44CR1INVPCSATH));

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	

	
	

}