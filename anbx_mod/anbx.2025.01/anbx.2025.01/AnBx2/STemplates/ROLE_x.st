/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler $if(showverdatetime)$$version$ on $datetime$ $endif$-->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package $package$;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class $prot$_$role$ extends AnB_Protocol<$prot$_Steps,$prot$_Roles> {

//	private static boolean loop = false;
	private static long $sessionID$ = 0;

	// local knowledge - constants
	$fieldsstatic:{n|private static $n.typeof$ $n.name$ = $n.pars$;
	}$
	// local vars
	$fields:{n|private $n.typeof$ $n.name$ = null;
	}$

	private static Map<Long, Map<Protocol_Steps, Object>> sessionHistory = new HashMap<>();  // Message history by sessionID
	
	public $prot$_$role$($prot$_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if ($sessionID$ < Long.MAX_VALUE) {
			$sessionID$++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail($abortonfail$);
        // init shared vars
        $fieldsinit:{n| $n.shname$ = ($n.shtype$) AnB_Session.readObject(sharepath+\"$n.shfilename$$serExt$\");
		}$};

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		$prot$_$role$.sessions = sessions;
		
		$channelroles:{n|AnB_Session $n.chname$ = lbs.get(\"$n.chname$\");
        }$
		init();
		
        $if(activatechannels)$$channels:{n|$n$.Open();
		}$$endif$  
		do {
			AnBx_Debug.out(layer, "Session started: " + $sessionID$ + "/" + sessions);

			try {

                    $channelsteps:{n|executeStep($n.channel$, $prot$_Steps.$n.step$);
					}$
                    AnBx_Debug.out(layer, "Session completed: " + $sessionID$ + "/" + sessions);
                    $sessionID$++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,$sessionID$);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,$sessionID$);
			} catch (Exception e) {
				abort("Generic error",e,$sessionID$);
			}
		} while ((sessionID <= sessions && $sessionID$ < Long.MAX_VALUE) || sessions < 0);
        $if(activatechannels)$$channels:{n|$n$.Close();
		}$$endif$
	};

	protected void executeStep(AnB_Session $sessname$, $prot$_Steps step) {

		status(step);

		switch (step) {
		$stepactions:{n|
		case $n.astep$:
			
			$n.action$
			break;
		}$
		default:
			
            break;		
		}

		status(step);

	}

	$rolemethods:{n|private $n.rettype$ $n.mname$($n.mpars$) {
		return $prot$_Functions.$n.mname$($n.mparsnames$);
	\}
	
	}$

	
	$extrasteps:{n|void $n.ename$(AnB_Session $sessname$) {
		
$n.eaction$
	\}

	}$

}
