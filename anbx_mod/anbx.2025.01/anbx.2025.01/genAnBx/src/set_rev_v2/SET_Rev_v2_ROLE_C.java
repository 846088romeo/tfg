/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-02-04 11:59:20.5954876 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package set_rev_v2;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class SET_Rev_v2_ROLE_C extends AnB_Protocol<SET_Rev_v2_Steps,SET_Rev_v2_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	private static Crypto_ByteArray empty = new Crypto_ByteArray("empty".getBytes());
	
	// local vars
	private Crypto_ByteArray OrderDesc = null;
	private Crypto_ByteArray PurchAmt = null;
	private Crypto_ByteArray PanCa = null;
	private Crypto_ByteArray NxLIDM = null;
	private SecretKey Hx5apanCa = null;
	private SecretKey Hx5MOrderDesc = null;
	private SignedObject VAR_C_R1 = null;
	private AnBx_Params VAR_C_DCR1SM = null;
	private Crypto_SealedPair VAR_C_EHX5APANCAHKA = null;
	private Crypto_SealedPair VAR_C_EHX5MORDERDESCHKM = null;
	private Crypto_ByteArray VAR_C_J33CDCR1SM = null;
	private Crypto_ByteArray VAR_C_MORDERDESCHX5MORDERDESC = null;
	private Crypto_ByteArray VAR_C_MPANCAHX5APANCA = null;
	private Crypto_ByteArray VAR_C_R3 = null;
	private SignedObject VAR_C_R9 = null;
	private AnBx_Params VAR_C_DCR9SA = null;
	
	
	public SET_Rev_v2_ROLE_C(SET_Rev_v2_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
         PanCa = (Crypto_ByteArray) AnB_Session.readObject(sharepath+"pan_"+aliases.get("ROLE_C")+"_"+aliases.get("ROLE_a")+".ser");
		 PurchAmt = (Crypto_ByteArray) AnB_Session.readObject(sharepath+"PurchAmt.ser");
		 OrderDesc = (Crypto_ByteArray) AnB_Session.readObject(sharepath+"OrderDesc.ser");
		};

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		SET_Rev_v2_ROLE_C.sessions = sessions;
		
		AnB_Session ROLE_C_channel_ROLE_M_Client_Insecure = lbs.get("ROLE_C_channel_ROLE_M_Client_Insecure");
        
		init();
		
        ROLE_C_channel_ROLE_M_Client_Insecure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_C_channel_ROLE_M_Client_Insecure, SET_Rev_v2_Steps.STEP_0);
					executeStep(ROLE_C_channel_ROLE_M_Client_Insecure, SET_Rev_v2_Steps.STEP_1);
					executeStep(ROLE_C_channel_ROLE_M_Client_Insecure, SET_Rev_v2_Steps.STEP_2);
					executeStep(ROLE_C_channel_ROLE_M_Client_Insecure, SET_Rev_v2_Steps.STEP_3);
					executeStep(ROLE_C_channel_ROLE_M_Client_Insecure, SET_Rev_v2_Steps.STEP_4);
					executeStep(ROLE_C_channel_ROLE_M_Client_Insecure, SET_Rev_v2_Steps.STEP_9);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_C_channel_ROLE_M_Client_Insecure.Close();
		
	};

	protected void executeStep(AnB_Session s, SET_Rev_v2_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_0:
			
			// 	C -> M, (-|-|M): NxLIDM
			
			NxLIDM = s.getNonce();
			s.Send(s.encrypt(NxLIDM,aliases.get("ROLE_M")));

			break;
		
		case STEP_1:
			
			// 	M -> C, @(M|C|-): NxXID
			VAR_C_R1 = (SignedObject) s.Receive();
			VAR_C_DCR1SM = (AnBx_Params) s.verify(VAR_C_R1,aliases.get("ROLE_M"));
			seen("1.0",(Crypto_ByteArray) VAR_C_DCR1SM.getValue(1));
			eqCheck("1.1",aliases.get("ROLE_C"),(String) VAR_C_DCR1SM.getValue(0));

			break;
		
		case STEP_2:
			
			// 	C -> M, (-|-|M): NxLIDM,NxXID,[OrderDesc:M],[pan(C,a):a]
			Hx5apanCa = s.getHmacKey();
			Hx5MOrderDesc = s.getHmacKey();
			
			
			VAR_C_EHX5APANCAHKA = s.encrypt(Hx5apanCa,s.getPublicKey(aliases.get("ROLE_a"),Crypto_KeyStoreType.hk()));
			VAR_C_EHX5MORDERDESCHKM = s.encrypt(Hx5MOrderDesc,s.getPublicKey(aliases.get("ROLE_M"),Crypto_KeyStoreType.hk()));
			VAR_C_J33CDCR1SM = (Crypto_ByteArray) VAR_C_DCR1SM.getValue(2);
			VAR_C_MORDERDESCHX5MORDERDESC = s.makeHmac(OrderDesc,(SecretKey) Hx5MOrderDesc);
			VAR_C_MPANCAHX5APANCA = s.makeHmac(PanCa,(SecretKey) Hx5apanCa);
			s.Send(s.encrypt(new AnBx_Params(NxLIDM,VAR_C_J33CDCR1SM,VAR_C_MORDERDESCHX5MORDERDESC,VAR_C_EHX5MORDERDESCHKM,VAR_C_MPANCAHX5APANCA,VAR_C_EHX5APANCAHKA),aliases.get("ROLE_M")));

			break;
		
		case STEP_3:
			
			VAR_C_R3 = (Crypto_ByteArray) s.Receive();
			eqCheck("3.1",empty,VAR_C_R3);

			break;
		
		case STEP_4:
			
			// 	C -> M, (-|-|a): NxLIDM,NxXID,[OrderDesc:M],[pan(C,a):a],PurchAmt,pan(C,a)
			s.Send(s.encrypt(new AnBx_Params(NxLIDM,VAR_C_J33CDCR1SM,VAR_C_MORDERDESCHX5MORDERDESC,VAR_C_EHX5MORDERDESCHKM,VAR_C_MPANCAHX5APANCA,VAR_C_EHX5APANCAHKA,PurchAmt,PanCa),aliases.get("ROLE_a")));

			break;
		
		case STEP_9:
			
			// 	M -> C, ^@(a|M,C|-): NxLIDM,NxXID,[OrderDesc:M],[pan(C,a):a],NxAuthCode
			VAR_C_R9 = (SignedObject) s.Receive();
			VAR_C_DCR9SA = (AnBx_Params) s.verify(VAR_C_R9,aliases.get("ROLE_a"));
			seen("9.0",(Crypto_ByteArray) VAR_C_DCR9SA.getValue(7));
			eqCheck("9.1",aliases.get("ROLE_C"),(String) VAR_C_DCR9SA.getValue(9));
			eqCheck("9.2",aliases.get("ROLE_M"),(String) VAR_C_DCR9SA.getValue(8));
			eqCheck("9.3",NxLIDM,(Crypto_ByteArray) VAR_C_DCR9SA.getValue(0));
			eqCheck("9.4",VAR_C_J33CDCR1SM,(Crypto_ByteArray) VAR_C_DCR9SA.getValue(1));
			eqCheck("9.5",VAR_C_MORDERDESCHX5MORDERDESC,(Crypto_ByteArray) VAR_C_DCR9SA.getValue(2));
			eqCheck("9.6",VAR_C_MPANCAHX5APANCA,(Crypto_ByteArray) VAR_C_DCR9SA.getValue(4));

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	

	
	

}