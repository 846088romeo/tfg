
/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-02-04 11:59:05.5318374 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package kerberos_pkinit;

import anbxj.AnBx_CommandLine_Parser;
import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.Channel_Settings;

import java.util.HashMap;
import java.util.Map;

public final class Kerberos_PKINIT_CommandLine_Parser extends AnBx_CommandLine_Parser<Kerberos_PKINIT_Roles,Kerberos_PKINIT_Channels> {

	public Kerberos_PKINIT_CommandLine_Parser(String[] args, String prot) {
		super(args, prot, prot, Kerberos_PKINIT_Roles.class, true);
		// AnBx_Debug.setAPPLICATION(true);
		// AnBx_Debug.setPROTOCOL(true);
		// AnBx_Debug.setSESSION(true);
		// AnBx_Debug.setLANGUAGE(true);
		// AnBx_Debug.setENCRYPTION(true);
		// AnBx_Debug.setBUSINESS_LOGIC(true);
		// AnBx_Debug.setALL(true);
    		initProtocol();
	}

	protected void initProtocol() {

		Map<String, Channel_Settings> cs = new HashMap<String, Channel_Settings>();
		Map<String, String> aliases = new HashMap<String, String>();
		Kerberos_PKINIT_Principal Kerberos_PKINIT_pr = null;
        if (role == null) terminate("no or incorrect role specified");
		AnBx_Debug.setAppname(role.toString());
		initRole(ct, role, cs, aliases, Kerberos_PKINIT_Roles.class, Kerberos_PKINIT_Channels.class);
		AnBx_Debug.out(layer, "myRole: " + role);
        AnBx_Debug.out(layer, "sessions: " + sessions);

		if (myAlias != null && keypath != null && sharepath != null) {
			Kerberos_PKINIT_pr = new Kerberos_PKINIT_Principal(myAlias, keypath, cs, aliases, crypto_config);
			switch (role) {
			case ROLE_C:
				Kerberos_PKINIT_pr.run(new Kerberos_PKINIT_ROLE_C(role, protname, sharepath),sessions);
				break;
			case ROLE_ath:
				Kerberos_PKINIT_pr.run(new Kerberos_PKINIT_ROLE_ath(role, protname, sharepath),sessions);
				break;
			case ROLE_gw:
				Kerberos_PKINIT_pr.run(new Kerberos_PKINIT_ROLE_gw(role, protname, sharepath),sessions);
				break;
			case ROLE_s:
				Kerberos_PKINIT_pr.run(new Kerberos_PKINIT_ROLE_s(role, protname, sharepath),sessions);
				break;
			
            default:
				break;
			}
		} else terminate("Unable to initialize " + protname + " Principal");
	}
}