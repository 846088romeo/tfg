/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-02-04 11:59:25.3228784 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package tls_noclientauth;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class TLS_noClientAuth_ROLE_B extends AnB_Protocol<TLS_noClientAuth_Steps,TLS_noClientAuth_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	
	// local vars
	private Crypto_ByteArray NB = null;
	private Crypto_ByteArray PB = null;
	private AnBx_Params VAR_B_R0 = null;
	private String VAR_B_J14BR0 = null;
	private SignedObject VAR_B_EBPBINVSS = null;
	private Crypto_ByteArray VAR_B_J34BR0 = null;
	private AnBx_Params VAR_B_R2 = null;
	private Crypto_ByteArray VAR_B_DJ13BR2INVPB = null;
	private Crypto_ByteArray VAR_B_J24BR0 = null;
	private Crypto_ByteArray VAR_B_HPRFBDJ13BR2INVPBJ24BR0NBBJ14BR0BJ24BR0NBBJ34BR0J44BR0PBBDJ13BR2INVPB = null;
	private Crypto_ByteArray VAR_B_PRFBDJ13BR2INVPBJ24BR0NB = null;
	
	
	public TLS_noClientAuth_ROLE_B(TLS_noClientAuth_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
        };

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		TLS_noClientAuth_ROLE_B.sessions = sessions;
		
		AnB_Session ROLE_B_channel_ROLE_A_Server_Authentic = lbs.get("ROLE_B_channel_ROLE_A_Server_Authentic");
        AnB_Session ROLE_B_channel_ROLE_A_Client_Insecure = lbs.get("ROLE_B_channel_ROLE_A_Client_Insecure");
        
		init();
		
        ROLE_B_channel_ROLE_A_Server_Authentic.Open();
		ROLE_B_channel_ROLE_A_Client_Insecure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_B_channel_ROLE_A_Server_Authentic, TLS_noClientAuth_Steps.STEP_0);
					executeStep(ROLE_B_channel_ROLE_A_Client_Insecure, TLS_noClientAuth_Steps.STEP_1);
					executeStep(ROLE_B_channel_ROLE_A_Client_Insecure, TLS_noClientAuth_Steps.STEP_2);
					executeStep(ROLE_B_channel_ROLE_A_Client_Insecure, TLS_noClientAuth_Steps.STEP_3);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_B_channel_ROLE_A_Server_Authentic.Close();
		ROLE_B_channel_ROLE_A_Client_Insecure.Close();
		
	};

	protected void executeStep(AnB_Session s, TLS_noClientAuth_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_0:
			
			VAR_B_R0 = (AnBx_Params) s.Receive();
			VAR_B_J14BR0 = (String) VAR_B_R0.getValue(0);
			wffCheck("0.1",VAR_B_J14BR0);
			VAR_B_EBPBINVSS = s.sign(new AnBx_Params(aliases.get("ROLE_B"),s.getPublicKey(aliases.get("ROLE_B"),Crypto_KeyStoreType.pk())));

			break;
		
		case STEP_1:
			
			NB = s.getNonce();
			PB = s.getNonce();
			VAR_B_J34BR0 = (Crypto_ByteArray) VAR_B_R0.getValue(2);
			s.Send(new AnBx_Params(NB,VAR_B_J34BR0,PB,VAR_B_EBPBINVSS));

			break;
		
		case STEP_2:
			
			VAR_B_R2 = (AnBx_Params) s.Receive();
			VAR_B_DJ13BR2INVPB = (Crypto_ByteArray) s.decrypt((Crypto_SealedPair) VAR_B_R2.getValue(0));
			eqCheck("2.1",(Crypto_ByteArray) VAR_B_R2.getValue(1),s.makeDigest(new AnBx_Params(NB,aliases.get("ROLE_B"),VAR_B_DJ13BR2INVPB)));
			VAR_B_J24BR0 = (Crypto_ByteArray) VAR_B_R0.getValue(1);
			VAR_B_HPRFBDJ13BR2INVPBJ24BR0NBBJ14BR0BJ24BR0NBBJ34BR0J44BR0PBBDJ13BR2INVPB = s.makeDigest(new AnBx_Params(prf(s,VAR_B_DJ13BR2INVPB,VAR_B_J24BR0,NB),VAR_B_J14BR0,aliases.get("ROLE_B"),VAR_B_J24BR0,NB,VAR_B_J34BR0,(Crypto_ByteArray) VAR_B_R0.getValue(3),PB,VAR_B_DJ13BR2INVPB));
			VAR_B_PRFBDJ13BR2INVPBJ24BR0NB = prf(s,VAR_B_DJ13BR2INVPB,VAR_B_J24BR0,NB);
			eqCheck("2.2",(Crypto_ByteArray) s.decrypt((SealedObject) VAR_B_R2.getValue(2),clientK(s,VAR_B_J24BR0,NB,VAR_B_PRFBDJ13BR2INVPBJ24BR0NB)),VAR_B_HPRFBDJ13BR2INVPBJ24BR0NBBJ14BR0BJ24BR0NBBJ34BR0J44BR0PBBDJ13BR2INVPB);

			break;
		
		case STEP_3:
			
			
			s.Send(s.encrypt(VAR_B_HPRFBDJ13BR2INVPBJ24BR0NBBJ14BR0BJ24BR0NBBJ34BR0J44BR0PBBDJ13BR2INVPB,serverK(s,VAR_B_J24BR0,NB,VAR_B_PRFBDJ13BR2INVPBJ24BR0NB)));

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	private SecretKey clientK(AnB_Session s,Crypto_ByteArray par1,Crypto_ByteArray par2,Crypto_ByteArray par3) {
		return TLS_noClientAuth_Functions.clientK(s,par1,par2,par3);
	}
	
	private SecretKey serverK(AnB_Session s,Crypto_ByteArray par1,Crypto_ByteArray par2,Crypto_ByteArray par3) {
		return TLS_noClientAuth_Functions.serverK(s,par1,par2,par3);
	}
	
	private Crypto_ByteArray prf(AnB_Session s,Crypto_ByteArray par1,Crypto_ByteArray par2,Crypto_ByteArray par3) {
		return TLS_noClientAuth_Functions.prf(s,par1,par2,par3);
	}
	
	

	
	

}