(* Protocol: ShareAgreeCertified *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Private channel declaration *)
free ch_priv_B_A: channel [private].

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun SecretKey2bitstring(SecretKey): bitstring [data,typeConverter].
reduc forall x: SecretKey; bitstring2SecretKey(SecretKey2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_1_2_BytByt_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_2_2_BytByt_Crypto_ByteArray((x1,x2)) = x2.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun prova(Agent,Agent): Crypto_ByteArray.

fun shk(Agent,Agent): SecretKey [private].

(* Secret Goal Testing Functions *)
fun fun_goal_INVSB_B(PrivateKey): SecretKey.
fun fun_goal_INVHKB_B(PrivateKey): SecretKey.
fun fun_goal_INVPB_B(PrivateKey): SecretKey.
fun fun_goal_INVSA_A(PrivateKey): SecretKey.
fun fun_goal_INVHKA_A(PrivateKey): SecretKey.
fun fun_goal_INVPA_A(PrivateKey): SecretKey.
fun fun_goal_PRICEDESC_AB(Crypto_ByteArray,Crypto_ByteArray): SecretKey.

(* Variable agents *)
free A: Agent.
free B: Agent.

(* Constants *)
const empty: Crypto_ByteArray.

(* Goal queries *)
free InvskINVSB_B: PrivateKey [private].query attacker(InvskINVSB_B).
free InvhkINVHKB_B: PrivateKey [private].query attacker(InvhkINVHKB_B).
free InvpkINVPB_B: PrivateKey [private].query attacker(InvpkINVPB_B).
free InvskINVSA_A: PrivateKey [private].query attacker(InvskINVSA_A).
free InvhkINVHKA_A: PrivateKey [private].query attacker(InvhkINVHKA_A).
free InvpkINVPA_A: PrivateKey [private].query attacker(InvpkINVPA_A).
free SHKAB_AB: SecretKey [private].query attacker(SHKAB_AB).
free PRICEDESC_AB: bitstring [private].query attacker(PRICEDESC_AB).

(* Process reachability queries *)
event end(Agent).
query event(end(A)).
query event(end(B)).

(* Process B *)
let process_B(A: Agent,B: Agent,InvpkB: PrivateKey,InvskB: PrivateKey,InvhkB: PrivateKey,honestA: Agent) =
in(ch_priv_B_A,VAR_B_R0: bitstring) [precise];
let VAR_B_J22BR0: Crypto_ByteArray = proj_2_2_BytByt_Crypto_ByteArray(VAR_B_R0) in 
if VAR_B_J22BR0 = VAR_B_J22BR0 then
out(ch_priv_B_A,empty);
in(ch,VAR_B_R2: SealedObject);
let VAR_B_SHKAB: SecretKey = shk(A,B) in 
if proj_1_2_BytByt_Crypto_ByteArray(VAR_B_R0) = bitstring2Crypto_ByteArray(decS(VAR_B_R2,VAR_B_SHKAB)) then
out(ch,encS(Crypto_ByteArray2bitstring(VAR_B_J22BR0),VAR_B_SHKAB));
in(ch,VAR_B_R4: bitstring);
if empty = proj_1_2_BytByt_Crypto_ByteArray(VAR_B_R4) then
out(ch,prova(A,B));
out(ch,encS(PrivateKey2bitstring(InvskINVSB_B),fun_goal_INVSB_B(InvskB)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKB_B),fun_goal_INVHKB_B(InvhkB)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPB_B),fun_goal_INVPB_B(InvpkB)));
(if A = honestA then out(ch,encS(SecretKey2bitstring(SHKAB_AB),VAR_B_SHKAB))) |
(if A = honestA then out(ch,encS(PRICEDESC_AB,fun_goal_PRICEDESC_AB(proj_1_2_BytByt_Crypto_ByteArray(VAR_B_R0),VAR_B_J22BR0)))) |
event end(B);
0.

(* Process A *)
let process_A(A: Agent,B: Agent,InvpkA: PrivateKey,InvskA: PrivateKey,InvhkA: PrivateKey,honestB: Agent) =
new Price: Crypto_ByteArray;
new Desc: Crypto_ByteArray;
out(ch_priv_B_A,(Price,Desc));
in(ch_priv_B_A,VAR_A_R1: Crypto_ByteArray) [precise];
if empty = VAR_A_R1 then
let VAR_A_SHKAB: SecretKey = shk(A,B) in 
out(ch,encS(Crypto_ByteArray2bitstring(Price),VAR_A_SHKAB));
in(ch,VAR_A_R3: SealedObject);
if Desc = bitstring2Crypto_ByteArray(decS(VAR_A_R3,VAR_A_SHKAB)) then
new Msg: Crypto_ByteArray;
out(ch,(empty,Msg));
in(ch,VAR_A_R5: Crypto_ByteArray);
if VAR_A_R5 = VAR_A_R5 then
out(ch,encS(PrivateKey2bitstring(InvskINVSA_A),fun_goal_INVSA_A(InvskA)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKA_A),fun_goal_INVHKA_A(InvhkA)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPA_A),fun_goal_INVPA_A(InvpkA)));
(if B = honestB then out(ch,encS(SecretKey2bitstring(SHKAB_AB),VAR_A_SHKAB))) |
(if B = honestB then out(ch,encS(PRICEDESC_AB,fun_goal_PRICEDESC_AB(Price,Desc)))) |
event end(A);
0.

(* Process ShareAgreeCertified *)
let process_ShareAgreeCertified(A: Agent,B: Agent) =
(!in(ch,XA: Agent);
process_B(XA,B,priv_pk(B),priv_sk(B),priv_hk(B),A)) |
(!in(ch,XB: Agent);
process_A(A,XB,priv_pk(A),priv_sk(A),priv_hk(A),B)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,shk(X,B));
out(ch,shk(A,X))
) | (
out(ch,A);
out(ch,B);
out(ch,pk(priv_pk(A)));
out(ch,pk(priv_pk(B)));
out(ch,sk(priv_sk(A)));
out(ch,sk(priv_sk(B)));
out(ch,hk(priv_hk(A)));
out(ch,hk(priv_hk(B)));
process_ShareAgreeCertified(A,B) | process_ShareAgreeCertified(B,A))