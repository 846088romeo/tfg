(* Protocol: AnBx_From_A_secret_for_B_C_honest *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun SignedObject2bitstring(SignedObject): bitstring [data,typeConverter].
reduc forall x: SignedObject; bitstring2SignedObject(SignedObject2bitstring(x)) = x.
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray; proj_1_3_AgeAgeByt_Agent((x1,x2,x3)) = x1.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray; proj_2_3_AgeAgeByt_Agent((x1,x2,x3)) = x2.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray; proj_3_3_AgeAgeByt_Crypto_ByteArray((x1,x2,x3)) = x3.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Secret Goal Testing Functions *)
fun fun_goal_INVSC_c(PrivateKey): SecretKey.
fun fun_goal_INVHKC_c(PrivateKey): SecretKey.
fun fun_goal_INVPC_c(PrivateKey): SecretKey.
fun fun_goal_INVSB_B(PrivateKey): SecretKey.
fun fun_goal_INVHKB_B(PrivateKey): SecretKey.
fun fun_goal_INVPB_B(PrivateKey): SecretKey.
fun fun_goal_INVSA_A(PrivateKey): SecretKey.
fun fun_goal_INVHKA_A(PrivateKey): SecretKey.
fun fun_goal_INVPA_A(PrivateKey): SecretKey.
fun fun_goal_MSG_ABc(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free A: Agent.
free B: Agent.

(* Constants *)
const empty: Crypto_ByteArray.
const c: Agent.

(* Secrecy assumptions *)
not attacker(new Invpkc).
not attacker(new Invhkc).
not attacker(new Invskc).

(* Goal queries *)
free InvskINVSC_c: PrivateKey [private].query attacker(InvskINVSC_c).
free InvhkINVHKC_c: PrivateKey [private].query attacker(InvhkINVHKC_c).
free InvpkINVPC_c: PrivateKey [private].query attacker(InvpkINVPC_c).
free InvskINVSB_B: PrivateKey [private].query attacker(InvskINVSB_B).
free InvhkINVHKB_B: PrivateKey [private].query attacker(InvhkINVHKB_B).
free InvpkINVPB_B: PrivateKey [private].query attacker(InvpkINVPB_B).
free InvskINVSA_A: PrivateKey [private].query attacker(InvskINVSA_A).
free InvhkINVHKA_A: PrivateKey [private].query attacker(InvhkINVHKA_A).
free InvpkINVPA_A: PrivateKey [private].query attacker(InvpkINVPA_A).
free MSG_ABc: Crypto_ByteArray [private].query attacker(MSG_ABc).
event witness_wauth_MSG_BA(Crypto_ByteArray,Agent,Agent).
event witness_wauth_MSG_cA(Crypto_ByteArray,Agent,Agent).
event wrequest_wauth_MSG_cA(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; event(wrequest_wauth_MSG_cA(m,a1,a2)) ==> event(witness_wauth_MSG_cA(m,a1,a2)).
event wrequest_wauth_MSG_BA(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; event(wrequest_wauth_MSG_BA(m,a1,a2)) ==> event(witness_wauth_MSG_BA(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(A)).
query event(end(B)).
query event(end(c)).

(* Process c *)
let process_c(A: Agent,B: Agent,skA: PublicKey,Invpkc: PrivateKey,Invskc: PrivateKey,Invhkc: PrivateKey,honestA: Agent,honestB: Agent) =
(* 	A -> B, (A|B,c|B): Msg *)
(* 	B -> c, ^(A|B,c|c): Msg *)
in(ch,VAR_C_R1: SealedPair);
let VAR_C_DDCR1INVPCSA: bitstring = verify_sk(bitstring2SignedObject(dec_pk(VAR_C_R1,Invpkc)),skA) in 
if B = proj_1_3_AgeAgeByt_Agent(VAR_C_DDCR1INVPCSA) then
if c = proj_2_3_AgeAgeByt_Agent(VAR_C_DDCR1INVPCSA) then
out(ch,encS(PrivateKey2bitstring(InvskINVSC_c),fun_goal_INVSC_c(Invskc)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKC_c),fun_goal_INVHKC_c(Invhkc)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPC_c),fun_goal_INVPC_c(Invpkc)));
(if A = honestA then event wrequest_wauth_MSG_cA(proj_3_3_AgeAgeByt_Crypto_ByteArray(VAR_C_DDCR1INVPCSA),c,A)) |
(if A = honestA && B = honestB then out(ch,encS(Crypto_ByteArray2bitstring(MSG_ABc),fun_goal_MSG_ABc(proj_3_3_AgeAgeByt_Crypto_ByteArray(VAR_C_DDCR1INVPCSA))))) |
event end(c);
0.

(* Process B *)
let process_B(A: Agent,B: Agent,pkc: PublicKey,skA: PublicKey,InvpkB: PrivateKey,InvskB: PrivateKey,InvhkB: PrivateKey,honestA: Agent) =
(* 	A -> B, (A|B,c|B): Msg *)
in(ch,VAR_B_R0: SealedPair);
let VAR_B_DDBR0INVPBSA: bitstring = verify_sk(bitstring2SignedObject(dec_pk(VAR_B_R0,InvpkB)),skA) in 
if B = proj_1_3_AgeAgeByt_Agent(VAR_B_DDBR0INVPBSA) then
if c = proj_2_3_AgeAgeByt_Agent(VAR_B_DDBR0INVPBSA) then
(* 	B -> c, ^(A|B,c|c): Msg *)
out(ch,enc_pk(SignedObject2bitstring(bitstring2SignedObject(dec_pk(VAR_B_R0,InvpkB))),pkc));
out(ch,encS(PrivateKey2bitstring(InvskINVSB_B),fun_goal_INVSB_B(InvskB)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKB_B),fun_goal_INVHKB_B(InvhkB)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPB_B),fun_goal_INVPB_B(InvpkB)));
(if A = honestA then event wrequest_wauth_MSG_BA(proj_3_3_AgeAgeByt_Crypto_ByteArray(VAR_B_DDBR0INVPBSA),B,A)) |
(if A = honestA then out(ch,encS(Crypto_ByteArray2bitstring(MSG_ABc),fun_goal_MSG_ABc(proj_3_3_AgeAgeByt_Crypto_ByteArray(VAR_B_DDBR0INVPBSA))))) |
event end(B);
0.

(* Process A *)
let process_A(A: Agent,B: Agent,pkB: PublicKey,InvpkA: PrivateKey,InvskA: PrivateKey,InvhkA: PrivateKey,honestB: Agent) =
(* 	A -> B, (A|B,c|B): Msg *)
new Msg: Crypto_ByteArray;
event witness_wauth_MSG_BA(Msg,B,A);
event witness_wauth_MSG_cA(Msg,c,A);
out(ch,enc_pk(SignedObject2bitstring(sign_sk((B,c,Msg),InvskA)),pkB));
(* 	B -> c, ^(A|B,c|c): Msg *)
out(ch,encS(PrivateKey2bitstring(InvskINVSA_A),fun_goal_INVSA_A(InvskA)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKA_A),fun_goal_INVHKA_A(InvhkA)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPA_A),fun_goal_INVPA_A(InvpkA)));
(if B = honestB then out(ch,encS(Crypto_ByteArray2bitstring(MSG_ABc),fun_goal_MSG_ABc(Msg)))) |
event end(A);
0.

(* Process AnBx_From_A_secret_for_B_C_honest *)
let process_AnBx_From_A_secret_for_B_C_honest(A: Agent,B: Agent,pkc: PublicKey,Invpkc: PrivateKey,Invskc: PrivateKey,Invhkc: PrivateKey) =
(!in(ch,XA: Agent);
in(ch,XB: Agent);
process_c(XA,XB,sk(priv_sk(XA)),Invpkc,Invskc,Invhkc,A,B)) |
(!in(ch,XA: Agent);
process_B(XA,B,pkc,sk(priv_sk(XA)),priv_pk(B),priv_sk(B),priv_hk(B),A)) |
(!in(ch,XB: Agent);
process_A(A,XB,pk(priv_pk(XB)),priv_pk(A),priv_sk(A),priv_hk(A),B)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X))
) | (
out(ch,A);
out(ch,B);
out(ch,pk(priv_pk(A)));
out(ch,pk(priv_pk(B)));
out(ch,sk(priv_sk(A)));
out(ch,sk(priv_sk(B)));
out(ch,hk(priv_hk(A)));
out(ch,hk(priv_hk(B)));
new Invpkc: PrivateKey;
new Invskc: PrivateKey;
new Invhkc: PrivateKey;
let pkc = pk(Invpkc) in out(ch,pkc);
let hkc = hk(Invhkc) in out(ch,hkc);
let skc = sk(Invskc) in out(ch,skc);
process_AnBx_From_A_secret_for_B_C_honest(A,B,pkc,Invpkc,Invskc,Invhkc) | process_AnBx_From_A_secret_for_B_C_honest(B,A,pkc,Invpkc,Invskc,Invhkc))