(* Protocol: Basic_Kerberos *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray; proj_1_3_AgeAgeByt_Agent((x1,x2,x3)) = x1.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray; proj_2_3_AgeAgeByt_Agent((x1,x2,x3)) = x2.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray; proj_3_3_AgeAgeByt_Crypto_ByteArray((x1,x2,x3)) = x3.
reduc forall x1:SealedObject,x2:SealedObject; proj_1_2_SeaSea_SealedObject((x1,x2)) = x1.
reduc forall x1:SealedObject,x2:SealedObject; proj_2_2_SeaSea_SealedObject((x1,x2)) = x2.
reduc forall x1:SecretKey,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Agent; proj_1_4_SecBytBytAge_SecretKey((x1,x2,x3,x4)) = x1.
reduc forall x1:SecretKey,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Agent; proj_2_4_SecBytBytAge_Crypto_ByteArray((x1,x2,x3,x4)) = x2.
reduc forall x1:SecretKey,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Agent; proj_3_4_SecBytBytAge_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:SecretKey,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Agent; proj_4_4_SecBytBytAge_Agent((x1,x2,x3,x4)) = x4.
reduc forall x1:SealedObject,x2:SealedObject,x3:Agent,x4:Crypto_ByteArray; proj_1_4_SeaSeaAgeByt_SealedObject((x1,x2,x3,x4)) = x1.
reduc forall x1:SealedObject,x2:SealedObject,x3:Agent,x4:Crypto_ByteArray; proj_2_4_SeaSeaAgeByt_SealedObject((x1,x2,x3,x4)) = x2.
reduc forall x1:SealedObject,x2:SealedObject,x3:Agent,x4:Crypto_ByteArray; proj_3_4_SeaSeaAgeByt_Agent((x1,x2,x3,x4)) = x3.
reduc forall x1:SealedObject,x2:SealedObject,x3:Agent,x4:Crypto_ByteArray; proj_4_4_SeaSeaAgeByt_Crypto_ByteArray((x1,x2,x3,x4)) = x4.
reduc forall x1:SecretKey,x2:Agent,x3:Crypto_ByteArray; proj_1_3_SecAgeByt_SecretKey((x1,x2,x3)) = x1.
reduc forall x1:SecretKey,x2:Agent,x3:Crypto_ByteArray; proj_2_3_SecAgeByt_Agent((x1,x2,x3)) = x2.
reduc forall x1:SecretKey,x2:Agent,x3:Crypto_ByteArray; proj_3_3_SecAgeByt_Crypto_ByteArray((x1,x2,x3)) = x3.
reduc forall x1:Agent,x2:Crypto_ByteArray; proj_1_2_AgeByt_Agent((x1,x2)) = x1.
reduc forall x1:Agent,x2:Crypto_ByteArray; proj_2_2_AgeByt_Crypto_ByteArray((x1,x2)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_1_2_BytByt_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_2_2_BytByt_Crypto_ByteArray((x1,x2)) = x2.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun shk(Agent,Agent): SecretKey [private].

(* Secret Goal Testing Functions *)
fun fun_goal_chgoal_Confidential_PAYLOAD_sC(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free C: Agent.

(* Constants *)
const tag: Crypto_ByteArray.
const ath: Agent.
const gw: Agent.
const s: Agent.

(* Secrecy assumptions *)
not attacker(new Invpkath).
not attacker(new Invpkgw).
not attacker(new Invpks).
not attacker(new Invhkath).
not attacker(new Invhkgw).
not attacker(new Invhks).
not attacker(new Invskath).
not attacker(new Invskgw).
not attacker(new Invsks).

(* Goal queries *)
free chgoal_Confidential_PAYLOAD_sC: Crypto_ByteArray [private].query attacker(chgoal_Confidential_PAYLOAD_sC).
event witness_chgoal_FreshSecure_PAYLOAD_Cs(Crypto_ByteArray,Agent,Agent).
event request_chgoal_FreshSecure_PAYLOAD_Cs(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_chgoal_FreshSecure_PAYLOAD_Cs(m,a1,a2)) ==> inj-event(witness_chgoal_FreshSecure_PAYLOAD_Cs(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(C)).
query event(end(ath)).
query event(end(gw)).
query event(end(s)).

(* Process s *)
let process_s(C: Agent,honestC: Agent) =
in(ch,VAR_S_R4: bitstring);
let VAR_S_DSJ12SR4SHKGWS: bitstring = decS(proj_1_2_SeaSea_SealedObject(VAR_S_R4),shk(gw,s)) in 
let VAR_S_DSJ22SR4J13DSJ12SR4SHKGWS: bitstring = decS(proj_2_2_SeaSea_SealedObject(VAR_S_R4),proj_1_3_SecAgeByt_SecretKey(VAR_S_DSJ12SR4SHKGWS)) in 
if proj_2_3_SecAgeByt_Agent(VAR_S_DSJ12SR4SHKGWS) = proj_1_2_AgeByt_Agent(VAR_S_DSJ22SR4J13DSJ12SR4SHKGWS) then
new Payload: Crypto_ByteArray;
event witness_chgoal_FreshSecure_PAYLOAD_Cs(Payload,proj_2_3_SecAgeByt_Agent(VAR_S_DSJ12SR4SHKGWS),s);
out(ch,(encS(Crypto_ByteArray2bitstring(proj_2_2_AgeByt_Crypto_ByteArray(VAR_S_DSJ22SR4J13DSJ12SR4SHKGWS)),proj_1_3_SecAgeByt_SecretKey(VAR_S_DSJ12SR4SHKGWS)),encS((tag,Payload),proj_1_3_SecAgeByt_SecretKey(VAR_S_DSJ12SR4SHKGWS))));
(if proj_2_3_SecAgeByt_Agent(VAR_S_DSJ12SR4SHKGWS) = honestC then out(ch,encS(Crypto_ByteArray2bitstring(chgoal_Confidential_PAYLOAD_sC),fun_goal_chgoal_Confidential_PAYLOAD_sC(Payload)))) |
event end(s);
0.

(* Process gw *)
let process_gw(honestC: Agent) =
in(ch,VAR_GW_R2: bitstring);
if s = proj_3_4_SeaSeaAgeByt_Agent(VAR_GW_R2) then
let VAR_GW_DSJ14GWR2SHKATHGW: bitstring = decS(proj_1_4_SeaSeaAgeByt_SealedObject(VAR_GW_R2),shk(ath,gw)) in 
let VAR_GW_DSJ24GWR2J13DSJ14GWR2SHKATHGW: bitstring = decS(proj_2_4_SeaSeaAgeByt_SealedObject(VAR_GW_R2),proj_1_3_SecAgeByt_SecretKey(VAR_GW_DSJ14GWR2SHKATHGW)) in 
let VAR_GW_J23DSJ14GWR2SHKATHGW: Agent = proj_2_3_SecAgeByt_Agent(decS(proj_1_4_SeaSeaAgeByt_SealedObject(VAR_GW_R2),shk(ath,gw))) in 
if VAR_GW_J23DSJ14GWR2SHKATHGW = proj_1_2_AgeByt_Agent(VAR_GW_DSJ24GWR2J13DSJ14GWR2SHKATHGW) then
if proj_3_3_SecAgeByt_Crypto_ByteArray(VAR_GW_DSJ14GWR2SHKATHGW) = proj_2_2_AgeByt_Crypto_ByteArray(VAR_GW_DSJ24GWR2J13DSJ14GWR2SHKATHGW) then
new T2: Crypto_ByteArray;
new KCS: SecretKey;
out(ch,(encS((KCS,VAR_GW_J23DSJ14GWR2SHKATHGW,T2),shk(gw,s)),encS((KCS,proj_4_4_SeaSeaAgeByt_Crypto_ByteArray(VAR_GW_R2),T2,s),proj_1_3_SecAgeByt_SecretKey(VAR_GW_DSJ14GWR2SHKATHGW))));
event end(gw);
0.

(* Process ath *)
let process_ath(C: Agent,honestC: Agent) =
in(ch,VAR_ATH_R0: bitstring);
if C = proj_1_3_AgeAgeByt_Agent(VAR_ATH_R0) then
if gw = proj_2_3_AgeAgeByt_Agent(VAR_ATH_R0) then
new T1: Crypto_ByteArray;
new KCG: SecretKey;
out(ch,(encS((KCG,C,T1),shk(ath,gw)),encS((KCG,proj_3_3_AgeAgeByt_Crypto_ByteArray(VAR_ATH_R0),T1,gw),shk(C,ath))));
event end(ath);
0.

(* Process C *)
let process_C(C: Agent) =
new N1: Crypto_ByteArray;
out(ch,(C,gw,N1));
in(ch,VAR_C_R1: bitstring);
let VAR_C_DSJ22CR1SHKCATH: bitstring = decS(proj_2_2_SeaSea_SealedObject(VAR_C_R1),shk(C,ath)) in 
if gw = proj_4_4_SecBytBytAge_Agent(VAR_C_DSJ22CR1SHKCATH) then
if N1 = proj_2_4_SecBytBytAge_Crypto_ByteArray(VAR_C_DSJ22CR1SHKCATH) then
new N2: Crypto_ByteArray;
let VAR_C_J14CDSJ22CR1SHKCATH: SecretKey = proj_1_4_SecBytBytAge_SecretKey(VAR_C_DSJ22CR1SHKCATH) in 
out(ch,(proj_1_2_SeaSea_SealedObject(VAR_C_R1),encS((C,proj_3_4_SecBytBytAge_Crypto_ByteArray(VAR_C_DSJ22CR1SHKCATH)),VAR_C_J14CDSJ22CR1SHKCATH),s,N2));
in(ch,VAR_C_R3: bitstring);
let VAR_C_DSJ22CR3CJ14CDSJ22CR1SHKCATH: bitstring = decS(proj_2_2_SeaSea_SealedObject(VAR_C_R3),VAR_C_J14CDSJ22CR1SHKCATH) in 
if s = proj_4_4_SecBytBytAge_Agent(VAR_C_DSJ22CR3CJ14CDSJ22CR1SHKCATH) then
if N2 = proj_2_4_SecBytBytAge_Crypto_ByteArray(VAR_C_DSJ22CR3CJ14CDSJ22CR1SHKCATH) then
new T3: Crypto_ByteArray;
let VAR_C_J14CDSJ22CR3CJ14CDSJ22CR1SHKCATH: SecretKey = proj_1_4_SecBytBytAge_SecretKey(VAR_C_DSJ22CR3CJ14CDSJ22CR1SHKCATH) in 
out(ch,(proj_1_2_SeaSea_SealedObject(VAR_C_R3),encS((C,T3),VAR_C_J14CDSJ22CR3CJ14CDSJ22CR1SHKCATH)));
in(ch,VAR_C_R5: bitstring);
if T3 = bitstring2Crypto_ByteArray(decS(proj_1_2_SeaSea_SealedObject(VAR_C_R5),VAR_C_J14CDSJ22CR3CJ14CDSJ22CR1SHKCATH)) then
if tag = proj_1_2_BytByt_Crypto_ByteArray(decS(proj_2_2_SeaSea_SealedObject(VAR_C_R5),VAR_C_J14CDSJ22CR3CJ14CDSJ22CR1SHKCATH)) then
event request_chgoal_FreshSecure_PAYLOAD_Cs(proj_2_2_BytByt_Crypto_ByteArray(decS(proj_2_2_SeaSea_SealedObject(VAR_C_R5),VAR_C_J14CDSJ22CR3CJ14CDSJ22CR1SHKCATH)),C,s);
event end(C);
0.

(* Process Basic_Kerberos *)
let process_Basic_Kerberos(C: Agent) =
(!in(ch,XC: Agent);
process_s(XC,C)) |
(!in(ch,XC: Agent);
process_gw(C)) |
(!in(ch,XC: Agent);
process_ath(XC,C)) |
(!process_C(C)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,shk(X,ath))
) | (
out(ch,C);
new Invpkath: PrivateKey;
new Invpkgw: PrivateKey;
new Invpks: PrivateKey;
new Invhkath: PrivateKey;
new Invhkgw: PrivateKey;
new Invhks: PrivateKey;
new Invskath: PrivateKey;
new Invskgw: PrivateKey;
new Invsks: PrivateKey;
let pkath = pk(Invpkath) in out(ch,pkath);
let pkgw = pk(Invpkgw) in out(ch,pkgw);
let pks = pk(Invpks) in out(ch,pks);
let hkath = hk(Invhkath) in out(ch,hkath);
let hkgw = hk(Invhkgw) in out(ch,hkgw);
let hks = hk(Invhks) in out(ch,hks);
let skath = sk(Invskath) in out(ch,skath);
let skgw = sk(Invskgw) in out(ch,skgw);
let sks = sk(Invsks) in out(ch,sks);
process_Basic_Kerberos(C))