(* Protocol: H530fix *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray; proj_1_4_AgeAgePubByt_Agent((x1,x2,x3,x4)) = x1.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray; proj_2_4_AgeAgePubByt_Agent((x1,x2,x3,x4)) = x2.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray; proj_3_4_AgeAgePubByt_PublicKey((x1,x2,x3,x4)) = x3.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray; proj_4_4_AgeAgePubByt_Crypto_ByteArray((x1,x2,x3,x4)) = x4.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Agent,x6:PublicKey,x7:PublicKey,x8:Crypto_ByteArray; proj_1_8_AgeAgePubBytAgePubPubByt_Agent((x1,x2,x3,x4,x5,x6,x7,x8)) = x1.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Agent,x6:PublicKey,x7:PublicKey,x8:Crypto_ByteArray; proj_2_8_AgeAgePubBytAgePubPubByt_Agent((x1,x2,x3,x4,x5,x6,x7,x8)) = x2.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Agent,x6:PublicKey,x7:PublicKey,x8:Crypto_ByteArray; proj_3_8_AgeAgePubBytAgePubPubByt_PublicKey((x1,x2,x3,x4,x5,x6,x7,x8)) = x3.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Agent,x6:PublicKey,x7:PublicKey,x8:Crypto_ByteArray; proj_4_8_AgeAgePubBytAgePubPubByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8)) = x4.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Agent,x6:PublicKey,x7:PublicKey,x8:Crypto_ByteArray; proj_5_8_AgeAgePubBytAgePubPubByt_Agent((x1,x2,x3,x4,x5,x6,x7,x8)) = x5.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Agent,x6:PublicKey,x7:PublicKey,x8:Crypto_ByteArray; proj_6_8_AgeAgePubBytAgePubPubByt_PublicKey((x1,x2,x3,x4,x5,x6,x7,x8)) = x6.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Agent,x6:PublicKey,x7:PublicKey,x8:Crypto_ByteArray; proj_7_8_AgeAgePubBytAgePubPubByt_PublicKey((x1,x2,x3,x4,x5,x6,x7,x8)) = x7.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Agent,x6:PublicKey,x7:PublicKey,x8:Crypto_ByteArray; proj_8_8_AgeAgePubBytAgePubPubByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8)) = x8.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_1_5_AgeAgePubBytByt_Agent((x1,x2,x3,x4,x5)) = x1.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_2_5_AgeAgePubBytByt_Agent((x1,x2,x3,x4,x5)) = x2.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_3_5_AgeAgePubBytByt_PublicKey((x1,x2,x3,x4,x5)) = x3.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_4_5_AgeAgePubBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x4.
reduc forall x1:Agent,x2:Agent,x3:PublicKey,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_5_5_AgeAgePubBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x5.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun shk(Agent,Agent): SecretKey [private].

(* Secret Goal Testing Functions *)
fun fun_goal_chgoal_Confidential_M_AB(Crypto_ByteArray): SecretKey.
fun fun_goal_M_AB(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free A: Agent.
free B: Agent.

(* Constants *)
const t1: Crypto_ByteArray.
const t2: Crypto_ByteArray.
const t3: Crypto_ByteArray.
const t4: Crypto_ByteArray.
const t5: Crypto_ByteArray.
const empty: Crypto_ByteArray.
const s: Agent.

(* Secrecy assumptions *)
not attacker(new Invpks).
not attacker(new Invhks).
not attacker(new Invsks).

(* Goal queries *)
free chgoal_Confidential_M_AB: Crypto_ByteArray [private].query attacker(chgoal_Confidential_M_AB).
free M_AB: Crypto_ByteArray [private].query attacker(M_AB).
event witness_chgoal_FreshSecure_M_BA(Crypto_ByteArray,Agent,Agent).
event witness_auth_M_BA(Crypto_ByteArray,Agent,Agent).
event request_chgoal_FreshSecure_M_BA(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_chgoal_FreshSecure_M_BA(m,a1,a2)) ==> inj-event(witness_chgoal_FreshSecure_M_BA(m,a1,a2)).
event request_auth_M_BA(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_auth_M_BA(m,a1,a2)) ==> inj-event(witness_auth_M_BA(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(A)).
query event(end(B)).
query event(end(s)).

(* Process s *)
let process_s(A: Agent,B: Agent,honestA: Agent,honestB: Agent) =
in(ch,VAR_S_R1: bitstring);
if A = proj_1_8_AgeAgePubBytAgePubPubByt_Agent(VAR_S_R1) then
if B = proj_2_8_AgeAgePubBytAgePubPubByt_Agent(VAR_S_R1) then
if B = proj_5_8_AgeAgePubBytAgePubPubByt_Agent(VAR_S_R1) then
let VAR_S_J38SR1: PublicKey = proj_3_8_AgeAgePubBytAgePubPubByt_PublicKey(VAR_S_R1) in 
let VAR_S_J48SR1: Crypto_ByteArray = proj_4_8_AgeAgePubBytAgePubPubByt_Crypto_ByteArray(VAR_S_R1) in 
let VAR_S_SHKAS: SecretKey = shk(A,s) in 
if VAR_S_J48SR1 = hash((VAR_S_SHKAS,t1,A,B,VAR_S_J38SR1)) then
let VAR_S_J68SR1: PublicKey = proj_6_8_AgeAgePubBytAgePubPubByt_PublicKey(VAR_S_R1) in 
if VAR_S_J68SR1 = VAR_S_J38SR1 then
let VAR_S_J78SR1: PublicKey = proj_7_8_AgeAgePubBytAgePubPubByt_PublicKey(VAR_S_R1) in 
let VAR_S_SHKBS: SecretKey = shk(B,s) in 
if proj_8_8_AgeAgePubBytAgePubPubByt_Crypto_ByteArray(VAR_S_R1) = hash((VAR_S_SHKBS,t2,A,B,VAR_S_J68SR1,VAR_S_J48SR1,B,VAR_S_J68SR1,VAR_S_J78SR1)) then
let VAR_S_HSSHKAST3BSJ68SR1SJ78SR1: Crypto_ByteArray = hash((VAR_S_SHKAS,t3,B,VAR_S_J68SR1,VAR_S_J78SR1)) in 
out(ch,(B,A,VAR_S_J68SR1,VAR_S_HSSHKAST3BSJ68SR1SJ78SR1,hash((VAR_S_SHKBS,t4,B,A,VAR_S_J68SR1,VAR_S_HSSHKAST3BSJ68SR1SJ78SR1))));
event end(s);
0.

(* Process B *)
let process_B(A: Agent,B: Agent,honestA: Agent) =
in(ch,VAR_B_R0: bitstring);
if A = proj_1_4_AgeAgePubByt_Agent(VAR_B_R0) then
if B = proj_2_4_AgeAgePubByt_Agent(VAR_B_R0) then
new YxY: DHSecret;
let VAR_B_J34BR0: PublicKey = proj_3_4_AgeAgePubByt_PublicKey(VAR_B_R0) in 
let VAR_B_J44BR0: Crypto_ByteArray = proj_4_4_AgeAgePubByt_Crypto_ByteArray(VAR_B_R0) in 
let VAR_B_SHKBS: SecretKey = shk(B,s) in 
out(ch,(A,B,VAR_B_J34BR0,VAR_B_J44BR0,B,VAR_B_J34BR0,kap(g,YxY),hash((VAR_B_SHKBS,t2,A,B,VAR_B_J34BR0,VAR_B_J44BR0,B,VAR_B_J34BR0,kap(g,YxY)))));
in(ch,VAR_B_R2: bitstring);
if A = proj_2_5_AgeAgePubBytByt_Agent(VAR_B_R2) then
if B = proj_1_5_AgeAgePubBytByt_Agent(VAR_B_R2) then
if proj_3_5_AgeAgePubBytByt_PublicKey(VAR_B_R2) = VAR_B_J34BR0 then
let VAR_B_J45BR2: Crypto_ByteArray = proj_4_5_AgeAgePubBytByt_Crypto_ByteArray(VAR_B_R2) in 
if proj_5_5_AgeAgePubBytByt_Crypto_ByteArray(VAR_B_R2) = hash((VAR_B_SHKBS,t4,B,A,VAR_B_J34BR0,VAR_B_J45BR2)) then
out(ch,(B,A,kap(g,YxY),VAR_B_J45BR2,hash((kas(proj_3_5_AgeAgePubBytByt_PublicKey(VAR_B_R2),YxY),t5,B,A,kap(g,YxY),VAR_B_J45BR2))));
in(ch,VAR_B_R4: SealedObject);
if VAR_B_J44BR0 = VAR_B_J44BR0 then
if bitstring2Crypto_ByteArray(decS(VAR_B_R4,kas(proj_3_5_AgeAgePubBytByt_PublicKey(VAR_B_R2),YxY))) = bitstring2Crypto_ByteArray(decS(VAR_B_R4,kas(proj_3_5_AgeAgePubBytByt_PublicKey(VAR_B_R2),YxY))) then
(if A = honestA then event request_chgoal_FreshSecure_M_BA(bitstring2Crypto_ByteArray(decS(VAR_B_R4,kas(proj_3_5_AgeAgePubBytByt_PublicKey(VAR_B_R2),YxY))),B,A)) |
(if A = honestA then event request_auth_M_BA(bitstring2Crypto_ByteArray(decS(VAR_B_R4,kas(proj_3_5_AgeAgePubBytByt_PublicKey(VAR_B_R2),YxY))),B,A)) |
(if A = honestA then out(ch,encS(Crypto_ByteArray2bitstring(M_AB),fun_goal_M_AB(bitstring2Crypto_ByteArray(decS(VAR_B_R4,kas(proj_3_5_AgeAgePubBytByt_PublicKey(VAR_B_R2),YxY))))))) |
event end(B);
0.

(* Process A *)
let process_A(A: Agent,B: Agent,honestB: Agent) =
new M: Crypto_ByteArray;
event witness_chgoal_FreshSecure_M_BA(M,B,A);
event witness_auth_M_BA(M,B,A);
new XxX: DHSecret;
let VAR_A_SHKAS: SecretKey = shk(A,s) in 
out(ch,(A,B,kap(g,XxX),hash((VAR_A_SHKAS,t1,A,B,kap(g,XxX)))));
in(ch,VAR_A_R3: bitstring);
if A = proj_2_5_AgeAgePubBytByt_Agent(VAR_A_R3) then
if B = proj_1_5_AgeAgePubBytByt_Agent(VAR_A_R3) then
if proj_4_5_AgeAgePubBytByt_Crypto_ByteArray(VAR_A_R3) = hash((VAR_A_SHKAS,t3,B,kap(g,XxX),proj_3_5_AgeAgePubBytByt_PublicKey(VAR_A_R3))) then
out(ch,encS(Crypto_ByteArray2bitstring(M),kas(proj_3_5_AgeAgePubBytByt_PublicKey(VAR_A_R3),XxX)));
(if B = honestB then out(ch,encS(Crypto_ByteArray2bitstring(chgoal_Confidential_M_AB),fun_goal_chgoal_Confidential_M_AB(M)))) |
(if B = honestB then out(ch,encS(Crypto_ByteArray2bitstring(M_AB),fun_goal_M_AB(M)))) |
event end(A);
0.

(* Process H530fix *)
let process_H530fix(A: Agent,B: Agent) =
(!in(ch,XA: Agent);
in(ch,XB: Agent);
process_s(XA,XB,A,B)) |
(!in(ch,XA: Agent);
process_B(XA,B,A)) |
(!in(ch,XB: Agent);
process_A(A,XB,B)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,shk(X,s))
) | (
out(ch,A);
out(ch,B);
new Invpks: PrivateKey;
new Invhks: PrivateKey;
new Invsks: PrivateKey;
let pks = pk(Invpks) in out(ch,pks);
let hks = hk(Invhks) in out(ch,hks);
let sks = sk(Invsks) in out(ch,sks);
process_H530fix(A,B) | process_H530fix(B,A))