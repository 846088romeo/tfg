(* Protocol: AnBx_BlindForwarding *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun SignedObject2bitstring(SignedObject): bitstring [data,typeConverter].
reduc forall x: SignedObject; bitstring2SignedObject(SignedObject2bitstring(x)) = x.
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Agent,x2:Crypto_ByteArray; proj_1_2_AgeByt_Agent((x1,x2)) = x1.
reduc forall x1:Agent,x2:Crypto_ByteArray; proj_2_2_AgeByt_Crypto_ByteArray((x1,x2)) = x2.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun ccn(Agent,Agent): Crypto_ByteArray [private].

(* Secret Goal Testing Functions *)
fun fun_goal_INVSA_A(PrivateKey): SecretKey.
fun fun_goal_INVHKA_A(PrivateKey): SecretKey.
fun fun_goal_INVPA_A(PrivateKey): SecretKey.
fun fun_goal_INVSM_M(PrivateKey): SecretKey.
fun fun_goal_INVHKM_M(PrivateKey): SecretKey.
fun fun_goal_INVPM_M(PrivateKey): SecretKey.
fun fun_goal_INVSC_C(PrivateKey): SecretKey.
fun fun_goal_INVHKC_C(PrivateKey): SecretKey.
fun fun_goal_INVPC_C(PrivateKey): SecretKey.
fun fun_goal_CCNCA_CA(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free C: Agent.
free M: Agent.
free A: Agent.

(* Constants *)
const empty: Crypto_ByteArray.

(* Goal queries *)
free InvskINVSA_A: PrivateKey [private].query attacker(InvskINVSA_A).
free InvhkINVHKA_A: PrivateKey [private].query attacker(InvhkINVHKA_A).
free InvpkINVPA_A: PrivateKey [private].query attacker(InvpkINVPA_A).
free InvskINVSM_M: PrivateKey [private].query attacker(InvskINVSM_M).
free InvhkINVHKM_M: PrivateKey [private].query attacker(InvhkINVHKM_M).
free InvpkINVPM_M: PrivateKey [private].query attacker(InvpkINVPM_M).
free InvskINVSC_C: PrivateKey [private].query attacker(InvskINVSC_C).
free InvhkINVHKC_C: PrivateKey [private].query attacker(InvhkINVHKC_C).
free InvpkINVPC_C: PrivateKey [private].query attacker(InvpkINVPC_C).
free CCNCA_CA: Crypto_ByteArray [private].query attacker(CCNCA_CA).
event witness_wauth_CCNCA_AC(Crypto_ByteArray,Agent,Agent).
event wrequest_wauth_CCNCA_AC(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; event(wrequest_wauth_CCNCA_AC(m,a1,a2)) ==> event(witness_wauth_CCNCA_AC(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(C)).
query event(end(M)).
query event(end(A)).

(* Process M *)
let process_M(A: Agent,C: Agent,M: Agent,InvpkM: PrivateKey,InvskM: PrivateKey,InvhkM: PrivateKey,honestC: Agent,honestA: Agent) =
(* 	C -> M, (C|A|A): ccn(C,A) *)
in(ch,VAR_M_R0: SealedPair);
if VAR_M_R0 = VAR_M_R0 then
(* 	M -> A, ^(C|A|A): ccn(C,A) *)
out(ch,VAR_M_R0);
out(ch,encS(PrivateKey2bitstring(InvskINVSM_M),fun_goal_INVSM_M(InvskM)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKM_M),fun_goal_INVHKM_M(InvhkM)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPM_M),fun_goal_INVPM_M(InvpkM)));
event end(M);
0.

(* Process C *)
let process_C(A: Agent,C: Agent,M: Agent,pkA: PublicKey,InvpkC: PrivateKey,InvskC: PrivateKey,InvhkC: PrivateKey,honestM: Agent,honestA: Agent) =
(* 	C -> M, (C|A|A): ccn(C,A) *)
event witness_wauth_CCNCA_AC(ccn(C,A),A,C);
out(ch,enc_pk(SignedObject2bitstring(sign_sk((A,ccn(C,A)),InvskC)),pkA));
(* 	M -> A, ^(C|A|A): ccn(C,A) *)
out(ch,encS(PrivateKey2bitstring(InvskINVSC_C),fun_goal_INVSC_C(InvskC)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKC_C),fun_goal_INVHKC_C(InvhkC)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPC_C),fun_goal_INVPC_C(InvpkC)));
(if A = honestA then out(ch,encS(Crypto_ByteArray2bitstring(CCNCA_CA),fun_goal_CCNCA_CA(ccn(C,A))))) |
event end(C);
0.

(* Process A *)
let process_A(A: Agent,C: Agent,M: Agent,skC: PublicKey,InvpkA: PrivateKey,InvskA: PrivateKey,InvhkA: PrivateKey,honestC: Agent,honestM: Agent) =
(* 	C -> M, (C|A|A): ccn(C,A) *)
(* 	M -> A, ^(C|A|A): ccn(C,A) *)
in(ch,VAR_A_R1: SealedPair);
let VAR_A_DDAR1INVPASC: bitstring = verify_sk(bitstring2SignedObject(dec_pk(VAR_A_R1,InvpkA)),skC) in 
if proj_2_2_AgeByt_Crypto_ByteArray(VAR_A_DDAR1INVPASC) = proj_2_2_AgeByt_Crypto_ByteArray(VAR_A_DDAR1INVPASC) then
if VAR_A_DDAR1INVPASC = (A,ccn(C,A)) then
out(ch,encS(PrivateKey2bitstring(InvskINVSA_A),fun_goal_INVSA_A(InvskA)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKA_A),fun_goal_INVHKA_A(InvhkA)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPA_A),fun_goal_INVPA_A(InvpkA)));
(if C = honestC then event wrequest_wauth_CCNCA_AC(ccn(C,A),A,C)) |
(if C = honestC then out(ch,encS(Crypto_ByteArray2bitstring(CCNCA_CA),fun_goal_CCNCA_CA(ccn(C,A))))) |
event end(A);
0.

(* Process AnBx_BlindForwarding *)
let process_AnBx_BlindForwarding(A: Agent,C: Agent,M: Agent) =
(!in(ch,XC: Agent);
in(ch,XA: Agent);
process_M(XA,XC,M,priv_pk(M),priv_sk(M),priv_hk(M),C,A)) |
(!in(ch,XM: Agent);
in(ch,XA: Agent);
process_C(XA,C,XM,pk(priv_pk(XA)),priv_pk(C),priv_sk(C),priv_hk(C),M,A)) |
(!in(ch,XC: Agent);
in(ch,XM: Agent);
process_A(A,XC,XM,sk(priv_sk(XC)),priv_pk(A),priv_sk(A),priv_hk(A),C,M)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,ccn(X,A));
out(ch,ccn(C,X))
) | (
out(ch,C);
out(ch,M);
out(ch,A);
out(ch,pk(priv_pk(A)));
out(ch,pk(priv_pk(C)));
out(ch,pk(priv_pk(M)));
out(ch,sk(priv_sk(A)));
out(ch,sk(priv_sk(C)));
out(ch,sk(priv_sk(M)));
out(ch,hk(priv_hk(A)));
out(ch,hk(priv_hk(C)));
out(ch,hk(priv_hk(M)));
process_AnBx_BlindForwarding(C,M,A) | process_AnBx_BlindForwarding(C,A,M) | process_AnBx_BlindForwarding(M,C,A) | process_AnBx_BlindForwarding(M,A,C) | process_AnBx_BlindForwarding(A,C,M) | process_AnBx_BlindForwarding(A,M,C))