(* Protocol: IKEv2DS *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun SecretKey2bitstring(SecretKey): bitstring [data,typeConverter].
reduc forall x: SecretKey; bitstring2SecretKey(SecretKey2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:PublicKey,x5:Crypto_ByteArray; proj_1_5_AgeAgeBytPubByt_Agent((x1,x2,x3,x4,x5)) = x1.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:PublicKey,x5:Crypto_ByteArray; proj_2_5_AgeAgeBytPubByt_Agent((x1,x2,x3,x4,x5)) = x2.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:PublicKey,x5:Crypto_ByteArray; proj_3_5_AgeAgeBytPubByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x3.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:PublicKey,x5:Crypto_ByteArray; proj_4_5_AgeAgeBytPubByt_PublicKey((x1,x2,x3,x4,x5)) = x4.
reduc forall x1:Agent,x2:Agent,x3:Crypto_ByteArray,x4:PublicKey,x5:Crypto_ByteArray; proj_5_5_AgeAgeBytPubByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x5.
reduc forall x1:Crypto_ByteArray,x2:PublicKey,x3:Crypto_ByteArray; proj_1_3_BytPubByt_Crypto_ByteArray((x1,x2,x3)) = x1.
reduc forall x1:Crypto_ByteArray,x2:PublicKey,x3:Crypto_ByteArray; proj_2_3_BytPubByt_PublicKey((x1,x2,x3)) = x2.
reduc forall x1:Crypto_ByteArray,x2:PublicKey,x3:Crypto_ByteArray; proj_3_3_BytPubByt_Crypto_ByteArray((x1,x2,x3)) = x3.
reduc forall x1:Agent,x2:SignedObject,x3:Crypto_ByteArray; proj_1_3_AgeSigByt_Agent((x1,x2,x3)) = x1.
reduc forall x1:Agent,x2:SignedObject,x3:Crypto_ByteArray; proj_2_3_AgeSigByt_SignedObject((x1,x2,x3)) = x2.
reduc forall x1:Agent,x2:SignedObject,x3:Crypto_ByteArray; proj_3_3_AgeSigByt_Crypto_ByteArray((x1,x2,x3)) = x3.
reduc forall x1:Crypto_ByteArray,x2:PublicKey,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_1_4_BytPubBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x1.
reduc forall x1:Crypto_ByteArray,x2:PublicKey,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_2_4_BytPubBytByt_PublicKey((x1,x2,x3,x4)) = x2.
reduc forall x1:Crypto_ByteArray,x2:PublicKey,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_3_4_BytPubBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:Crypto_ByteArray,x2:PublicKey,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_4_4_BytPubBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x4.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun h(Crypto_ByteArray,Crypto_ByteArray,Crypto_ByteArray,SecretKey): SecretKey.

(* Secret Goal Testing Functions *)
fun fun_goal_INVSB_B(PrivateKey): SecretKey.
fun fun_goal_INVSA_A(PrivateKey): SecretKey.
fun fun_goal_chgoal_Confidential_M1_AB(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free A: Agent.
free B: Agent.

(* Goal queries *)
free InvskINVSB_B: PrivateKey [private].query attacker(InvskINVSB_B).
free InvskINVSA_A: PrivateKey [private].query attacker(InvskINVSA_A).
free chgoal_Confidential_M1_AB: Crypto_ByteArray [private].query attacker(chgoal_Confidential_M1_AB).
free KASAPGXXKEAYXKEB_AB: SecretKey [private].query attacker(KASAPGXXKEAYXKEB_AB).
event witness_chgoal_FreshSecure_M1_BA(Crypto_ByteArray,Agent,Agent).
event witness_auth_KASAPGXXKEAYXKEB_AB(SecretKey,Agent,Agent).
event witness_auth_KASAPGXXKEAYXKEB_BA(SecretKey,Agent,Agent).
event request_chgoal_FreshSecure_M1_BA(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_chgoal_FreshSecure_M1_BA(m,a1,a2)) ==> inj-event(witness_chgoal_FreshSecure_M1_BA(m,a1,a2)).
event request_auth_KASAPGXXKEAYXKEB_AB(SecretKey,Agent,Agent).
query m: SecretKey, a1: Agent, a2: Agent; inj-event(request_auth_KASAPGXXKEAYXKEB_AB(m,a1,a2)) ==> inj-event(witness_auth_KASAPGXXKEAYXKEB_AB(m,a1,a2)).
event request_auth_KASAPGXXKEAYXKEB_BA(SecretKey,Agent,Agent).
query m: SecretKey, a1: Agent, a2: Agent; inj-event(request_auth_KASAPGXXKEAYXKEB_BA(m,a1,a2)) ==> inj-event(witness_auth_KASAPGXXKEAYXKEB_BA(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(A)).
query event(end(B)).

(* Process B *)
let process_B(A: Agent,B: Agent,skA: PublicKey,InvskB: PrivateKey,honestA: Agent) =
if not (B = A) then
in(ch,VAR_B_R0: bitstring);
if B = proj_2_5_AgeAgeBytPubByt_Agent(VAR_B_R0) then
if skA = sk(priv_sk(proj_1_5_AgeAgeBytPubByt_Agent(VAR_B_R0))) then
new YxKEb: DHSecret;
event witness_auth_KASAPGXXKEAYXKEB_AB(kas(proj_4_5_AgeAgeBytPubByt_PublicKey(VAR_B_R0),YxKEb),A,B);
new Nb: Crypto_ByteArray;
let VAR_B_J35BR0: Crypto_ByteArray = proj_3_5_AgeAgeBytPubByt_Crypto_ByteArray(VAR_B_R0) in 
out(ch,(VAR_B_J35BR0,kap(g,YxKEb),Nb));
in(ch,VAR_B_R2: SealedObject);
let VAR_B_DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB: bitstring = decS(VAR_B_R2,h(proj_5_5_AgeAgeBytPubByt_Crypto_ByteArray(VAR_B_R0),Nb,VAR_B_J35BR0,kas(proj_4_5_AgeAgeBytPubByt_PublicKey(VAR_B_R0),YxKEb))) in 
let VAR_B_DJ23DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ13DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB: bitstring = verify_sk(proj_2_3_AgeSigByt_SignedObject(VAR_B_DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB),sk(priv_sk(proj_1_3_AgeSigByt_Agent(VAR_B_DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB)))) in 
if Nb = proj_4_4_BytPubBytByt_Crypto_ByteArray(VAR_B_DJ23DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ13DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB) then
if proj_1_5_AgeAgeBytPubByt_Agent(VAR_B_R0) = proj_1_3_AgeSigByt_Agent(VAR_B_DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB) then
let VAR_B_J14BDJ23DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ13DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB: Crypto_ByteArray = proj_1_4_BytPubBytByt_Crypto_ByteArray(VAR_B_DJ23DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ13DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB) in 
if proj_3_3_AgeSigByt_Crypto_ByteArray(VAR_B_DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB) = VAR_B_J14BDJ23DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ13DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB then
if VAR_B_J35BR0 = VAR_B_J14BDJ23DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ13DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB then
let VAR_B_J45BR0: PublicKey = proj_4_5_AgeAgeBytPubByt_PublicKey(VAR_B_R0) in 
if VAR_B_J45BR0 = proj_2_4_BytPubBytByt_PublicKey(VAR_B_DJ23DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ13DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB) then
let VAR_B_J55BR0: Crypto_ByteArray = proj_5_5_AgeAgeBytPubByt_Crypto_ByteArray(VAR_B_R0) in 
if VAR_B_J55BR0 = proj_3_4_BytPubBytByt_Crypto_ByteArray(VAR_B_DJ23DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ13DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB) then
out(ch,encS((B,sign_sk((VAR_B_J35BR0,kap(g,YxKEb),VAR_B_J55BR0,Nb),InvskB),VAR_B_J35BR0),h(VAR_B_J55BR0,Nb,VAR_B_J35BR0,kas(VAR_B_J45BR0,YxKEb))));
in(ch,VAR_B_R4: SealedObject);
if bitstring2Crypto_ByteArray(decS(VAR_B_R4,kas(VAR_B_J45BR0,YxKEb))) = bitstring2Crypto_ByteArray(decS(VAR_B_R4,kas(VAR_B_J45BR0,YxKEb))) then
let VAR_B_DJ23BDSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ15BR0: bitstring = verify_sk(proj_2_3_AgeSigByt_SignedObject(VAR_B_DSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEB),sk(priv_sk(proj_1_5_AgeAgeBytPubByt_Agent(VAR_B_R0)))) in 
if Nb = proj_4_4_BytPubBytByt_Crypto_ByteArray(VAR_B_DJ23BDSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ15BR0) then
if VAR_B_J35BR0 = proj_1_4_BytPubBytByt_Crypto_ByteArray(VAR_B_DJ23BDSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ15BR0) then
if VAR_B_J45BR0 = proj_2_4_BytPubBytByt_PublicKey(VAR_B_DJ23BDSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ15BR0) then
if VAR_B_J55BR0 = proj_3_4_BytPubBytByt_Crypto_ByteArray(VAR_B_DJ23BDSBR2HJ55BR0NBBJ35BR0KASJ45BR0YXKEBSJ15BR0) then
out(ch,encS(PrivateKey2bitstring(InvskINVSB_B),fun_goal_INVSB_B(InvskB)));
(if proj_1_5_AgeAgeBytPubByt_Agent(VAR_B_R0) = honestA then event request_chgoal_FreshSecure_M1_BA(bitstring2Crypto_ByteArray(decS(VAR_B_R4,kas(VAR_B_J45BR0,YxKEb))),B,proj_1_5_AgeAgeBytPubByt_Agent(VAR_B_R0))) |
(if proj_1_5_AgeAgeBytPubByt_Agent(VAR_B_R0) = honestA then event request_auth_KASAPGXXKEAYXKEB_BA(kas(VAR_B_J45BR0,YxKEb),B,proj_1_5_AgeAgeBytPubByt_Agent(VAR_B_R0))) |
(if A = honestA then out(ch,encS(SecretKey2bitstring(KASAPGXXKEAYXKEB_AB),kas(VAR_B_J45BR0,YxKEb)))) |
event end(B);
0.

(* Process A *)
let process_A(A: Agent,B: Agent,skB: PublicKey,InvskA: PrivateKey,honestB: Agent) =
if not (A = B) then
new M1: Crypto_ByteArray;
event witness_chgoal_FreshSecure_M1_BA(M1,B,A);
new SA: Crypto_ByteArray;
new Na: Crypto_ByteArray;
new XxKEa: DHSecret;
out(ch,(A,B,SA,kap(g,XxKEa),Na));
in(ch,VAR_A_R1: bitstring);
if SA = proj_1_3_BytPubByt_Crypto_ByteArray(VAR_A_R1) then
event witness_auth_KASAPGXXKEAYXKEB_BA(kas(proj_2_3_BytPubByt_PublicKey(VAR_A_R1),XxKEa),B,A);
let VAR_A_J33AR1: Crypto_ByteArray = proj_3_3_BytPubByt_Crypto_ByteArray(VAR_A_R1) in 
let VAR_A_HNAJ33AR1SAKASJ23AR1XXKEA: SecretKey = h(Na,VAR_A_J33AR1,SA,kas(proj_2_3_BytPubByt_PublicKey(VAR_A_R1),XxKEa)) in 
out(ch,encS((A,sign_sk((SA,kap(g,XxKEa),Na,VAR_A_J33AR1),InvskA),SA),VAR_A_HNAJ33AR1SAKASJ23AR1XXKEA));
in(ch,VAR_A_R3: SealedObject);
let VAR_A_DSAR3AHNAJ33AR1SAKASJ23AR1XXKEA: bitstring = decS(VAR_A_R3,VAR_A_HNAJ33AR1SAKASJ23AR1XXKEA) in 
if B = proj_1_3_AgeSigByt_Agent(VAR_A_DSAR3AHNAJ33AR1SAKASJ23AR1XXKEA) then
let VAR_A_DJ23ADSAR3AHNAJ33AR1SAKASJ23AR1XXKEASB: bitstring = verify_sk(proj_2_3_AgeSigByt_SignedObject(VAR_A_DSAR3AHNAJ33AR1SAKASJ23AR1XXKEA),skB) in 
if Na = proj_3_4_BytPubBytByt_Crypto_ByteArray(VAR_A_DJ23ADSAR3AHNAJ33AR1SAKASJ23AR1XXKEASB) then
if SA = proj_1_4_BytPubBytByt_Crypto_ByteArray(VAR_A_DJ23ADSAR3AHNAJ33AR1SAKASJ23AR1XXKEASB) then
if SA = proj_3_3_AgeSigByt_Crypto_ByteArray(VAR_A_DSAR3AHNAJ33AR1SAKASJ23AR1XXKEA) then
if proj_2_3_BytPubByt_PublicKey(VAR_A_R1) = proj_2_4_BytPubBytByt_PublicKey(VAR_A_DJ23ADSAR3AHNAJ33AR1SAKASJ23AR1XXKEASB) then
if VAR_A_J33AR1 = proj_4_4_BytPubBytByt_Crypto_ByteArray(VAR_A_DJ23ADSAR3AHNAJ33AR1SAKASJ23AR1XXKEASB) then
out(ch,encS(Crypto_ByteArray2bitstring(M1),kas(proj_2_3_BytPubByt_PublicKey(VAR_A_R1),XxKEa)));
out(ch,encS(PrivateKey2bitstring(InvskINVSA_A),fun_goal_INVSA_A(InvskA)));
(if B = honestB then event request_auth_KASAPGXXKEAYXKEB_AB(kas(proj_2_3_BytPubByt_PublicKey(VAR_A_R1),XxKEa),A,B)) |
(if B = honestB then out(ch,encS(Crypto_ByteArray2bitstring(chgoal_Confidential_M1_AB),fun_goal_chgoal_Confidential_M1_AB(M1)))) |
(if B = honestB then out(ch,encS(SecretKey2bitstring(KASAPGXXKEAYXKEB_AB),kas(proj_2_3_BytPubByt_PublicKey(VAR_A_R1),XxKEa)))) |
event end(A);
0.

(* Process IKEv2DS *)
let process_IKEv2DS(A: Agent,B: Agent) =
(!in(ch,XA: Agent);
process_B(XA,B,sk(priv_sk(XA)),priv_sk(B),A)) |
(!in(ch,XB: Agent);
process_A(A,XB,sk(priv_sk(XB)),priv_sk(A),B)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X))
) | (
out(ch,A);
out(ch,B);
out(ch,sk(priv_sk(A)));
out(ch,sk(priv_sk(B)));
process_IKEv2DS(A,B) | process_IKEv2DS(B,A))