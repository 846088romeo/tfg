(* Protocol: EPMO *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Private channel declaration *)
free ch_priv_M_C: channel [private].

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_1_2_BytByt_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_2_2_BytByt_Crypto_ByteArray((x1,x2)) = x2.
reduc forall x1:Crypto_ByteArray,x2:SealedPair; proj_1_2_BytSeP_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:SealedPair; proj_2_2_BytSeP_SealedPair((x1,x2)) = x2.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_1_4_AgeBytBytByt_Agent((x1,x2,x3,x4)) = x1.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_2_4_AgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x2.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_3_4_AgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_4_4_AgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Agent,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_1_5_BytBytAgeBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Agent,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_2_5_BytBytAgeBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Agent,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_3_5_BytBytAgeBytByt_Agent((x1,x2,x3,x4,x5)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Agent,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_4_5_BytBytAgeBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Agent,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_5_5_BytBytAgeBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x5.
reduc forall x1:Crypto_ByteArray,x2:SignedObject,x3:SealedPair; proj_1_3_BytSigSeP_Crypto_ByteArray((x1,x2,x3)) = x1.
reduc forall x1:Crypto_ByteArray,x2:SignedObject,x3:SealedPair; proj_2_3_BytSigSeP_SignedObject((x1,x2,x3)) = x2.
reduc forall x1:Crypto_ByteArray,x2:SignedObject,x3:SealedPair; proj_3_3_BytSigSeP_SealedPair((x1,x2,x3)) = x3.
reduc forall x1:Crypto_ByteArray,x2:SignedObject,x3:Crypto_ByteArray; proj_1_3_BytSigByt_Crypto_ByteArray((x1,x2,x3)) = x1.
reduc forall x1:Crypto_ByteArray,x2:SignedObject,x3:Crypto_ByteArray; proj_2_3_BytSigByt_SignedObject((x1,x2,x3)) = x2.
reduc forall x1:Crypto_ByteArray,x2:SignedObject,x3:Crypto_ByteArray; proj_3_3_BytSigByt_Crypto_ByteArray((x1,x2,x3)) = x3.
reduc forall x1:Crypto_ByteArray,x2:SignedObject; proj_1_2_BytSig_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:SignedObject; proj_2_2_BytSig_SignedObject((x1,x2)) = x2.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Secret Goal Testing Functions *)
fun fun_goal_INVSM_M(PrivateKey): SecretKey.
fun fun_goal_INVHKM_M(PrivateKey): SecretKey.
fun fun_goal_INVPM_M(PrivateKey): SecretKey.
fun fun_goal_INVSC_C(PrivateKey): SecretKey.
fun fun_goal_INVHKC_C(PrivateKey): SecretKey.
fun fun_goal_INVPC_C(PrivateKey): SecretKey.
fun fun_goal_INVSB_b(PrivateKey): SecretKey.
fun fun_goal_INVHKB_b(PrivateKey): SecretKey.
fun fun_goal_INVPB_b(PrivateKey): SecretKey.
fun fun_goal_GOODSPRICE_CM(Crypto_ByteArray,Crypto_ByteArray): SecretKey.

(* Variable agents *)
free C: Agent.
free M: Agent.

(* Constants *)
const one: Crypto_ByteArray.
const two: Crypto_ByteArray.
const three: Crypto_ByteArray.
const four: Crypto_ByteArray.
const five: Crypto_ByteArray.
const six: Crypto_ByteArray.
const empty: Crypto_ByteArray.
const b: Agent.

(* Secrecy assumptions *)
not attacker(new Invpkb).
not attacker(new Invhkb).
not attacker(new Invskb).

(* Goal queries *)
free InvskINVSM_M: PrivateKey [private].query attacker(InvskINVSM_M).
free InvhkINVHKM_M: PrivateKey [private].query attacker(InvhkINVHKM_M).
free InvpkINVPM_M: PrivateKey [private].query attacker(InvpkINVPM_M).
free InvskINVSC_C: PrivateKey [private].query attacker(InvskINVSC_C).
free InvhkINVHKC_C: PrivateKey [private].query attacker(InvhkINVHKC_C).
free InvpkINVPC_C: PrivateKey [private].query attacker(InvpkINVPC_C).
free InvskINVSB_b: PrivateKey [private].query attacker(InvskINVSB_b).
free InvhkINVHKB_b: PrivateKey [private].query attacker(InvhkINVHKB_b).
free InvpkINVPB_b: PrivateKey [private].query attacker(InvpkINVPB_b).
free GOODSPRICE_CM: bitstring [private].query attacker(GOODSPRICE_CM).
event witness_auth_GOODSPRICEB_MC(bitstring,Agent,Agent).
event witness_auth_PRICEBM_bC(bitstring,Agent,Agent).
event request_auth_PRICEBM_bC(bitstring,Agent,Agent).
query m: bitstring, a1: Agent, a2: Agent; inj-event(request_auth_PRICEBM_bC(m,a1,a2)) ==> inj-event(witness_auth_PRICEBM_bC(m,a1,a2)).
event request_auth_GOODSPRICEB_MC(bitstring,Agent,Agent).
query m: bitstring, a1: Agent, a2: Agent; inj-event(request_auth_GOODSPRICEB_MC(m,a1,a2)) ==> inj-event(witness_auth_GOODSPRICEB_MC(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(C)).
query event(end(M)).
query event(end(b)).

(* Process b *)
let process_b(C: Agent,M: Agent,pkC: PublicKey,skM: PublicKey,Invpkb: PrivateKey,Invskb: PrivateKey,Invhkb: PrivateKey,honestC: Agent,honestM: Agent) =
if not (b = C) then
if not (b = M) then
in(ch,VAR_B_R4: bitstring);
let VAR_B_DJ22BR4INVPB: bitstring = dec_pk(proj_2_2_BytSeP_SealedPair(VAR_B_R4),Invpkb) in 
if C = proj_1_4_AgeBytBytByt_Agent(VAR_B_DJ22BR4INVPB) then
if three = proj_1_2_BytSeP_Crypto_ByteArray(VAR_B_R4) then
new NxB: Crypto_ByteArray;
let VAR_B_J34BDJ22BR4INVPB: Crypto_ByteArray = proj_3_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_DJ22BR4INVPB) in 
out(ch,(four,sign_sk(Crypto_ByteArray2bitstring(hash((C,proj_2_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_DJ22BR4INVPB),NxB,VAR_B_J34BDJ22BR4INVPB,proj_4_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_DJ22BR4INVPB)))),Invskb),enc_pk((proj_2_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_DJ22BR4INVPB),NxB),pkC)));
in(ch,VAR_B_R7: bitstring);
if six = proj_1_2_BytSig_Crypto_ByteArray(VAR_B_R7) then
if bitstring2Crypto_ByteArray(verify_sk(proj_2_2_BytSig_SignedObject(VAR_B_R7),skM)) = hash((b,NxB,VAR_B_J34BDJ22BR4INVPB)) then
out(ch,encS(PrivateKey2bitstring(InvskINVSB_b),fun_goal_INVSB_b(Invskb)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKB_b),fun_goal_INVHKB_b(Invhkb)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPB_b),fun_goal_INVPB_b(Invpkb)));
(if C = honestC then event request_auth_PRICEBM_bC((proj_4_4_AgeBytBytByt_Crypto_ByteArray(VAR_B_DJ22BR4INVPB),b,M),b,C)) |
event end(b);
0.

(* Process M *)
let process_M(C: Agent,M: Agent,pkC: PublicKey,skb: PublicKey,InvpkM: PrivateKey,InvskM: PrivateKey,InvhkM: PrivateKey,honestC: Agent) =
if not (M = b) then
if not (M = C) then
in(ch_priv_M_C,VAR_M_R0: bitstring) [precise];
let VAR_M_J12MR0: Crypto_ByteArray = proj_1_2_BytByt_Crypto_ByteArray(VAR_M_R0) in 
if VAR_M_J12MR0 = VAR_M_J12MR0 then
out(ch_priv_M_C,empty);
in(ch,VAR_M_R2: bitstring);
let VAR_M_DJ22MR2INVPM: bitstring = dec_pk(proj_2_2_BytSeP_SealedPair(VAR_M_R2),InvpkM) in 
if C = proj_1_4_AgeBytBytByt_Agent(VAR_M_DJ22MR2INVPM) then
if one = proj_1_2_BytSeP_Crypto_ByteArray(VAR_M_R2) then
if VAR_M_J12MR0 = proj_3_4_AgeBytBytByt_Crypto_ByteArray(VAR_M_DJ22MR2INVPM) then
let VAR_M_J22MR0: Crypto_ByteArray = proj_2_2_BytByt_Crypto_ByteArray(VAR_M_R0) in 
if VAR_M_J22MR0 = proj_4_4_AgeBytBytByt_Crypto_ByteArray(VAR_M_DJ22MR2INVPM) then
new NxM: Crypto_ByteArray;
let VAR_M_J24MDJ22MR2INVPM: Crypto_ByteArray = proj_2_4_AgeBytBytByt_Crypto_ByteArray(VAR_M_DJ22MR2INVPM) in 
out(ch,(two,enc_pk((VAR_M_J24MDJ22MR2INVPM,NxM,M,VAR_M_J12MR0,VAR_M_J22MR0),pkC)));
in(ch,VAR_M_R6: bitstring);
if five = proj_1_3_BytSigByt_Crypto_ByteArray(VAR_M_R6) then
let VAR_M_J33MR6: Crypto_ByteArray = proj_3_3_BytSigByt_Crypto_ByteArray(VAR_M_R6) in 
if bitstring2Crypto_ByteArray(verify_sk(proj_2_3_BytSigByt_SignedObject(VAR_M_R6),skb)) = hash((C,VAR_M_J24MDJ22MR2INVPM,VAR_M_J33MR6,NxM,VAR_M_J22MR0)) then
out(ch,(six,sign_sk(Crypto_ByteArray2bitstring(hash((b,VAR_M_J33MR6,NxM))),InvskM)));
out(ch,encS(PrivateKey2bitstring(InvskINVSM_M),fun_goal_INVSM_M(InvskM)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKM_M),fun_goal_INVHKM_M(InvhkM)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPM_M),fun_goal_INVPM_M(InvpkM)));
(if C = honestC then event request_auth_GOODSPRICEB_MC((VAR_M_J12MR0,VAR_M_J22MR0,b),M,C)) |
(if C = honestC then out(ch,encS(GOODSPRICE_CM,fun_goal_GOODSPRICE_CM(VAR_M_J12MR0,VAR_M_J22MR0)))) |
event end(M);
0.

(* Process C *)
let process_C(C: Agent,M: Agent,pkM: PublicKey,pkb: PublicKey,skb: PublicKey,InvpkC: PrivateKey,InvskC: PrivateKey,InvhkC: PrivateKey,honestM: Agent) =
if not (C = b) then
if not (C = M) then
new Goods: Crypto_ByteArray;
new Price: Crypto_ByteArray;
event witness_auth_GOODSPRICEB_MC((Goods,Price,b),M,C);
event witness_auth_PRICEBM_bC((Price,b,M),b,C);
out(ch_priv_M_C,(Goods,Price));
in(ch_priv_M_C,VAR_C_R1: Crypto_ByteArray) [precise];
if empty = VAR_C_R1 then
new NxC: Crypto_ByteArray;
out(ch,(one,enc_pk((C,NxC,Goods,Price),pkM)));
in(ch,VAR_C_R3: bitstring);
let VAR_C_DJ22CR3INVPC: bitstring = dec_pk(proj_2_2_BytSeP_SealedPair(VAR_C_R3),InvpkC) in 
if M = proj_3_5_BytBytAgeBytByt_Agent(VAR_C_DJ22CR3INVPC) then
if Goods = proj_4_5_BytBytAgeBytByt_Crypto_ByteArray(VAR_C_DJ22CR3INVPC) then
if NxC = proj_1_5_BytBytAgeBytByt_Crypto_ByteArray(VAR_C_DJ22CR3INVPC) then
if Price = proj_5_5_BytBytAgeBytByt_Crypto_ByteArray(VAR_C_DJ22CR3INVPC) then
if two = proj_1_2_BytSeP_Crypto_ByteArray(VAR_C_R3) then
let VAR_C_J25CDJ22CR3INVPC: Crypto_ByteArray = proj_2_5_BytBytAgeBytByt_Crypto_ByteArray(VAR_C_DJ22CR3INVPC) in 
out(ch,(three,enc_pk((C,NxC,VAR_C_J25CDJ22CR3INVPC,Price),pkb)));
in(ch,VAR_C_R5: bitstring);
let VAR_C_DJ33CR5INVPC: bitstring = dec_pk(proj_3_3_BytSigSeP_SealedPair(VAR_C_R5),InvpkC) in 
if NxC = proj_1_2_BytByt_Crypto_ByteArray(VAR_C_DJ33CR5INVPC) then
if four = proj_1_3_BytSigSeP_Crypto_ByteArray(VAR_C_R5) then
let VAR_C_J22CDJ33CR5INVPC: Crypto_ByteArray = proj_2_2_BytByt_Crypto_ByteArray(VAR_C_DJ33CR5INVPC) in 
let VAR_C_J23CR5: SignedObject = proj_2_3_BytSigSeP_SignedObject(VAR_C_R5) in 
if bitstring2Crypto_ByteArray(verify_sk(VAR_C_J23CR5,skb)) = hash((C,NxC,VAR_C_J22CDJ33CR5INVPC,VAR_C_J25CDJ22CR3INVPC,Price)) then
out(ch,(five,VAR_C_J23CR5,VAR_C_J22CDJ33CR5INVPC));
out(ch,encS(PrivateKey2bitstring(InvskINVSC_C),fun_goal_INVSC_C(InvskC)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKC_C),fun_goal_INVHKC_C(InvhkC)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPC_C),fun_goal_INVPC_C(InvpkC)));
(if M = honestM then out(ch,encS(GOODSPRICE_CM,fun_goal_GOODSPRICE_CM(Goods,Price)))) |
event end(C);
0.

(* Process EPMO *)
let process_EPMO(C: Agent,M: Agent,pkb: PublicKey,skb: PublicKey,Invpkb: PrivateKey,Invskb: PrivateKey,Invhkb: PrivateKey) =
(!in(ch,XC: Agent);
in(ch,XM: Agent);
process_b(XC,XM,pk(priv_pk(XC)),sk(priv_sk(XM)),Invpkb,Invskb,Invhkb,C,M)) |
(!in(ch,XC: Agent);
process_M(XC,M,pk(priv_pk(XC)),skb,priv_pk(M),priv_sk(M),priv_hk(M),C)) |
(!in(ch,XM: Agent);
process_C(C,XM,pk(priv_pk(XM)),pkb,skb,priv_pk(C),priv_sk(C),priv_hk(C),M)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X))
) | (
out(ch,C);
out(ch,M);
out(ch,pk(priv_pk(C)));
out(ch,pk(priv_pk(M)));
out(ch,sk(priv_sk(C)));
out(ch,sk(priv_sk(M)));
out(ch,hk(priv_hk(C)));
out(ch,hk(priv_hk(M)));
new Invpkb: PrivateKey;
new Invskb: PrivateKey;
new Invhkb: PrivateKey;
let pkb = pk(Invpkb) in out(ch,pkb);
let hkb = hk(Invhkb) in out(ch,hkb);
let skb = sk(Invskb) in out(ch,skb);
process_EPMO(C,M,pkb,skb,Invpkb,Invskb,Invhkb) | process_EPMO(M,C,pkb,skb,Invpkb,Invskb,Invhkb))