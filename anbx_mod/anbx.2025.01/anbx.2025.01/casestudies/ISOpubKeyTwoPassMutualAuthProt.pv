(* Protocol: ISOpubKeyTwoPassMutualAuthProt *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Projectors *)
reduc forall x1:SignedObject,x2:SignedObject; proj_1_2_SigSig_SignedObject((x1,x2)) = x1.
reduc forall x1:SignedObject,x2:SignedObject; proj_2_2_SigSig_SignedObject((x1,x2)) = x2.
reduc forall x1:Agent,x2:PublicKey; proj_1_2_AgePub_Agent((x1,x2)) = x1.
reduc forall x1:Agent,x2:PublicKey; proj_2_2_AgePub_PublicKey((x1,x2)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray; proj_1_3_BytAgeByt_Crypto_ByteArray((x1,x2,x3)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray; proj_2_3_BytAgeByt_Agent((x1,x2,x3)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Agent,x3:Crypto_ByteArray; proj_3_3_BytAgeByt_Crypto_ByteArray((x1,x2,x3)) = x3.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Variable agents *)
free A: Agent.
free B: Agent.

(* Constants *)
const tag: Crypto_ByteArray.
const empty: Crypto_ByteArray.
const s: Agent.

(* Secrecy assumptions *)
not attacker(new Invpks).
not attacker(new Invhks).
not attacker(new Invsks).

(* Goal queries *)

(* Process s *)
let process_s(A: Agent,B: Agent,skA: PublicKey,skB: PublicKey,Invsks: PrivateKey,honestA: Agent,honestB: Agent) =
out(ch,sign_sk((A,skA),Invsks));
in(ch,VAR_S_R1: Crypto_ByteArray);
if empty = VAR_S_R1 then
out(ch,sign_sk((B,skB),Invsks));
0.

(* Process B *)
let process_B(A: Agent,B: Agent,skA: PublicKey,skB: PublicKey,sks: PublicKey,InvskB: PrivateKey,honestA: Agent) =
in(ch,VAR_B_R2: SignedObject);
let VAR_B_DBR2SS: bitstring = verify_sk(VAR_B_R2,sks) in 
if VAR_B_DBR2SS = (B,skB) then
out(ch,empty);
in(ch,VAR_B_R4: bitstring);
let VAR_B_DJ12BR4SS: bitstring = verify_sk(proj_1_2_SigSig_SignedObject(VAR_B_R4),sks) in 
if proj_2_2_AgePub_PublicKey(VAR_B_DJ12BR4SS) = proj_2_2_AgePub_PublicKey(VAR_B_DJ12BR4SS) then
if B = proj_2_3_BytAgeByt_Agent(verify_sk(proj_2_2_SigSig_SignedObject(VAR_B_R4),skA)) then
if VAR_B_DJ12BR4SS = (A,skA) then
new NxNB: Crypto_ByteArray;
new Text3: Crypto_ByteArray;
out(ch,(VAR_B_R2,sign_sk((NxNB,A,Text3),InvskB)));
0.

(* Process A *)
let process_A(A: Agent,B: Agent,skA: PublicKey,skB: PublicKey,sks: PublicKey,InvskA: PrivateKey,honestB: Agent) =
in(ch,VAR_A_R0: SignedObject);
let VAR_A_DAR0SS: bitstring = verify_sk(VAR_A_R0,sks) in 
if VAR_A_DAR0SS = (A,skA) then
out(ch,empty);
in(ch,VAR_A_R3: Crypto_ByteArray);
if empty = VAR_A_R3 then
new NxNA: Crypto_ByteArray;
new Text1: Crypto_ByteArray;
out(ch,(VAR_A_R0,sign_sk((NxNA,B,Text1),InvskA)));
in(ch,VAR_A_R5: bitstring);
let VAR_A_DJ12AR5SS: bitstring = verify_sk(proj_1_2_SigSig_SignedObject(VAR_A_R5),sks) in 
if proj_2_2_AgePub_PublicKey(VAR_A_DJ12AR5SS) = proj_2_2_AgePub_PublicKey(VAR_A_DJ12AR5SS) then
if A = proj_2_3_BytAgeByt_Agent(verify_sk(proj_2_2_SigSig_SignedObject(VAR_A_R5),skB)) then
if VAR_A_DJ12AR5SS = (B,skB) then
0.

(* Process ISOpubKeyTwoPassMutualAuthProt *)
let process_ISOpubKeyTwoPassMutualAuthProt(A: Agent,B: Agent,sks: PublicKey,Invsks: PrivateKey) =
(!in(ch,XA: Agent);
in(ch,XB: Agent);
process_s(XA,XB,sk(priv_sk(XA)),sk(priv_sk(XB)),Invsks,A,B)) |
(!in(ch,XA: Agent);
process_B(XA,B,sk(priv_sk(XA)),sk(priv_sk(B)),sks,priv_sk(B),A)) |
(!in(ch,XB: Agent);
process_A(A,XB,sk(priv_sk(A)),sk(priv_sk(XB)),sks,priv_sk(A),B)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X))
) | (
out(ch,A);
out(ch,B);
out(ch,sk(priv_sk(A)));
out(ch,sk(priv_sk(B)));
new Invsks: PrivateKey;
new Invpks: PrivateKey;
new Invhks: PrivateKey;
let pks = pk(Invpks) in out(ch,pks);
let hks = hk(Invhks) in out(ch,hks);
let sks = sk(Invsks) in out(ch,sks);
process_ISOpubKeyTwoPassMutualAuthProt(A,B,sks,Invsks) | process_ISOpubKeyTwoPassMutualAuthProt(B,A,sks,Invsks))