(* Protocol: SET_Orig_v2 *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Private channel declaration *)
free ch_priv_M_C: channel [private].

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun SignedObject2bitstring(SignedObject): bitstring [data,typeConverter].
reduc forall x: SignedObject; bitstring2SignedObject(SignedObject2bitstring(x)) = x.
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_1_2_BytByt_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_2_2_BytByt_Crypto_ByteArray((x1,x2)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_1_4_BytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_2_4_BytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_3_4_BytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_4_4_BytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SealedPair,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray,x9:Crypto_ByteArray; proj_1_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SealedPair,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray,x9:Crypto_ByteArray; proj_2_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SealedPair,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray,x9:Crypto_ByteArray; proj_3_9_BytBytSePBytBytBytBytBytByt_SealedPair((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SealedPair,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray,x9:Crypto_ByteArray; proj_4_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SealedPair,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray,x9:Crypto_ByteArray; proj_5_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x5.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SealedPair,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray,x9:Crypto_ByteArray; proj_6_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x6.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SealedPair,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray,x9:Crypto_ByteArray; proj_7_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x7.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SealedPair,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray,x9:Crypto_ByteArray; proj_8_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x8.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:SealedPair,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray,x9:Crypto_ByteArray; proj_9_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8,x9)) = x9.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SealedPair; proj_1_7_BytBytBytBytBytBytSeP_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SealedPair; proj_2_7_BytBytBytBytBytBytSeP_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SealedPair; proj_3_7_BytBytBytBytBytBytSeP_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SealedPair; proj_4_7_BytBytBytBytBytBytSeP_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SealedPair; proj_5_7_BytBytBytBytBytBytSeP_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x5.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SealedPair; proj_6_7_BytBytBytBytBytBytSeP_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x6.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray,x7:SealedPair; proj_7_7_BytBytBytBytBytBytSeP_SealedPair((x1,x2,x3,x4,x5,x6,x7)) = x7.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray; proj_1_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray; proj_2_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray; proj_3_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray; proj_4_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray; proj_5_8_BytBytBytBytAgeBytBytByt_Agent((x1,x2,x3,x4,x5,x6,x7,x8)) = x5.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray; proj_6_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8)) = x6.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray; proj_7_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8)) = x7.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Crypto_ByteArray,x7:Crypto_ByteArray,x8:Crypto_ByteArray; proj_8_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7,x8)) = x8.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_1_5_AgeBytBytBytByt_Agent((x1,x2,x3,x4,x5)) = x1.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_2_5_AgeBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x2.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_3_5_AgeBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x3.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_4_5_AgeBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x4.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray; proj_5_5_AgeBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5)) = x5.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray; proj_1_6_AgeBytBytBytBytByt_Agent((x1,x2,x3,x4,x5,x6)) = x1.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray; proj_2_6_AgeBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x2.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray; proj_3_6_AgeBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x3.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray; proj_4_6_AgeBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x4.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray; proj_5_6_AgeBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x5.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:Crypto_ByteArray; proj_6_6_AgeBytBytBytBytByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x6.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun pan(Agent,Agent): Crypto_ByteArray [private].

(* Secret Goal Testing Functions *)
fun fun_goal_INVSA_a(PrivateKey): SecretKey.
fun fun_goal_INVHKA_a(PrivateKey): SecretKey.
fun fun_goal_INVPA_a(PrivateKey): SecretKey.
fun fun_goal_INVSM_M(PrivateKey): SecretKey.
fun fun_goal_INVHKM_M(PrivateKey): SecretKey.
fun fun_goal_INVPM_M(PrivateKey): SecretKey.
fun fun_goal_PANCA_Ca(Crypto_ByteArray): SecretKey.
fun fun_goal_ORDERDESC_CM(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free C: Agent.
free M: Agent.

(* Constants *)
const empty: Crypto_ByteArray.
const a: Agent.

(* Secrecy assumptions *)
not attacker(new Invpka).
not attacker(new Invhka).
not attacker(new Invska).

(* Goal queries *)
free InvskINVSA_a: PrivateKey [private].query attacker(InvskINVSA_a).
free InvhkINVHKA_a: PrivateKey [private].query attacker(InvhkINVHKA_a).
free InvpkINVPA_a: PrivateKey [private].query attacker(InvpkINVPA_a).
free InvskINVSM_M: PrivateKey [private].query attacker(InvskINVSM_M).
free InvhkINVHKM_M: PrivateKey [private].query attacker(InvhkINVHKM_M).
free InvpkINVPM_M: PrivateKey [private].query attacker(InvpkINVPM_M).
free PANCA_Ca: Crypto_ByteArray [private].query attacker(PANCA_Ca).
free ORDERDESC_CM: Crypto_ByteArray [private].query attacker(ORDERDESC_CM).
event witness_wauth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_aC(bitstring,Agent,Agent).
event witness_auth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_CM(bitstring,Agent,Agent).
event witness_auth_NXAUTHCODE_Ma(Crypto_ByteArray,Agent,Agent).
event witness_auth_NXAUTHCODE_CM(Crypto_ByteArray,Agent,Agent).
event request_auth_NXAUTHCODE_Ma(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_auth_NXAUTHCODE_Ma(m,a1,a2)) ==> inj-event(witness_auth_NXAUTHCODE_Ma(m,a1,a2)).
event wrequest_wauth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_aC(bitstring,Agent,Agent).
query m: bitstring, a1: Agent, a2: Agent; event(wrequest_wauth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_aC(m,a1,a2)) ==> event(witness_wauth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_aC(m,a1,a2)).
event request_auth_NXAUTHCODE_CM(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent; inj-event(request_auth_NXAUTHCODE_CM(m,a1,a2)) ==> inj-event(witness_auth_NXAUTHCODE_CM(m,a1,a2)).
event request_auth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_CM(bitstring,Agent,Agent).
query m: bitstring, a1: Agent, a2: Agent; inj-event(request_auth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_CM(m,a1,a2)) ==> inj-event(witness_auth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_CM(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(C)).
query event(end(M)).
query event(end(a)).

(* Process a *)
let process_a(C: Agent,M: Agent,pkM: PublicKey,skM: PublicKey,Invpka: PrivateKey,Invska: PrivateKey,Invhka: PrivateKey,honestC: Agent,honestM: Agent) =
in(ch,VAR_A_R5: SealedPair);
let VAR_A_DDAR5INVPASM: bitstring = verify_sk(bitstring2SignedObject(dec_pk(VAR_A_R5,Invpka)),skM) in 
let VAR_A_DJ77DDAR5INVPASMINVPA: bitstring = dec_pk(proj_7_7_BytBytBytBytBytBytSeP_SealedPair(VAR_A_DDAR5INVPASM),Invpka) in 
if M = proj_5_8_BytBytBytBytAgeBytBytByt_Agent(VAR_A_DJ77DDAR5INVPASMINVPA) then
let VAR_A_J17DDAR5INVPASM: Crypto_ByteArray = proj_1_7_BytBytBytBytBytBytSeP_Crypto_ByteArray(verify_sk(bitstring2SignedObject(dec_pk(VAR_A_R5,Invpka)),skM)) in 
if VAR_A_J17DDAR5INVPASM = proj_1_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray(VAR_A_DJ77DDAR5INVPASMINVPA) then
let VAR_A_J27DDAR5INVPASM: Crypto_ByteArray = proj_2_7_BytBytBytBytBytBytSeP_Crypto_ByteArray(verify_sk(bitstring2SignedObject(dec_pk(VAR_A_R5,Invpka)),skM)) in 
let VAR_A_J28ADJ77DDAR5INVPASMINVPA: Crypto_ByteArray = proj_2_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray(VAR_A_DJ77DDAR5INVPASMINVPA) in 
if VAR_A_J27DDAR5INVPASM = VAR_A_J28ADJ77DDAR5INVPASMINVPA then
let VAR_A_J37DDAR5INVPASM: Crypto_ByteArray = proj_3_7_BytBytBytBytBytBytSeP_Crypto_ByteArray(verify_sk(bitstring2SignedObject(dec_pk(VAR_A_R5,Invpka)),skM)) in 
if VAR_A_J37DDAR5INVPASM = proj_7_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray(VAR_A_DJ77DDAR5INVPASMINVPA) then
let VAR_A_J38ADJ77DDAR5INVPASMINVPA: Crypto_ByteArray = proj_3_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray(VAR_A_DJ77DDAR5INVPASMINVPA) in 
if proj_4_7_BytBytBytBytBytBytSeP_Crypto_ByteArray(VAR_A_DDAR5INVPASM) = VAR_A_J38ADJ77DDAR5INVPASMINVPA then
let VAR_A_J48ADJ77DDAR5INVPASMINVPA: Crypto_ByteArray = proj_4_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray(VAR_A_DJ77DDAR5INVPASMINVPA) in 
let VAR_A_J68ADJ77DDAR5INVPASMINVPA: Crypto_ByteArray = proj_6_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray(VAR_A_DJ77DDAR5INVPASMINVPA) in 
let VAR_A_J88ADJ77DDAR5INVPASMINVPA: Crypto_ByteArray = proj_8_8_BytBytBytBytAgeBytBytByt_Crypto_ByteArray(VAR_A_DJ77DDAR5INVPASMINVPA) in 
if proj_5_7_BytBytBytBytBytBytSeP_Crypto_ByteArray(VAR_A_DDAR5INVPASM) = hash((VAR_A_J17DDAR5INVPASM,VAR_A_J27DDAR5INVPASM,VAR_A_J38ADJ77DDAR5INVPASMINVPA,VAR_A_J48ADJ77DDAR5INVPASMINVPA,M,VAR_A_J68ADJ77DDAR5INVPASMINVPA,VAR_A_J88ADJ77DDAR5INVPASMINVPA)) then
if proj_6_7_BytBytBytBytBytBytSeP_Crypto_ByteArray(VAR_A_DDAR5INVPASM) = VAR_A_J37DDAR5INVPASM then
if VAR_A_J68ADJ77DDAR5INVPASMINVPA = hash((VAR_A_J27DDAR5INVPASM,VAR_A_J88ADJ77DDAR5INVPASMINVPA)) then
let VAR_A_PANCA: Crypto_ByteArray = pan(C,a) in 
if VAR_A_J68ADJ77DDAR5INVPASMINVPA = hash((VAR_A_J27DDAR5INVPASM,VAR_A_PANCA)) then
if VAR_A_PANCA = VAR_A_J88ADJ77DDAR5INVPASMINVPA then
new NxAuthCode: Crypto_ByteArray;
event witness_auth_NXAUTHCODE_Ma(NxAuthCode,M,a);
out(ch,enc_pk(SignedObject2bitstring(sign_sk((M,VAR_A_J17DDAR5INVPASM,VAR_A_J27DDAR5INVPASM,VAR_A_J48ADJ77DDAR5INVPASMINVPA,NxAuthCode),Invska)),pkM));
out(ch,encS(PrivateKey2bitstring(InvskINVSA_a),fun_goal_INVSA_a(Invska)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKA_a),fun_goal_INVHKA_a(Invhka)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPA_a),fun_goal_INVPA_a(Invpka)));
(if C = honestC then event wrequest_wauth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_aC((VAR_A_J48ADJ77DDAR5INVPASMINVPA,VAR_A_J17DDAR5INVPASM,VAR_A_J27DDAR5INVPASM,hash((VAR_A_J17DDAR5INVPASM,VAR_A_J27DDAR5INVPASM,proj_4_7_BytBytBytBytBytBytSeP_Crypto_ByteArray(VAR_A_DDAR5INVPASM),VAR_A_J48ADJ77DDAR5INVPASMINVPA,M,hash((VAR_A_J27DDAR5INVPASM,VAR_A_PANCA)),VAR_A_PANCA)),proj_6_7_BytBytBytBytBytBytSeP_Crypto_ByteArray(VAR_A_DDAR5INVPASM)),a,C)) |
(if C = honestC then out(ch,encS(Crypto_ByteArray2bitstring(PANCA_Ca),fun_goal_PANCA_Ca(VAR_A_PANCA)))) |
event end(a);
0.

(* Process M *)
let process_M(C: Agent,M: Agent,pka: PublicKey,ska: PublicKey,InvpkM: PrivateKey,InvskM: PrivateKey,InvhkM: PrivateKey,honestC: Agent) =
in(ch_priv_M_C,VAR_M_R0: bitstring) [precise];
let VAR_M_J22MR0: Crypto_ByteArray = proj_2_2_BytByt_Crypto_ByteArray(VAR_M_R0) in 
if VAR_M_J22MR0 = VAR_M_J22MR0 then
out(ch_priv_M_C,empty);
in(ch,VAR_M_R2: bitstring);
let VAR_M_J22MR2: Crypto_ByteArray = proj_2_2_BytByt_Crypto_ByteArray(VAR_M_R2) in 
if VAR_M_J22MR2 = VAR_M_J22MR2 then
new NxXID: Crypto_ByteArray;
new NxChallM: Crypto_ByteArray;
let VAR_M_J12MR2: Crypto_ByteArray = proj_1_2_BytByt_Crypto_ByteArray(VAR_M_R2) in 
out(ch,sign_sk((VAR_M_J12MR2,NxXID,VAR_M_J22MR2,NxChallM),InvskM));
in(ch,VAR_M_R4: bitstring);
let VAR_M_J89MR4: Crypto_ByteArray = proj_8_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray(VAR_M_R4) in 
if NxChallM = VAR_M_J89MR4 then
let VAR_M_J59MR4: Crypto_ByteArray = proj_5_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray(VAR_M_R4) in 
if NxXID = VAR_M_J59MR4 then
let VAR_M_J29MR4: Crypto_ByteArray = proj_2_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray(VAR_M_R4) in 
let VAR_M_J79MR4: Crypto_ByteArray = proj_7_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray(VAR_M_R4) in 
if VAR_M_J29MR4 = hash((VAR_M_J12MR2,VAR_M_J59MR4,VAR_M_J22MR2,VAR_M_J79MR4,VAR_M_J89MR4)) then
let VAR_M_J12MR0: Crypto_ByteArray = proj_1_2_BytByt_Crypto_ByteArray(VAR_M_R0) in 
let VAR_M_HMJ22MR0J12MR0: Crypto_ByteArray = hash((VAR_M_J22MR0,VAR_M_J12MR0)) in 
let VAR_M_J49MR4: Crypto_ByteArray = proj_4_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray(VAR_M_R4) in 
let VAR_M_J69MR4: Crypto_ByteArray = proj_6_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray(VAR_M_R4) in 
if VAR_M_J29MR4 = hash((VAR_M_J49MR4,VAR_M_J59MR4,VAR_M_J69MR4,VAR_M_HMJ22MR0J12MR0,VAR_M_J89MR4)) then
if VAR_M_J49MR4 = VAR_M_J12MR2 then
if VAR_M_J69MR4 = VAR_M_J22MR2 then
if VAR_M_J79MR4 = VAR_M_HMJ22MR0J12MR0 then
let VAR_M_J99MR4: Crypto_ByteArray = proj_9_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray(VAR_M_R4) in 
if VAR_M_J99MR4 = proj_1_9_BytBytSePBytBytBytBytBytByt_Crypto_ByteArray(VAR_M_R4) then
event witness_auth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_CM((proj_1_2_BytByt_Crypto_ByteArray(VAR_M_R0),VAR_M_J49MR4,NxXID,VAR_M_J99MR4,hash((VAR_M_J49MR4,NxXID,VAR_M_J69MR4,VAR_M_HMJ22MR0J12MR0,NxChallM))),C,M);
out(ch,enc_pk(SignedObject2bitstring(sign_sk((VAR_M_J49MR4,NxXID,hash((VAR_M_J49MR4,NxXID,VAR_M_J69MR4,VAR_M_HMJ22MR0J12MR0,NxChallM)),VAR_M_HMJ22MR0J12MR0,VAR_M_J99MR4,hash((VAR_M_J49MR4,NxXID,VAR_M_J69MR4,VAR_M_HMJ22MR0J12MR0,NxChallM)),proj_3_9_BytBytSePBytBytBytBytBytByt_SealedPair(VAR_M_R4)),InvskM)),pka));
in(ch,VAR_M_R6: SealedPair);
let VAR_M_DDMR6INVPMSA: bitstring = verify_sk(bitstring2SignedObject(dec_pk(VAR_M_R6,InvpkM)),ska) in 
if M = proj_1_5_AgeBytBytBytByt_Agent(VAR_M_DDMR6INVPMSA) then
if NxXID = proj_3_5_AgeBytBytBytByt_Crypto_ByteArray(VAR_M_DDMR6INVPMSA) then
if VAR_M_J12MR0 = proj_4_5_AgeBytBytBytByt_Crypto_ByteArray(VAR_M_DDMR6INVPMSA) then
if VAR_M_J49MR4 = proj_2_5_AgeBytBytBytByt_Crypto_ByteArray(VAR_M_DDMR6INVPMSA) then
event witness_auth_NXAUTHCODE_CM(proj_5_5_AgeBytBytBytByt_Crypto_ByteArray(VAR_M_DDMR6INVPMSA),C,M);
out(ch,sign_sk((C,VAR_M_J49MR4,NxXID,VAR_M_J69MR4,hash(Crypto_ByteArray2bitstring(VAR_M_J12MR0)),proj_5_5_AgeBytBytBytByt_Crypto_ByteArray(VAR_M_DDMR6INVPMSA)),InvskM));
event request_auth_NXAUTHCODE_Ma(proj_5_5_AgeBytBytBytByt_Crypto_ByteArray(VAR_M_DDMR6INVPMSA),M,a);
out(ch,encS(PrivateKey2bitstring(InvskINVSM_M),fun_goal_INVSM_M(InvskM)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKM_M),fun_goal_INVHKM_M(InvhkM)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPM_M),fun_goal_INVPM_M(InvpkM)));
(if C = honestC then out(ch,encS(Crypto_ByteArray2bitstring(ORDERDESC_CM),fun_goal_ORDERDESC_CM(VAR_M_J22MR0)))) |
event end(M);
0.

(* Process C *)
let process_C(C: Agent,M: Agent,pka: PublicKey,skM: PublicKey,honestM: Agent) =
new PurchAmt: Crypto_ByteArray;
new OrderDesc: Crypto_ByteArray;
out(ch_priv_M_C,(PurchAmt,OrderDesc));
in(ch_priv_M_C,VAR_C_R1: Crypto_ByteArray) [precise];
if empty = VAR_C_R1 then
new NxLIDM: Crypto_ByteArray;
new NxChallC: Crypto_ByteArray;
out(ch,(NxLIDM,NxChallC));
in(ch,VAR_C_R3: SignedObject);
let VAR_C_DCR3SM: bitstring = verify_sk(VAR_C_R3,skM) in 
if NxChallC = proj_3_4_BytBytBytByt_Crypto_ByteArray(VAR_C_DCR3SM) then
if NxLIDM = proj_1_4_BytBytBytByt_Crypto_ByteArray(VAR_C_DCR3SM) then
event witness_wauth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_aC((PurchAmt,NxLIDM,proj_2_4_BytBytBytByt_Crypto_ByteArray(VAR_C_DCR3SM),hash((NxLIDM,proj_2_4_BytBytBytByt_Crypto_ByteArray(VAR_C_DCR3SM),hash((OrderDesc,PurchAmt)),PurchAmt,M,hash((proj_2_4_BytBytBytByt_Crypto_ByteArray(VAR_C_DCR3SM),pan(C,a))),pan(C,a))),hash((NxLIDM,proj_2_4_BytBytBytByt_Crypto_ByteArray(VAR_C_DCR3SM),NxChallC,hash((OrderDesc,PurchAmt)),proj_4_4_BytBytBytByt_Crypto_ByteArray(VAR_C_DCR3SM)))),a,C);
let VAR_C_HORDERDESCPURCHAMT: Crypto_ByteArray = hash((OrderDesc,PurchAmt)) in 
let VAR_C_HNXLIDMJ24CDCR3SMNXCHALLCHORDERDESCPURCHAMTJ44CDCR3SM: Crypto_ByteArray = hash((NxLIDM,proj_2_4_BytBytBytByt_Crypto_ByteArray(VAR_C_DCR3SM),NxChallC,VAR_C_HORDERDESCPURCHAMT,proj_4_4_BytBytBytByt_Crypto_ByteArray(VAR_C_DCR3SM))) in 
let VAR_C_J24CDCR3SM: Crypto_ByteArray = proj_2_4_BytBytBytByt_Crypto_ByteArray(VAR_C_DCR3SM) in 
let VAR_C_J44CDCR3SM: Crypto_ByteArray = proj_4_4_BytBytBytByt_Crypto_ByteArray(VAR_C_DCR3SM) in 
out(ch,(hash((NxLIDM,VAR_C_J24CDCR3SM,VAR_C_HORDERDESCPURCHAMT,PurchAmt,M,hash((VAR_C_J24CDCR3SM,pan(C,a))),pan(C,a))),VAR_C_HNXLIDMJ24CDCR3SMNXCHALLCHORDERDESCPURCHAMTJ44CDCR3SM,enc_pk((NxLIDM,VAR_C_J24CDCR3SM,VAR_C_HORDERDESCPURCHAMT,PurchAmt,M,hash((VAR_C_J24CDCR3SM,pan(C,a))),VAR_C_HNXLIDMJ24CDCR3SMNXCHALLCHORDERDESCPURCHAMTJ44CDCR3SM,pan(C,a)),pka),NxLIDM,VAR_C_J24CDCR3SM,NxChallC,VAR_C_HORDERDESCPURCHAMT,VAR_C_J44CDCR3SM,hash((NxLIDM,VAR_C_J24CDCR3SM,VAR_C_HORDERDESCPURCHAMT,PurchAmt,M,hash((VAR_C_J24CDCR3SM,pan(C,a))),pan(C,a)))));
in(ch,VAR_C_R7: SignedObject);
let VAR_C_DCR7SM: bitstring = verify_sk(VAR_C_R7,skM) in 
if C = proj_1_6_AgeBytBytBytBytByt_Agent(VAR_C_DCR7SM) then
if NxChallC = proj_4_6_AgeBytBytBytBytByt_Crypto_ByteArray(VAR_C_DCR7SM) then
if NxLIDM = proj_2_6_AgeBytBytBytBytByt_Crypto_ByteArray(VAR_C_DCR7SM) then
if proj_3_6_AgeBytBytBytBytByt_Crypto_ByteArray(VAR_C_DCR7SM) = VAR_C_J24CDCR3SM then
if hash(Crypto_ByteArray2bitstring(PurchAmt)) = proj_5_6_AgeBytBytBytBytByt_Crypto_ByteArray(VAR_C_DCR7SM) then
out(ch,encS(Crypto_ByteArray2bitstring(PANCA_Ca),fun_goal_PANCA_Ca(pan(C,a))));
(if M = honestM then event request_auth_NXAUTHCODE_CM(proj_6_6_AgeBytBytBytBytByt_Crypto_ByteArray(VAR_C_DCR7SM),C,M)) |
(if M = honestM then event request_auth_PURCHAMTNXLIDMNXXIDHNXLIDMNXXIDHORDERDESCPURCHAMTPURCHAMTMHNXXIDPANCAPANCAHNXLIDMNXXIDNXCHALLCHORDERDESCPURCHAMTNXCHALLM_CM((PurchAmt,NxLIDM,VAR_C_J24CDCR3SM,hash((NxLIDM,VAR_C_J24CDCR3SM,VAR_C_HORDERDESCPURCHAMT,PurchAmt,M,hash((VAR_C_J24CDCR3SM,pan(C,a))),pan(C,a))),VAR_C_HNXLIDMJ24CDCR3SMNXCHALLCHORDERDESCPURCHAMTJ44CDCR3SM),C,M)) |
(if M = honestM then out(ch,encS(Crypto_ByteArray2bitstring(ORDERDESC_CM),fun_goal_ORDERDESC_CM(OrderDesc)))) |
event end(C);
0.

(* Process SET_Orig_v2 *)
let process_SET_Orig_v2(C: Agent,M: Agent,pka: PublicKey,ska: PublicKey,Invpka: PrivateKey,Invska: PrivateKey,Invhka: PrivateKey) =
(!in(ch,XC: Agent);
in(ch,XM: Agent);
process_a(XC,XM,pk(priv_pk(XM)),sk(priv_sk(XM)),Invpka,Invska,Invhka,C,M)) |
(!in(ch,XC: Agent);
process_M(XC,M,pka,ska,priv_pk(M),priv_sk(M),priv_hk(M),C)) |
(!in(ch,XM: Agent);
process_C(C,XM,pka,sk(priv_sk(XM)),M)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,pan(X,a))
) | (
out(ch,C);
out(ch,M);
out(ch,pk(priv_pk(M)));
out(ch,sk(priv_sk(M)));
out(ch,hk(priv_hk(M)));
new Invpka: PrivateKey;
new Invska: PrivateKey;
new Invhka: PrivateKey;
let pka = pk(Invpka) in out(ch,pka);
let hka = hk(Invhka) in out(ch,hka);
let ska = sk(Invska) in out(ch,ska);
process_SET_Orig_v2(C,M,pka,ska,Invpka,Invska,Invhka) | process_SET_Orig_v2(M,C,pka,ska,Invpka,Invska,Invhka))