(* Protocol: DenningSaccoCorr *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun SecretKey2bitstring(SecretKey): bitstring [data,typeConverter].
reduc forall x: SecretKey; bitstring2SecretKey(SecretKey2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:SignedObject,x2:SignedObject; proj_1_2_SigSig_SignedObject((x1,x2)) = x1.
reduc forall x1:SignedObject,x2:SignedObject; proj_2_2_SigSig_SignedObject((x1,x2)) = x2.
reduc forall x1:Agent,x2:PublicKey; proj_1_2_AgePub_Agent((x1,x2)) = x1.
reduc forall x1:Agent,x2:PublicKey; proj_2_2_AgePub_PublicKey((x1,x2)) = x2.
reduc forall x1:SignedObject,x2:SignedObject,x3:SealedPair; proj_1_3_SigSigSeP_SignedObject((x1,x2,x3)) = x1.
reduc forall x1:SignedObject,x2:SignedObject,x3:SealedPair; proj_2_3_SigSigSeP_SignedObject((x1,x2,x3)) = x2.
reduc forall x1:SignedObject,x2:SignedObject,x3:SealedPair; proj_3_3_SigSigSeP_SealedPair((x1,x2,x3)) = x3.
reduc forall x1:SecretKey,x2:Crypto_ByteArray,x3:Agent; proj_1_3_SecBytAge_SecretKey((x1,x2,x3)) = x1.
reduc forall x1:SecretKey,x2:Crypto_ByteArray,x3:Agent; proj_2_3_SecBytAge_Crypto_ByteArray((x1,x2,x3)) = x2.
reduc forall x1:SecretKey,x2:Crypto_ByteArray,x3:Agent; proj_3_3_SecBytAge_Agent((x1,x2,x3)) = x3.
reduc forall x1:SignedObject,x2:Crypto_ByteArray; proj_1_2_SigByt_SignedObject((x1,x2)) = x1.
reduc forall x1:SignedObject,x2:Crypto_ByteArray; proj_2_2_SigByt_Crypto_ByteArray((x1,x2)) = x2.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Secret Goal Testing Functions *)
fun fun_goal_INVSS_s(PrivateKey): SecretKey.
fun fun_goal_INVPB_B(PrivateKey): SecretKey.
fun fun_goal_INVSA_A(PrivateKey): SecretKey.

(* Variable agents *)
free A: Agent.
free B: Agent.

(* Constants *)
const tag: Crypto_ByteArray.
const s: Agent.

(* Secrecy assumptions *)
not attacker(new Invpks).
not attacker(new Invhks).
not attacker(new Invsks).

(* Goal queries *)
free InvskINVSS_s: PrivateKey [private].query attacker(InvskINVSS_s).
free InvpkINVPB_B: PrivateKey [private].query attacker(InvpkINVPB_B).
free InvskINVSA_A: PrivateKey [private].query attacker(InvskINVSA_A).
free KAB_AB: SecretKey [private].query attacker(KAB_AB).
event witness_wauth_KAB_BA(SecretKey,Agent,Agent).
event wrequest_wauth_KAB_BA(SecretKey,Agent,Agent).
query m: SecretKey, a1: Agent, a2: Agent; event(wrequest_wauth_KAB_BA(m,a1,a2)) ==> event(witness_wauth_KAB_BA(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(A)).
query event(end(s)).
query event(end(B)).

(* Process s *)
let process_s(A: Agent,B: Agent,pkB: PublicKey,skA: PublicKey,Invsks: PrivateKey,honestA: Agent,honestB: Agent) =
in(ch,VAR_S_R0: bitstring);
if VAR_S_R0 = (A,B) then
out(ch,(sign_sk((A,skA),Invsks),sign_sk((B,pkB),Invsks)));
out(ch,encS(PrivateKey2bitstring(InvskINVSS_s),fun_goal_INVSS_s(Invsks)));
event end(s);
0.

(* Process B *)
let process_B(A: Agent,B: Agent,pkB: PublicKey,skA: PublicKey,sks: PublicKey,InvpkB: PrivateKey,honestA: Agent) =
in(ch,VAR_B_R2: bitstring);
let VAR_B_DJ33BR2INVPB: bitstring = dec_pk(proj_3_3_SigSigSeP_SealedPair(VAR_B_R2),InvpkB) in 
let skVAR_B_J22DJ13BR2SS: PublicKey = proj_2_2_AgePub_PublicKey(verify_sk(proj_1_3_SigSigSeP_SignedObject(VAR_B_R2),sks)) in 
if B = proj_3_3_SecBytAge_Agent(verify_sk(proj_1_2_SigByt_SignedObject(VAR_B_DJ33BR2INVPB),skVAR_B_J22DJ13BR2SS)) then
if tag = proj_2_2_SigByt_Crypto_ByteArray(VAR_B_DJ33BR2INVPB) then
let VAR_B_DJ23BR2SS: bitstring = verify_sk(proj_2_3_SigSigSeP_SignedObject(VAR_B_R2),sks) in 
if VAR_B_DJ23BR2SS = (B,pkB) then
if skA = skVAR_B_J22DJ13BR2SS then
out(ch,encS(PrivateKey2bitstring(InvpkINVPB_B),fun_goal_INVPB_B(InvpkB)));
(if proj_1_2_AgePub_Agent(verify_sk(proj_1_3_SigSigSeP_SignedObject(VAR_B_R2),sks)) = honestA then event wrequest_wauth_KAB_BA(proj_1_3_SecBytAge_SecretKey(verify_sk(proj_1_2_SigByt_SignedObject(VAR_B_DJ33BR2INVPB),skVAR_B_J22DJ13BR2SS)),B,proj_1_2_AgePub_Agent(verify_sk(proj_1_3_SigSigSeP_SignedObject(VAR_B_R2),sks)))) |
(if A = honestA then out(ch,encS(SecretKey2bitstring(KAB_AB),proj_1_3_SecBytAge_SecretKey(verify_sk(proj_1_2_SigByt_SignedObject(VAR_B_DJ33BR2INVPB),skVAR_B_J22DJ13BR2SS))))) |
event end(B);
0.

(* Process A *)
let process_A(A: Agent,B: Agent,pkB: PublicKey,skA: PublicKey,sks: PublicKey,InvskA: PrivateKey,honestB: Agent) =
new KAB: SecretKey;
event witness_wauth_KAB_BA(KAB,B,A);
out(ch,(A,B));
in(ch,VAR_A_R1: bitstring);
let VAR_A_DJ22AR1SS: bitstring = verify_sk(proj_2_2_SigSig_SignedObject(VAR_A_R1),sks) in 
if proj_2_2_AgePub_PublicKey(VAR_A_DJ22AR1SS) = proj_2_2_AgePub_PublicKey(VAR_A_DJ22AR1SS) then
let VAR_A_DJ12AR1SS: bitstring = verify_sk(proj_1_2_SigSig_SignedObject(VAR_A_R1),sks) in 
if VAR_A_DJ12AR1SS = (A,skA) then
if VAR_A_DJ22AR1SS = (B,pkB) then
new NxA: Crypto_ByteArray;
out(ch,(proj_1_2_SigSig_SignedObject(VAR_A_R1),proj_2_2_SigSig_SignedObject(VAR_A_R1),enc_pk((sign_sk((KAB,NxA,B),InvskA),tag),pkB)));
out(ch,encS(PrivateKey2bitstring(InvskINVSA_A),fun_goal_INVSA_A(InvskA)));
(if B = honestB then out(ch,encS(SecretKey2bitstring(KAB_AB),KAB))) |
event end(A);
0.

(* Process DenningSaccoCorr *)
let process_DenningSaccoCorr(A: Agent,B: Agent,sks: PublicKey,Invsks: PrivateKey) =
(!in(ch,XA: Agent);
in(ch,XB: Agent);
process_s(XA,XB,pk(priv_pk(XB)),sk(priv_sk(XA)),Invsks,A,B)) |
(!in(ch,XA: Agent);
process_B(XA,B,pk(priv_pk(B)),sk(priv_sk(XA)),sks,priv_pk(B),A)) |
(!in(ch,XB: Agent);
process_A(A,XB,pk(priv_pk(XB)),sk(priv_sk(A)),sks,priv_sk(A),B)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X))
) | (
out(ch,A);
out(ch,B);
out(ch,pk(priv_pk(B)));
out(ch,sk(priv_sk(A)));
new Invsks: PrivateKey;
new Invpks: PrivateKey;
new Invhks: PrivateKey;
let pks = pk(Invpks) in out(ch,pks);
let hks = hk(Invhks) in out(ch,hks);
let sks = sk(Invsks) in out(ch,sks);
process_DenningSaccoCorr(A,B,sks,Invsks) | process_DenningSaccoCorr(B,A,sks,Invsks))