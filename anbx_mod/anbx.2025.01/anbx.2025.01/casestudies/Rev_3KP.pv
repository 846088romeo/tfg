(* Protocol: Rev_3KP *)
(* ProVerif/Applied-pi specification mode: PVT *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator - Version 2025.01 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseBase = false. 		(* true|false *)
set verboseGoalReachable = false. 		(* true|false *)
set verboseStatistics = false. 		(* true|false *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set reconstructTrace = true. 		(* n|true|false n=4 default *)
set traceBacktracking = true. 		(* true|false *)
set preciseActions = false. 		(* true|false|trueWithoutArgsInNames *)

(* Public channel declaration *)
free ch: channel.

(* Private channel declaration *)
free ch_priv_M_C: channel [private].

(* Types *)
type Agent.
type Crypto_ByteArray.
type DHParameterSpec.
type DHSecret.
type PrivateKey.
type PublicKey.
type SealedObject.
type SealedPair.
type SecretKey.
type SignedObject.
type String.

(* Type converters *)
fun SignedObject2bitstring(SignedObject): bitstring [data,typeConverter].
reduc forall x: SignedObject; bitstring2SignedObject(SignedObject2bitstring(x)) = x.
fun Crypto_ByteArray2bitstring(Crypto_ByteArray): bitstring [data,typeConverter].
reduc forall x: Crypto_ByteArray; bitstring2Crypto_ByteArray(Crypto_ByteArray2bitstring(x)) = x.
fun SecretKey2bitstring(SecretKey): bitstring [data,typeConverter].
reduc forall x: SecretKey; bitstring2SecretKey(SecretKey2bitstring(x)) = x.
fun PrivateKey2bitstring(PrivateKey): bitstring [data,typeConverter].
reduc forall x: PrivateKey; bitstring2PrivateKey(PrivateKey2bitstring(x)) = x.

(* Projectors *)
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_1_2_BytByt_Crypto_ByteArray((x1,x2)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray; proj_2_2_BytByt_Crypto_ByteArray((x1,x2)) = x2.
reduc forall x1:Crypto_ByteArray,x2:SealedPair,x3:Crypto_ByteArray,x4:SealedPair,x5:Crypto_ByteArray,x6:Agent; proj_1_6_BytSePBytSePBytAge_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x1.
reduc forall x1:Crypto_ByteArray,x2:SealedPair,x3:Crypto_ByteArray,x4:SealedPair,x5:Crypto_ByteArray,x6:Agent; proj_2_6_BytSePBytSePBytAge_SealedPair((x1,x2,x3,x4,x5,x6)) = x2.
reduc forall x1:Crypto_ByteArray,x2:SealedPair,x3:Crypto_ByteArray,x4:SealedPair,x5:Crypto_ByteArray,x6:Agent; proj_3_6_BytSePBytSePBytAge_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x3.
reduc forall x1:Crypto_ByteArray,x2:SealedPair,x3:Crypto_ByteArray,x4:SealedPair,x5:Crypto_ByteArray,x6:Agent; proj_4_6_BytSePBytSePBytAge_SealedPair((x1,x2,x3,x4,x5,x6)) = x4.
reduc forall x1:Crypto_ByteArray,x2:SealedPair,x3:Crypto_ByteArray,x4:SealedPair,x5:Crypto_ByteArray,x6:Agent; proj_5_6_BytSePBytSePBytAge_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x5.
reduc forall x1:Crypto_ByteArray,x2:SealedPair,x3:Crypto_ByteArray,x4:SealedPair,x5:Crypto_ByteArray,x6:Agent; proj_6_6_BytSePBytSePBytAge_Agent((x1,x2,x3,x4,x5,x6)) = x6.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_1_4_AgeBytBytByt_Agent((x1,x2,x3,x4)) = x1.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_2_4_AgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x2.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_3_4_AgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x3.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray; proj_4_4_AgeBytBytByt_Crypto_ByteArray((x1,x2,x3,x4)) = x4.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:SealedPair,x7:Crypto_ByteArray; proj_1_7_AgeBytBytBytBytSePByt_Agent((x1,x2,x3,x4,x5,x6,x7)) = x1.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:SealedPair,x7:Crypto_ByteArray; proj_2_7_AgeBytBytBytBytSePByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x2.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:SealedPair,x7:Crypto_ByteArray; proj_3_7_AgeBytBytBytBytSePByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x3.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:SealedPair,x7:Crypto_ByteArray; proj_4_7_AgeBytBytBytBytSePByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x4.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:SealedPair,x7:Crypto_ByteArray; proj_5_7_AgeBytBytBytBytSePByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x5.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:SealedPair,x7:Crypto_ByteArray; proj_6_7_AgeBytBytBytBytSePByt_SealedPair((x1,x2,x3,x4,x5,x6,x7)) = x6.
reduc forall x1:Agent,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Crypto_ByteArray,x6:SealedPair,x7:Crypto_ByteArray; proj_7_7_AgeBytBytBytBytSePByt_Crypto_ByteArray((x1,x2,x3,x4,x5,x6,x7)) = x7.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Agent; proj_1_6_BytBytBytBytAgeAge_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x1.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Agent; proj_2_6_BytBytBytBytAgeAge_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x2.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Agent; proj_3_6_BytBytBytBytAgeAge_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x3.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Agent; proj_4_6_BytBytBytBytAgeAge_Crypto_ByteArray((x1,x2,x3,x4,x5,x6)) = x4.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Agent; proj_5_6_BytBytBytBytAgeAge_Agent((x1,x2,x3,x4,x5,x6)) = x5.
reduc forall x1:Crypto_ByteArray,x2:Crypto_ByteArray,x3:Crypto_ByteArray,x4:Crypto_ByteArray,x5:Agent,x6:Agent; proj_6_6_BytBytBytBytAgeAge_Agent((x1,x2,x3,x4,x5,x6)) = x6.

(* hash/hmac functions *)
fun hash(bitstring): Crypto_ByteArray.
fun hmac(bitstring,SecretKey): Crypto_ByteArray.

(* Public key encryption *)
fun inv(PublicKey): PrivateKey [private].
fun enc(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PublicKey; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(Agent): PrivateKey [private].
fun pk(PrivateKey): PublicKey.
fun enc_pk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(Agent): PrivateKey [private].
fun hk(PrivateKey): PublicKey.
fun enc_hk(bitstring,PublicKey): SealedPair.
    reduc forall x: bitstring, y: PrivateKey; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(Agent): PrivateKey [private].
fun sk(PrivateKey): PublicKey.
fun sign_sk(bitstring,PrivateKey): SignedObject.
    reduc forall m: bitstring, k: PrivateKey; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: PrivateKey; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,SecretKey): SealedObject.
    reduc forall x: bitstring, y: SecretKey; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: DHParameterSpec [data].
fun kas(PublicKey,DHSecret): SecretKey.
fun kap(DHParameterSpec,DHSecret): PublicKey.
equation forall x: DHSecret, y: DHSecret; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: Crypto_ByteArray [data].
fun xor(Crypto_ByteArray,Crypto_ByteArray): Crypto_ByteArray.
equation forall x:Crypto_ByteArray,y:Crypto_ByteArray; xor(xor(x,y),y) = x.
equation forall x:Crypto_ByteArray; xor(x,zero) = x.
equation forall x:Crypto_ByteArray; xor(zero,x) = x.
equation forall x:Crypto_ByteArray; xor(x,x) = zero.

(* Functions *)
fun ccn(Agent,Agent): Crypto_ByteArray [private].

(* Secret Goal Testing Functions *)
fun fun_goal_INVSA_a(PrivateKey): SecretKey.
fun fun_goal_INVHKA_a(PrivateKey): SecretKey.
fun fun_goal_INVPA_a(PrivateKey): SecretKey.
fun fun_goal_INVSM_M(PrivateKey): SecretKey.
fun fun_goal_INVHKM_M(PrivateKey): SecretKey.
fun fun_goal_INVPM_M(PrivateKey): SecretKey.
fun fun_goal_INVSC_C(PrivateKey): SecretKey.
fun fun_goal_INVHKC_C(PrivateKey): SecretKey.
fun fun_goal_INVPC_C(PrivateKey): SecretKey.
fun fun_goal_CCNCA_Ca(Crypto_ByteArray): SecretKey.
fun fun_goal_PRICE_CMa(Crypto_ByteArray): SecretKey.
fun fun_goal_AUTH_CMa(Crypto_ByteArray): SecretKey.
fun fun_goal_DESC_CM(Crypto_ByteArray): SecretKey.

(* Variable agents *)
free C: Agent.
free M: Agent.

(* Constants *)
const empty: Crypto_ByteArray.
const a: Agent.

(* Secrecy assumptions *)
not attacker(new Invpka).
not attacker(new Invhka).
not attacker(new Invska).

(* Goal queries *)
free InvskINVSA_a: PrivateKey [private].query attacker(InvskINVSA_a).
free InvhkINVHKA_a: PrivateKey [private].query attacker(InvhkINVHKA_a).
free InvpkINVPA_a: PrivateKey [private].query attacker(InvpkINVPA_a).
free InvskINVSM_M: PrivateKey [private].query attacker(InvskINVSM_M).
free InvhkINVHKM_M: PrivateKey [private].query attacker(InvhkINVHKM_M).
free InvpkINVPM_M: PrivateKey [private].query attacker(InvpkINVPM_M).
free InvskINVSC_C: PrivateKey [private].query attacker(InvskINVSC_C).
free InvhkINVHKC_C: PrivateKey [private].query attacker(InvhkINVHKC_C).
free InvpkINVPC_C: PrivateKey [private].query attacker(InvpkINVPC_C).
free CCNCA_Ca: Crypto_ByteArray [private].query attacker(CCNCA_Ca).
free PRICE_CMa: Crypto_ByteArray [private].query attacker(PRICE_CMa).
free AUTH_CMa: Crypto_ByteArray [private].query attacker(AUTH_CMa).
free DESC_CM: Crypto_ByteArray [private].query attacker(DESC_CM).
event witness_wauth_CCNCA_aC(Crypto_ByteArray,Agent,Agent).
event seen_SQNx3_M(Crypto_ByteArray,Agent).
event witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_CM(Crypto_ByteArray,Agent,Agent).
event witness_wauth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_aM(Crypto_ByteArray,Agent,Agent).
event seen_SQNx4_C(Crypto_ByteArray,Agent).
event witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_MC(Crypto_ByteArray,Agent,Agent).
event witness_auth_AUTH_Ma(Crypto_ByteArray,Agent,Agent).
event witness_auth_AUTH_Ca(Crypto_ByteArray,Agent,Agent).
event witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ma(bitstring,Agent,Agent).
event witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ca(bitstring,Agent,Agent).
event seen_SQNx8_a(Crypto_ByteArray,Agent).
event seen_SQNx9_M(Crypto_ByteArray,Agent).
event seen_SQNx9_C(Crypto_ByteArray,Agent).
event request_auth_AUTH_Ca(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; inj-event(request_auth_AUTH_Ca(m,a1,a2)) ==> inj-event(witness_auth_AUTH_Ca(m,a1,a2))
|| inj-event(seen_SQNx3_M(sqn,a1)) && event(witness_auth_AUTH_Ca(m,a1,a2))
|| inj-event(seen_SQNx4_C(sqn,a1)) && event(witness_auth_AUTH_Ca(m,a1,a2))
|| inj-event(seen_SQNx8_a(sqn,a1)) && event(witness_auth_AUTH_Ca(m,a1,a2))
|| inj-event(seen_SQNx9_M(sqn,a1)) && event(witness_auth_AUTH_Ca(m,a1,a2))
|| inj-event(seen_SQNx9_C(sqn,a1)) && event(witness_auth_AUTH_Ca(m,a1,a2)).
event request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ca(bitstring,Agent,Agent).
query m: bitstring, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; inj-event(request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ca(m,a1,a2)) ==> inj-event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ca(m,a1,a2))
|| inj-event(seen_SQNx3_M(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ca(m,a1,a2))
|| inj-event(seen_SQNx4_C(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ca(m,a1,a2))
|| inj-event(seen_SQNx8_a(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ca(m,a1,a2))
|| inj-event(seen_SQNx9_M(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ca(m,a1,a2))
|| inj-event(seen_SQNx9_C(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ca(m,a1,a2)).
event request_auth_AUTH_Ma(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; inj-event(request_auth_AUTH_Ma(m,a1,a2)) ==> inj-event(witness_auth_AUTH_Ma(m,a1,a2))
|| inj-event(seen_SQNx3_M(sqn,a1)) && event(witness_auth_AUTH_Ma(m,a1,a2))
|| inj-event(seen_SQNx4_C(sqn,a1)) && event(witness_auth_AUTH_Ma(m,a1,a2))
|| inj-event(seen_SQNx8_a(sqn,a1)) && event(witness_auth_AUTH_Ma(m,a1,a2))
|| inj-event(seen_SQNx9_M(sqn,a1)) && event(witness_auth_AUTH_Ma(m,a1,a2))
|| inj-event(seen_SQNx9_C(sqn,a1)) && event(witness_auth_AUTH_Ma(m,a1,a2)).
event request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ma(bitstring,Agent,Agent).
query m: bitstring, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; inj-event(request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ma(m,a1,a2)) ==> inj-event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ma(m,a1,a2))
|| inj-event(seen_SQNx3_M(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ma(m,a1,a2))
|| inj-event(seen_SQNx4_C(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ma(m,a1,a2))
|| inj-event(seen_SQNx8_a(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ma(m,a1,a2))
|| inj-event(seen_SQNx9_M(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ma(m,a1,a2))
|| inj-event(seen_SQNx9_C(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ma(m,a1,a2)).
event wrequest_wauth_CCNCA_aC(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; event(wrequest_wauth_CCNCA_aC(m,a1,a2)) ==> event(witness_wauth_CCNCA_aC(m,a1,a2)).
event wrequest_wauth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_aM(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; event(wrequest_wauth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_aM(m,a1,a2)) ==> event(witness_wauth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_aM(m,a1,a2)).
event request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_CM(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; inj-event(request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_CM(m,a1,a2)) ==> inj-event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_CM(m,a1,a2))
|| inj-event(seen_SQNx3_M(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_CM(m,a1,a2))
|| inj-event(seen_SQNx4_C(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_CM(m,a1,a2))
|| inj-event(seen_SQNx8_a(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_CM(m,a1,a2))
|| inj-event(seen_SQNx9_M(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_CM(m,a1,a2))
|| inj-event(seen_SQNx9_C(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_CM(m,a1,a2)).
event request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_MC(Crypto_ByteArray,Agent,Agent).
query m: Crypto_ByteArray, a1: Agent, a2: Agent, sqn: Crypto_ByteArray; inj-event(request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_MC(m,a1,a2)) ==> inj-event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_MC(m,a1,a2))
|| inj-event(seen_SQNx3_M(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_MC(m,a1,a2))
|| inj-event(seen_SQNx4_C(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_MC(m,a1,a2))
|| inj-event(seen_SQNx8_a(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_MC(m,a1,a2))
|| inj-event(seen_SQNx9_M(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_MC(m,a1,a2))
|| inj-event(seen_SQNx9_C(sqn,a1)) && event(witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_MC(m,a1,a2)).

(* Process reachability queries *)
event end(Agent).
query event(end(C)).
query event(end(M)).
query event(end(a)).

(* Process a *)
let process_a(C: Agent,M: Agent,pkM: PublicKey,skC: PublicKey,skM: PublicKey,Invpka: PrivateKey,Invska: PrivateKey,Invhka: PrivateKey,honestC: Agent,honestM: Agent) =
(* 	C -> M, @(C|M|M): [ccn(C,a):a],[Desc:M] *)
(* 	M -> C, @(M|C|C): TID,[Price,TID,[ccn(C,a):a],[Desc:M]] *)
(* 	C -> M, (C|a|a): Price,TID,ccn(C,a),[ccn(C,a):a],[Price,TID,[ccn(C,a):a],[Desc:M]] *)
(* 	M -> a, ^(C|a|a): Price,TID,ccn(C,a),[ccn(C,a):a],[Price,TID,[ccn(C,a):a],[Desc:M]] *)
in(ch,VAR_A_R5: SealedPair);
let VAR_A_DDAR5INVPASC: bitstring = verify_sk(bitstring2SignedObject(dec_pk(VAR_A_R5,Invpka)),skC) in 
if a = proj_1_7_AgeBytBytBytBytSePByt_Agent(VAR_A_DDAR5INVPASC) then
let VAR_A_DJ67ADDAR5INVPASCINVHKA: SecretKey = bitstring2SecretKey(dec_hk(proj_6_7_AgeBytBytBytBytSePByt_SealedPair(VAR_A_DDAR5INVPASC),Invhka)) in 
let VAR_A_J47ADDAR5INVPASC: Crypto_ByteArray = proj_4_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR5INVPASC) in 
let VAR_A_J57ADDAR5INVPASC: Crypto_ByteArray = proj_5_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR5INVPASC) in 
if VAR_A_J57ADDAR5INVPASC = hmac(Crypto_ByteArray2bitstring(VAR_A_J47ADDAR5INVPASC),VAR_A_DJ67ADDAR5INVPASCINVHKA) then
let VAR_A_MCCNCAADJ67ADDAR5INVPASCINVHKA: Crypto_ByteArray = hmac(Crypto_ByteArray2bitstring(ccn(C,a)),VAR_A_DJ67ADDAR5INVPASCINVHKA) in 
if VAR_A_J57ADDAR5INVPASC = VAR_A_MCCNCAADJ67ADDAR5INVPASCINVHKA then
if ccn(C,a) = VAR_A_J47ADDAR5INVPASC then
new Auth: Crypto_ByteArray;
event witness_auth_AUTH_Ma(Auth,M,a);
event witness_auth_AUTH_Ca(Auth,C,a);
event witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ma((proj_7_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR5INVPASC),Auth),M,a);
event witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ca((proj_7_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR5INVPASC),Auth),C,a);
out(ch,empty);
(* 	M -> a, @(M|a|a): Price,TID,[Desc:M],[Price,TID,[ccn(C,a):a],[Desc:M]] *)
in(ch,VAR_A_R7: SealedPair);
let VAR_A_DDAR7INVPASM: bitstring = verify_sk(bitstring2SignedObject(dec_pk(VAR_A_R7,Invpka)),skM) in 
event seen_SQNx8_a(proj_2_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR7INVPASM),a);
if a = proj_1_7_AgeBytBytBytBytSePByt_Agent(VAR_A_DDAR7INVPASM) then
let VAR_A_J27ADDAR5INVPASC: Crypto_ByteArray = proj_2_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR5INVPASC) in 
let VAR_A_J37ADDAR7INVPASM: Crypto_ByteArray = proj_3_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR7INVPASM) in 
if VAR_A_J37ADDAR7INVPASM = VAR_A_J27ADDAR5INVPASC then
let VAR_A_J37ADDAR5INVPASC: Crypto_ByteArray = proj_3_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR5INVPASC) in 
let VAR_A_J47ADDAR7INVPASM: Crypto_ByteArray = proj_4_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR7INVPASM) in 
if VAR_A_J47ADDAR7INVPASM = VAR_A_J37ADDAR5INVPASC then
let VAR_A_J57ADDAR7INVPASM: Crypto_ByteArray = proj_5_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR7INVPASM) in 
let VAR_A_J77ADDAR7INVPASM: Crypto_ByteArray = proj_7_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR7INVPASM) in 
if VAR_A_J77ADDAR7INVPASM = hash((VAR_A_J37ADDAR7INVPASM,VAR_A_J47ADDAR7INVPASM,VAR_A_J57ADDAR5INVPASC,VAR_A_J57ADDAR7INVPASM)) then
if proj_7_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR5INVPASC) = VAR_A_J77ADDAR7INVPASM then
(* 	a -> M, @(a|M,C|M): Auth,TID,[Price,TID,[ccn(C,a):a],[Desc:M]] *)
new SQNx9: Crypto_ByteArray;
out(ch,enc_pk(SignedObject2bitstring(sign_sk((Auth,VAR_A_J47ADDAR7INVPASM,hash((VAR_A_J37ADDAR7INVPASM,VAR_A_J47ADDAR7INVPASM,VAR_A_MCCNCAADJ67ADDAR5INVPASCINVHKA,VAR_A_J57ADDAR7INVPASM)),SQNx9,M,C),Invska)),pkM));
(* 	M -> C, ^@(a|M,C|C): Auth,TID,[Price,TID,[ccn(C,a):a],[Desc:M]] *)
out(ch,encS(PrivateKey2bitstring(InvskINVSA_a),fun_goal_INVSA_a(Invska)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKA_a),fun_goal_INVHKA_a(Invhka)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPA_a),fun_goal_INVPA_a(Invpka)));
(if C = honestC then event wrequest_wauth_CCNCA_aC(ccn(C,a),a,C)) |
(if M = honestM then event wrequest_wauth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_aM(proj_7_7_AgeBytBytBytBytSePByt_Crypto_ByteArray(VAR_A_DDAR5INVPASC),a,M)) |
(if C = honestC && M = honestM then out(ch,encS(Crypto_ByteArray2bitstring(PRICE_CMa),fun_goal_PRICE_CMa(VAR_A_J37ADDAR7INVPASM)))) |
(if C = honestC && M = honestM then out(ch,encS(Crypto_ByteArray2bitstring(AUTH_CMa),fun_goal_AUTH_CMa(Auth)))) |
(if C = honestC then out(ch,encS(Crypto_ByteArray2bitstring(CCNCA_Ca),fun_goal_CCNCA_Ca(ccn(C,a))))) |
event end(a);
0.

(* Process M *)
let process_M(C: Agent,M: Agent,pkC: PublicKey,pka: PublicKey,skC: PublicKey,ska: PublicKey,hkM: PublicKey,InvpkM: PrivateKey,InvskM: PrivateKey,InvhkM: PrivateKey,honestC: Agent) =
in(ch_priv_M_C,VAR_M_R0: bitstring) [precise];
let VAR_M_J22MR0: Crypto_ByteArray = proj_2_2_BytByt_Crypto_ByteArray(VAR_M_R0) in 
if VAR_M_J22MR0 = VAR_M_J22MR0 then
out(ch_priv_M_C,empty);
(* 	C -> M, @(C|M|M): [ccn(C,a):a],[Desc:M] *)
in(ch,VAR_M_R2: SealedPair);
let VAR_M_DDMR2INVPMSC: bitstring = verify_sk(bitstring2SignedObject(dec_pk(VAR_M_R2,InvpkM)),skC) in 
event seen_SQNx3_M(proj_5_6_BytSePBytSePBytAge_Crypto_ByteArray(VAR_M_DDMR2INVPMSC),M);
if M = proj_6_6_BytSePBytSePBytAge_Agent(VAR_M_DDMR2INVPMSC) then
let VAR_M_J36MDDMR2INVPMSC: Crypto_ByteArray = proj_3_6_BytSePBytSePBytAge_Crypto_ByteArray(VAR_M_DDMR2INVPMSC) in 
let VAR_M_MMJ22MR0DJ46MDDMR2INVPMSCINVHKM: Crypto_ByteArray = hmac(Crypto_ByteArray2bitstring(VAR_M_J22MR0),bitstring2SecretKey(dec_hk(proj_4_6_BytSePBytSePBytAge_SealedPair(VAR_M_DDMR2INVPMSC),InvhkM))) in 
if VAR_M_J36MDDMR2INVPMSC = VAR_M_MMJ22MR0DJ46MDDMR2INVPMSCINVHKM then
(* 	M -> C, @(M|C|C): TID,[Price,TID,[ccn(C,a):a],[Desc:M]] *)
new TID: Crypto_ByteArray;
event witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_CM(hash((proj_1_2_BytByt_Crypto_ByteArray(VAR_M_R0),TID,proj_1_6_BytSePBytSePBytAge_Crypto_ByteArray(VAR_M_DDMR2INVPMSC),VAR_M_MMJ22MR0DJ46MDDMR2INVPMSCINVHKM)),C,M);
event witness_wauth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_aM(hash((proj_1_2_BytByt_Crypto_ByteArray(VAR_M_R0),TID,proj_1_6_BytSePBytSePBytAge_Crypto_ByteArray(VAR_M_DDMR2INVPMSC),VAR_M_MMJ22MR0DJ46MDDMR2INVPMSCINVHKM)),a,M);
new SQNx4: Crypto_ByteArray;
let VAR_M_J12MR0: Crypto_ByteArray = proj_1_2_BytByt_Crypto_ByteArray(VAR_M_R0) in 
let VAR_M_HJ12MR0TIDJ16MDDMR2INVPMSCMMMJ22MR0DJ46MDDMR2INVPMSCINVHKM: Crypto_ByteArray = hash((VAR_M_J12MR0,TID,proj_1_6_BytSePBytSePBytAge_Crypto_ByteArray(VAR_M_DDMR2INVPMSC),VAR_M_MMJ22MR0DJ46MDDMR2INVPMSCINVHKM)) in 
out(ch,enc_pk(SignedObject2bitstring(sign_sk((C,SQNx4,TID,VAR_M_HJ12MR0TIDJ16MDDMR2INVPMSCMMMJ22MR0DJ46MDDMR2INVPMSCINVHKM),InvskM)),pkC));
(* 	C -> M, (C|a|a): Price,TID,ccn(C,a),[ccn(C,a):a],[Price,TID,[ccn(C,a):a],[Desc:M]] *)
in(ch,VAR_M_R4: SealedPair);
if VAR_M_R4 = VAR_M_R4 then
(* 	M -> a, ^(C|a|a): Price,TID,ccn(C,a),[ccn(C,a):a],[Price,TID,[ccn(C,a):a],[Desc:M]] *)
out(ch,VAR_M_R4);
in(ch,VAR_M_R6: Crypto_ByteArray);
if empty = VAR_M_R6 then
(* 	M -> a, @(M|a|a): Price,TID,[Desc:M],[Price,TID,[ccn(C,a):a],[Desc:M]] *)
new SQNx8: Crypto_ByteArray;
out(ch,enc_pk(SignedObject2bitstring(sign_sk((a,SQNx8,VAR_M_J12MR0,TID,VAR_M_MMJ22MR0DJ46MDDMR2INVPMSCINVHKM,enc_hk(SecretKey2bitstring(bitstring2SecretKey(dec_hk(proj_4_6_BytSePBytSePBytAge_SealedPair(VAR_M_DDMR2INVPMSC),InvhkM))),hkM),VAR_M_HJ12MR0TIDJ16MDDMR2INVPMSCMMMJ22MR0DJ46MDDMR2INVPMSCINVHKM),InvskM)),pka));
(* 	a -> M, @(a|M,C|M): Auth,TID,[Price,TID,[ccn(C,a):a],[Desc:M]] *)
in(ch,VAR_M_R8: SealedPair);
let VAR_M_DDMR8INVPMSA: bitstring = verify_sk(bitstring2SignedObject(dec_pk(VAR_M_R8,InvpkM)),ska) in 
event seen_SQNx9_M(proj_4_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_M_DDMR8INVPMSA),M);
if C = proj_6_6_BytBytBytBytAgeAge_Agent(VAR_M_DDMR8INVPMSA) then
if M = proj_5_6_BytBytBytBytAgeAge_Agent(VAR_M_DDMR8INVPMSA) then
if TID = proj_2_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_M_DDMR8INVPMSA) then
if proj_3_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_M_DDMR8INVPMSA) = hash((VAR_M_J12MR0,TID,proj_1_6_BytSePBytSePBytAge_Crypto_ByteArray(VAR_M_DDMR2INVPMSC),VAR_M_J36MDDMR2INVPMSC)) then
(* 	M -> C, ^@(a|M,C|C): Auth,TID,[Price,TID,[ccn(C,a):a],[Desc:M]] *)
out(ch,enc_pk(SignedObject2bitstring(bitstring2SignedObject(dec_pk(VAR_M_R8,InvpkM))),pkC));
event request_auth_AUTH_Ma(proj_1_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_M_DDMR8INVPMSA),M,a);
event request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ma((VAR_M_HJ12MR0TIDJ16MDDMR2INVPMSCMMMJ22MR0DJ46MDDMR2INVPMSCINVHKM,proj_1_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_M_DDMR8INVPMSA)),M,a);
out(ch,encS(PrivateKey2bitstring(InvskINVSM_M),fun_goal_INVSM_M(InvskM)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKM_M),fun_goal_INVHKM_M(InvhkM)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPM_M),fun_goal_INVPM_M(InvpkM)));
(if C = honestC then event request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_MC(VAR_M_HJ12MR0TIDJ16MDDMR2INVPMSCMMMJ22MR0DJ46MDDMR2INVPMSCINVHKM,M,C)) |
(if C = honestC then out(ch,encS(Crypto_ByteArray2bitstring(PRICE_CMa),fun_goal_PRICE_CMa(VAR_M_J12MR0)))) |
(if C = honestC then out(ch,encS(Crypto_ByteArray2bitstring(AUTH_CMa),fun_goal_AUTH_CMa(proj_1_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_M_DDMR8INVPMSA))))) |
(if C = honestC then out(ch,encS(Crypto_ByteArray2bitstring(DESC_CM),fun_goal_DESC_CM(VAR_M_J22MR0)))) |
event end(M);
0.

(* Process C *)
let process_C(C: Agent,M: Agent,pkM: PublicKey,pka: PublicKey,skM: PublicKey,ska: PublicKey,hkM: PublicKey,hka: PublicKey,InvpkC: PrivateKey,InvskC: PrivateKey,InvhkC: PrivateKey,honestM: Agent) =
event witness_wauth_CCNCA_aC(ccn(C,a),a,C);
new Desc: Crypto_ByteArray;
new Price: Crypto_ByteArray;
out(ch_priv_M_C,(Price,Desc));
in(ch_priv_M_C,VAR_C_R1: Crypto_ByteArray) [precise];
if empty = VAR_C_R1 then
(* 	C -> M, @(C|M|M): [ccn(C,a):a],[Desc:M] *)
new Hx3MDesc: SecretKey;
new Hx3accnCa: SecretKey;
new SQNx3: Crypto_ByteArray;
let VAR_C_EHX3ACCNCAHKA: SealedPair = enc_hk(SecretKey2bitstring(Hx3accnCa),hka) in 
let VAR_C_MCCNCAHX3ACCNCA: Crypto_ByteArray = hmac(Crypto_ByteArray2bitstring(ccn(C,a)),Hx3accnCa) in 
let VAR_C_MDESCHX3MDESC: Crypto_ByteArray = hmac(Crypto_ByteArray2bitstring(Desc),Hx3MDesc) in 
out(ch,enc_pk(SignedObject2bitstring(sign_sk((VAR_C_MCCNCAHX3ACCNCA,VAR_C_EHX3ACCNCAHKA,VAR_C_MDESCHX3MDESC,enc_hk(SecretKey2bitstring(Hx3MDesc),hkM),SQNx3,M),InvskC)),pkM));
(* 	M -> C, @(M|C|C): TID,[Price,TID,[ccn(C,a):a],[Desc:M]] *)
in(ch,VAR_C_R3: SealedPair);
let VAR_C_DDCR3INVPCSM: bitstring = verify_sk(bitstring2SignedObject(dec_pk(VAR_C_R3,InvpkC)),skM) in 
event seen_SQNx4_C(proj_2_4_AgeBytBytByt_Crypto_ByteArray(VAR_C_DDCR3INVPCSM),C);
if C = proj_1_4_AgeBytBytByt_Agent(VAR_C_DDCR3INVPCSM) then
let VAR_C_J34CDDCR3INVPCSM: Crypto_ByteArray = proj_3_4_AgeBytBytByt_Crypto_ByteArray(VAR_C_DDCR3INVPCSM) in 
let VAR_C_HPRICEJ34CDDCR3INVPCSMCMCCNCAHX3ACCNCACMDESCHX3MDESC: Crypto_ByteArray = hash((Price,VAR_C_J34CDDCR3INVPCSM,VAR_C_MCCNCAHX3ACCNCA,VAR_C_MDESCHX3MDESC)) in 
let VAR_C_J44CDDCR3INVPCSM: Crypto_ByteArray = proj_4_4_AgeBytBytByt_Crypto_ByteArray(VAR_C_DDCR3INVPCSM) in 
if VAR_C_J44CDDCR3INVPCSM = VAR_C_HPRICEJ34CDDCR3INVPCSMCMCCNCAHX3ACCNCACMDESCHX3MDESC then
(* 	C -> M, (C|a|a): Price,TID,ccn(C,a),[ccn(C,a):a],[Price,TID,[ccn(C,a):a],[Desc:M]] *)
event witness_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_MC(VAR_C_HPRICEJ34CDDCR3INVPCSMCMCCNCAHX3ACCNCACMDESCHX3MDESC,M,C);
out(ch,enc_pk(SignedObject2bitstring(sign_sk((a,Price,VAR_C_J34CDDCR3INVPCSM,ccn(C,a),VAR_C_MCCNCAHX3ACCNCA,VAR_C_EHX3ACCNCAHKA,VAR_C_HPRICEJ34CDDCR3INVPCSMCMCCNCAHX3ACCNCACMDESCHX3MDESC),InvskC)),pka));
(* 	M -> a, ^(C|a|a): Price,TID,ccn(C,a),[ccn(C,a):a],[Price,TID,[ccn(C,a):a],[Desc:M]] *)
(* 	M -> a, @(M|a|a): Price,TID,[Desc:M],[Price,TID,[ccn(C,a):a],[Desc:M]] *)
(* 	a -> M, @(a|M,C|M): Auth,TID,[Price,TID,[ccn(C,a):a],[Desc:M]] *)
(* 	M -> C, ^@(a|M,C|C): Auth,TID,[Price,TID,[ccn(C,a):a],[Desc:M]] *)
in(ch,VAR_C_R9: SealedPair);
let VAR_C_DDCR9INVPCSA: bitstring = verify_sk(bitstring2SignedObject(dec_pk(VAR_C_R9,InvpkC)),ska) in 
event seen_SQNx9_C(proj_4_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_C_DDCR9INVPCSA),C);
if C = proj_6_6_BytBytBytBytAgeAge_Agent(VAR_C_DDCR9INVPCSA) then
if M = proj_5_6_BytBytBytBytAgeAge_Agent(VAR_C_DDCR9INVPCSA) then
let VAR_C_J26CDDCR9INVPCSA: Crypto_ByteArray = proj_2_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_C_DDCR9INVPCSA) in 
if VAR_C_J34CDDCR3INVPCSM = VAR_C_J26CDDCR9INVPCSA then
let VAR_C_J36CDDCR9INVPCSA: Crypto_ByteArray = proj_3_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_C_DDCR9INVPCSA) in 
if VAR_C_J36CDDCR9INVPCSA = hash((Price,VAR_C_J34CDDCR3INVPCSM,VAR_C_MCCNCAHX3ACCNCA,VAR_C_MDESCHX3MDESC)) then
if VAR_C_J44CDDCR3INVPCSM = VAR_C_J36CDDCR9INVPCSA then
event request_auth_AUTH_Ca(proj_1_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_C_DDCR9INVPCSA),C,a);
event request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESCAUTH_Ca((VAR_C_HPRICEJ34CDDCR3INVPCSMCMCCNCAHX3ACCNCACMDESCHX3MDESC,proj_1_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_C_DDCR9INVPCSA)),C,a);
out(ch,encS(PrivateKey2bitstring(InvskINVSC_C),fun_goal_INVSC_C(InvskC)));
out(ch,encS(PrivateKey2bitstring(InvhkINVHKC_C),fun_goal_INVHKC_C(InvhkC)));
out(ch,encS(PrivateKey2bitstring(InvpkINVPC_C),fun_goal_INVPC_C(InvpkC)));
out(ch,encS(Crypto_ByteArray2bitstring(CCNCA_Ca),fun_goal_CCNCA_Ca(ccn(C,a))));
(if M = honestM then event request_auth_HPRICETIDMCCNCAHX3ACCNCAMDESCHX3MDESC_CM(VAR_C_HPRICEJ34CDDCR3INVPCSMCMCCNCAHX3ACCNCACMDESCHX3MDESC,C,M)) |
(if M = honestM then out(ch,encS(Crypto_ByteArray2bitstring(PRICE_CMa),fun_goal_PRICE_CMa(Price)))) |
(if M = honestM then out(ch,encS(Crypto_ByteArray2bitstring(AUTH_CMa),fun_goal_AUTH_CMa(proj_1_6_BytBytBytBytAgeAge_Crypto_ByteArray(VAR_C_DDCR9INVPCSA))))) |
(if M = honestM then out(ch,encS(Crypto_ByteArray2bitstring(DESC_CM),fun_goal_DESC_CM(Desc)))) |
event end(C);
0.

(* Process Rev_3KP *)
let process_Rev_3KP(C: Agent,M: Agent,pka: PublicKey,ska: PublicKey,hka: PublicKey,Invpka: PrivateKey,Invska: PrivateKey,Invhka: PrivateKey) =
(!in(ch,XC: Agent);
in(ch,XM: Agent);
process_a(XC,XM,pk(priv_pk(XM)),sk(priv_sk(XC)),sk(priv_sk(XM)),Invpka,Invska,Invhka,C,M)) |
(!in(ch,XC: Agent);
process_M(XC,M,pk(priv_pk(XC)),pka,sk(priv_sk(XC)),ska,hk(priv_hk(M)),priv_pk(M),priv_sk(M),priv_hk(M),C)) |
(!in(ch,XM: Agent);
process_C(C,XM,pk(priv_pk(XM)),pka,sk(priv_sk(XM)),ska,hk(priv_hk(XM)),hka,priv_pk(C),priv_sk(C),priv_hk(C),M)).

(* Initialisation process *)
process
(!new X: Agent;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,ccn(X,a))
) | (
out(ch,C);
out(ch,M);
out(ch,pk(priv_pk(C)));
out(ch,pk(priv_pk(M)));
out(ch,sk(priv_sk(C)));
out(ch,sk(priv_sk(M)));
out(ch,hk(priv_hk(C)));
out(ch,hk(priv_hk(M)));
new Invpka: PrivateKey;
new Invska: PrivateKey;
new Invhka: PrivateKey;
let pka = pk(Invpka) in out(ch,pka);
let hka = hk(Invhka) in out(ch,hka);
let ska = sk(Invska) in out(ch,ska);
process_Rev_3KP(C,M,pka,ska,hka,Invpka,Invska,Invhka) | process_Rev_3KP(M,C,pka,ska,hka,Invpka,Invska,Invhka))