/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-04-24 16:33:53.2745252 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package sso;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class SSO_ROLE_C extends AnB_Protocol<SSO_Steps,SSO_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	private static Crypto_ByteArray empty = new Crypto_ByteArray("empty".getBytes());
	
	// local vars
	private Crypto_ByteArray URI = null;
	private AnBx_Params VAR_C_R1 = null;
	private Crypto_ByteArray VAR_C_J45CR1 = null;
	private AnBx_Params VAR_C_R3 = null;
	private SignedObject VAR_C_J12CR3 = null;
	private Crypto_ByteArray VAR_C_R5 = null;
	
	
	public SSO_ROLE_C(SSO_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
        };

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		SSO_ROLE_C.sessions = sessions;
		
		AnB_Session ROLE_C_channel_ROLE_SP_Client_Secure = lbs.get("ROLE_C_channel_ROLE_SP_Client_Secure");
        AnB_Session ROLE_C_channel_ROLE_idp_Client_Secure = lbs.get("ROLE_C_channel_ROLE_idp_Client_Secure");
        
		init();
		
        ROLE_C_channel_ROLE_SP_Client_Secure.Open();
		ROLE_C_channel_ROLE_idp_Client_Secure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_C_channel_ROLE_SP_Client_Secure, SSO_Steps.STEP_0);
					executeStep(ROLE_C_channel_ROLE_SP_Client_Secure, SSO_Steps.STEP_1);
					executeStep(ROLE_C_channel_ROLE_idp_Client_Secure, SSO_Steps.STEP_2);
					executeStep(ROLE_C_channel_ROLE_idp_Client_Secure, SSO_Steps.STEP_3);
					executeStep(ROLE_C_channel_ROLE_SP_Client_Secure, SSO_Steps.STEP_4);
					executeStep(ROLE_C_channel_ROLE_SP_Client_Secure, SSO_Steps.STEP_5);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_C_channel_ROLE_SP_Client_Secure.Close();
		ROLE_C_channel_ROLE_idp_Client_Secure.Close();
		
	};

	protected void executeStep(AnB_Session s, SSO_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_0:
			
			URI = s.getNonce();
			
			s.Send(new AnBx_Params(aliases.get("ROLE_C"),aliases.get("ROLE_SP"),URI));

			break;
		
		case STEP_1:
			
			VAR_C_R1 = (AnBx_Params) s.Receive();
			eqCheck("1.1",aliases.get("ROLE_C"),(String) VAR_C_R1.getValue(0));
			eqCheck("1.2",aliases.get("ROLE_SP"),(String) VAR_C_R1.getValue(2));
			eqCheck("1.3",aliases.get("ROLE_idp"),(String) VAR_C_R1.getValue(1));
			eqCheck("1.4",URI,(Crypto_ByteArray) VAR_C_R1.getValue(4));

			break;
		
		case STEP_2:
			
			VAR_C_J45CR1 = (Crypto_ByteArray) VAR_C_R1.getValue(3);
			s.Send(new AnBx_Params(aliases.get("ROLE_C"),aliases.get("ROLE_idp"),aliases.get("ROLE_SP"),VAR_C_J45CR1,URI));

			break;
		
		case STEP_3:
			
			VAR_C_R3 = (AnBx_Params) s.Receive();
			wffCheck("3.1",VAR_C_J45CR1);
			eqCheck("3.2",URI,(Crypto_ByteArray) VAR_C_R3.getValue(1));
			VAR_C_J12CR3 = (SignedObject) VAR_C_R3.getValue(0);
			eqCheck("3.3",(AnBx_Params) s.verify(VAR_C_J12CR3,aliases.get("ROLE_idp")),new AnBx_Params(aliases.get("ROLE_C"),aliases.get("ROLE_idp")));

			break;
		
		case STEP_4:
			
			s.Send(new AnBx_Params(VAR_C_J12CR3,URI));

			break;
		
		case STEP_5:
			
			VAR_C_R5 = (Crypto_ByteArray) s.Receive();
			wffCheck("5.1",VAR_C_R5);

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	

	
	

}