/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-04-24 16:42:51.214577 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package sso_intr;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;
import java.util.Random;

public final class SSO_intr_ROLE_intr extends AnB_Protocol<SSO_intr_Steps,SSO_intr_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	private static Crypto_ByteArray empty = new Crypto_ByteArray("empty".getBytes());
	
	// local vars
	private AnBx_Params VAR_INTR_R0 = null;
	private Crypto_ByteArray VAR_INTR_J33INTRR0 = null;
	private AnBx_Params VAR_INTR_R2 = null;
	private Crypto_ByteArray VAR_INTR_J55INTRR2 = null;
	private Crypto_ByteArray VAR_INTR_J45INTRR2 = null;
	private AnBx_Params VAR_INTR_R4 = null;
	private Crypto_ByteArray VAR_INTR_J45INTRR4 = null;
	private Crypto_ByteArray VAR_INTR_J55INTRR4 = null;
	private AnBx_Params VAR_INTR_R6 = null;
	private SignedObject VAR_INTR_J12INTRR6 = null;
	private AnBx_Params VAR_INTR_R8 = null;
	private SignedObject VAR_INTR_J12INTRR8 = null;
	private Crypto_ByteArray VAR_INTR_R10 = null;
	
	private Crypto_ByteArray VAR_attack = null;
	
	
	public SSO_intr_ROLE_intr(SSO_intr_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
        };

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		SSO_intr_ROLE_intr.sessions = sessions;
		
		AnB_Session ROLE_intr_channel_ROLE_C_Server_Secure = lbs.get("ROLE_intr_channel_ROLE_C_Server_Secure");
        AnB_Session ROLE_intr_channel_ROLE_SP_Client_Secure = lbs.get("ROLE_intr_channel_ROLE_SP_Client_Secure");
        AnB_Session ROLE_intr_channel_ROLE_idp_Client_Secure = lbs.get("ROLE_intr_channel_ROLE_idp_Client_Secure");
        
		init();
		
        ROLE_intr_channel_ROLE_C_Server_Secure.Open();
		ROLE_intr_channel_ROLE_SP_Client_Secure.Open();
		ROLE_intr_channel_ROLE_idp_Client_Secure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_intr_channel_ROLE_C_Server_Secure, SSO_intr_Steps.STEP_0);
					executeStep(ROLE_intr_channel_ROLE_SP_Client_Secure, SSO_intr_Steps.STEP_1);
					executeStep(ROLE_intr_channel_ROLE_SP_Client_Secure, SSO_intr_Steps.STEP_2);
					executeStep(ROLE_intr_channel_ROLE_C_Server_Secure, SSO_intr_Steps.STEP_3);
					executeStep(ROLE_intr_channel_ROLE_C_Server_Secure, SSO_intr_Steps.STEP_4);
					executeStep(ROLE_intr_channel_ROLE_idp_Client_Secure, SSO_intr_Steps.STEP_5);
					executeStep(ROLE_intr_channel_ROLE_idp_Client_Secure, SSO_intr_Steps.STEP_6);
					executeStep(ROLE_intr_channel_ROLE_C_Server_Secure, SSO_intr_Steps.STEP_7);
					executeStep(ROLE_intr_channel_ROLE_C_Server_Secure, SSO_intr_Steps.STEP_8);
					executeStep(ROLE_intr_channel_ROLE_SP_Client_Secure, SSO_intr_Steps.STEP_9);
					executeStep(ROLE_intr_channel_ROLE_SP_Client_Secure, SSO_intr_Steps.STEP_10);
					executeStep(ROLE_intr_channel_ROLE_C_Server_Secure, SSO_intr_Steps.STEP_11);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_intr_channel_ROLE_C_Server_Secure.Close();
		ROLE_intr_channel_ROLE_SP_Client_Secure.Close();
		ROLE_intr_channel_ROLE_idp_Client_Secure.Close();
		
	};

	protected void executeStep(AnB_Session s, SSO_intr_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_0:
			
			noteqCheck("0.2",aliases.get("ROLE_intr"),aliases.get("ROLE_C"));
			noteqCheck("0.4",aliases.get("ROLE_intr"),aliases.get("ROLE_SP"));
			VAR_INTR_R0 = (AnBx_Params) s.Receive();
			eqCheck("0.1",aliases.get("ROLE_C"),(String) VAR_INTR_R0.getValue(0));
			eqCheck("0.2",aliases.get("ROLE_SP"),(String) VAR_INTR_R0.getValue(1));

			break;
		
		case STEP_1:
			
			VAR_INTR_J33INTRR0 = (Crypto_ByteArray) VAR_INTR_R0.getValue(2);
			s.Send(new AnBx_Params(aliases.get("ROLE_C"),aliases.get("ROLE_SP"),VAR_INTR_J33INTRR0));

			break;
		
		case STEP_2:
			
			VAR_INTR_R2 = (AnBx_Params) s.Receive();
			eqCheck("2.1",aliases.get("ROLE_C"),(String) VAR_INTR_R2.getValue(0));
			eqCheck("2.2",aliases.get("ROLE_SP"),(String) VAR_INTR_R2.getValue(2));
			eqCheck("2.3",aliases.get("ROLE_idp"),(String) VAR_INTR_R2.getValue(1));
			VAR_INTR_J55INTRR2 = (Crypto_ByteArray) VAR_INTR_R2.getValue(4);
			eqCheck("2.4",VAR_INTR_J55INTRR2,VAR_INTR_J33INTRR0);

			break;
		
		case STEP_3:
			
			VAR_INTR_J45INTRR2 = (Crypto_ByteArray) VAR_INTR_R2.getValue(3);
			s.Send(new AnBx_Params(aliases.get("ROLE_C"),aliases.get("ROLE_idp"),aliases.get("ROLE_SP"),VAR_INTR_J45INTRR2,VAR_INTR_J55INTRR2));

			break;
		
		case STEP_4:
			
			VAR_INTR_R4 = (AnBx_Params) s.Receive();
			eqCheck("4.1",aliases.get("ROLE_C"),(String) VAR_INTR_R4.getValue(0));
			eqCheck("4.2",aliases.get("ROLE_SP"),(String) VAR_INTR_R4.getValue(2));
			eqCheck("4.3",aliases.get("ROLE_idp"),(String) VAR_INTR_R4.getValue(1));
			VAR_INTR_J45INTRR4 = (Crypto_ByteArray) VAR_INTR_R4.getValue(3);
			eqCheck("4.4",VAR_INTR_J45INTRR4,VAR_INTR_J45INTRR2);
			VAR_INTR_J55INTRR4 = (Crypto_ByteArray) VAR_INTR_R4.getValue(4);
			eqCheck("4.5",VAR_INTR_J55INTRR4,VAR_INTR_J55INTRR2);

			break;
		
		case STEP_5:
			
			s.Send(new AnBx_Params(aliases.get("ROLE_C"),aliases.get("ROLE_idp"),aliases.get("ROLE_SP"),VAR_INTR_J45INTRR4,VAR_INTR_J55INTRR4));

			break;
		
		case STEP_6:
			
			VAR_INTR_R6 = (AnBx_Params) s.Receive();
			eqCheck("6.1",VAR_INTR_J55INTRR4,(Crypto_ByteArray) VAR_INTR_R6.getValue(1));
			VAR_INTR_J12INTRR6 = (SignedObject) VAR_INTR_R6.getValue(0);
			eqCheck("6.2",(AnBx_Params) s.verify(VAR_INTR_J12INTRR6,aliases.get("ROLE_idp")),new AnBx_Params(aliases.get("ROLE_C"),aliases.get("ROLE_idp")));

			break;
		
		case STEP_7:
			
			s.Send(new AnBx_Params(VAR_INTR_J12INTRR6,VAR_INTR_J55INTRR4));

			break;
		
		case STEP_8:
			
			VAR_INTR_R8 = (AnBx_Params) s.Receive();
			VAR_INTR_J12INTRR8 = (SignedObject) VAR_INTR_R8.getValue(0);
			eqCheck("8.1",VAR_INTR_J55INTRR4,(Crypto_ByteArray) VAR_INTR_R8.getValue(1));
			eqCheck("8.2",(AnBx_Params) s.verify(VAR_INTR_J12INTRR8,aliases.get("ROLE_idp")),new AnBx_Params(aliases.get("ROLE_C"),aliases.get("ROLE_idp")));

			break;
		
		case STEP_9:
			
			s.Send(new AnBx_Params(VAR_INTR_J12INTRR8,VAR_INTR_J55INTRR4));

			break;
		
		case STEP_10:
			
			VAR_INTR_R10 = (Crypto_ByteArray) s.Receive();
			wffCheck("10.1",VAR_INTR_R10);
			wffCheck("10.2",VAR_INTR_J45INTRR4);

			break;
		
		case STEP_11:
			
			// Attack simulation
			
			if (VAR_attack == null  || !shouldAttack()) {
				AnBx_Debug.out(layer, ">>> NO ATTACK <<<");
				VAR_attack = VAR_INTR_R10;
				s.Send(VAR_INTR_R10);
            } else {
                // Simulate attack by sending previous message
            	AnBx_Debug.out(layer, ">>> ATTACK <<<");
                s.Send(VAR_attack);
			}
			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	private boolean shouldAttack() {
	    return new Random().nextInt(10) < 4; // 40% probability
	}

	
	

}