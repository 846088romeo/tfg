/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-02-04 11:59:20.2176877 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package set_rev;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class SET_Rev_ROLE_a extends AnB_Protocol<SET_Rev_Steps,SET_Rev_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	private static Crypto_ByteArray tag = new Crypto_ByteArray("tag".getBytes());
	private static Crypto_ByteArray empty = new Crypto_ByteArray("empty".getBytes());
	
	// local vars
	private Crypto_ByteArray PanCa = null;
	private Crypto_ByteArray NxAuthCode = null;
	private Crypto_ByteArray SQNx11 = null;
	private Crypto_SealedPair VAR_A_R5 = null;
	private AnBx_Params VAR_A_DDAR5INVPASC = null;
	private SecretKey VAR_A_DJ79ADDAR5INVPASCINVHKA = null;
	private Crypto_ByteArray VAR_A_J69ADDAR5INVPASC = null;
	private Crypto_ByteArray VAR_A_J99ADDAR5INVPASC = null;
	private Crypto_ByteArray VAR_A_PANCA = null;
	private Crypto_SealedPair VAR_A_R7 = null;
	private AnBx_Params VAR_A_DDAR7INVPASM = null;
	private Crypto_ByteArray VAR_A_J39ADDAR7INVPASM = null;
	private Crypto_ByteArray VAR_A_J49ADDAR7INVPASM = null;
	private Crypto_ByteArray VAR_A_J59ADDAR7INVPASM = null;
	private Crypto_SealedPair VAR_A_J69ADDAR7INVPASM = null;
	private SecretKey VAR_A_DJ89ADDAR7INVPASMINVHKA = null;
	private Crypto_ByteArray VAR_A_MAPANCAADJ89ADDAR7INVPASMINVHKA = null;
	
	
	public SET_Rev_ROLE_a(SET_Rev_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
         PanCa = (Crypto_ByteArray) AnB_Session.readObject(sharepath+"pan_"+aliases.get("ROLE_C")+"_"+aliases.get("ROLE_a")+".ser");
		};

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		SET_Rev_ROLE_a.sessions = sessions;
		
		AnB_Session ROLE_a_channel_ROLE_M_Server_Insecure = lbs.get("ROLE_a_channel_ROLE_M_Server_Insecure");
        
		init();
		
        ROLE_a_channel_ROLE_M_Server_Insecure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_a_channel_ROLE_M_Server_Insecure, SET_Rev_Steps.STEP_5);
					executeStep(ROLE_a_channel_ROLE_M_Server_Insecure, SET_Rev_Steps.STEP_6);
					executeStep(ROLE_a_channel_ROLE_M_Server_Insecure, SET_Rev_Steps.STEP_7);
					executeStep(ROLE_a_channel_ROLE_M_Server_Insecure, SET_Rev_Steps.STEP_8);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_a_channel_ROLE_M_Server_Insecure.Close();
		
	};

	protected void executeStep(AnB_Session s, SET_Rev_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_5:
			
			// 	M -> a, ^(C|a|a): NxLIDM,NxXID,[OrderDesc:M],[pan(C,a):a],PurchAmt,pan(C,a)
			VAR_A_R5 = (Crypto_SealedPair) s.Receive();
			VAR_A_DDAR5INVPASC = (AnBx_Params) s.verify((SignedObject) s.decrypt(VAR_A_R5),aliases.get("ROLE_C"));
			eqCheck("5.1",aliases.get("ROLE_a"),(String) VAR_A_DDAR5INVPASC.getValue(0));
			VAR_A_DJ79ADDAR5INVPASCINVHKA = (SecretKey) s.decrypt((Crypto_SealedPair) VAR_A_DDAR5INVPASC.getValue(6),Crypto_KeyStoreType.hk());
			VAR_A_J69ADDAR5INVPASC = (Crypto_ByteArray) VAR_A_DDAR5INVPASC.getValue(5);
			VAR_A_J99ADDAR5INVPASC = (Crypto_ByteArray) VAR_A_DDAR5INVPASC.getValue(8);
			eqCheck("5.2",VAR_A_J69ADDAR5INVPASC,s.makeHmac(VAR_A_J99ADDAR5INVPASC,(SecretKey) VAR_A_DJ79ADDAR5INVPASCINVHKA));
			VAR_A_PANCA = PanCa;
			eqCheck("5.3",VAR_A_J69ADDAR5INVPASC,s.makeHmac(VAR_A_PANCA,(SecretKey) VAR_A_DJ79ADDAR5INVPASCINVHKA));
			eqCheck("5.4",VAR_A_PANCA,VAR_A_J99ADDAR5INVPASC);

			break;
		
		case STEP_6:
			
			NxAuthCode = s.getNonce();
			
			
			
			
			s.Send(empty);

			break;
		
		case STEP_7:
			
			// 	M -> a, @(M|a|a): NxLIDM,NxXID,[OrderDesc:M],[pan(C,a):a],PurchAmt
			VAR_A_R7 = (Crypto_SealedPair) s.Receive();
			VAR_A_DDAR7INVPASM = (AnBx_Params) s.verify((SignedObject) s.decrypt(VAR_A_R7),aliases.get("ROLE_M"));
			seen("7.0",(Crypto_ByteArray) VAR_A_DDAR7INVPASM.getValue(1));
			eqCheck("7.1",aliases.get("ROLE_a"),(String) VAR_A_DDAR7INVPASM.getValue(0));
			VAR_A_J39ADDAR7INVPASM = (Crypto_ByteArray) VAR_A_DDAR7INVPASM.getValue(2);
			eqCheck("7.2",VAR_A_J39ADDAR7INVPASM,(Crypto_ByteArray) VAR_A_DDAR5INVPASC.getValue(1));
			VAR_A_J49ADDAR7INVPASM = (Crypto_ByteArray) VAR_A_DDAR7INVPASM.getValue(3);
			eqCheck("7.3",VAR_A_J49ADDAR7INVPASM,(Crypto_ByteArray) VAR_A_DDAR5INVPASC.getValue(2));
			VAR_A_J59ADDAR7INVPASM = (Crypto_ByteArray) VAR_A_DDAR7INVPASM.getValue(4);
			eqCheck("7.4",VAR_A_J59ADDAR7INVPASM,(Crypto_ByteArray) VAR_A_DDAR5INVPASC.getValue(3));
			VAR_A_J69ADDAR7INVPASM = (Crypto_SealedPair) VAR_A_DDAR7INVPASM.getValue(5);
			VAR_A_DJ89ADDAR7INVPASMINVHKA = (SecretKey) s.decrypt((Crypto_SealedPair) VAR_A_DDAR7INVPASM.getValue(7),Crypto_KeyStoreType.hk());
			eqCheck("7.5",VAR_A_J69ADDAR5INVPASC,s.makeHmac(VAR_A_J99ADDAR5INVPASC,(SecretKey) VAR_A_DJ89ADDAR7INVPASMINVHKA));
			VAR_A_MAPANCAADJ89ADDAR7INVPASMINVHKA = s.makeHmac(VAR_A_PANCA,(SecretKey) VAR_A_DJ89ADDAR7INVPASMINVHKA);
			eqCheck("7.6",VAR_A_J69ADDAR5INVPASC,VAR_A_MAPANCAADJ89ADDAR7INVPASMINVHKA);
			eqCheck("7.7",(Crypto_ByteArray) VAR_A_DDAR7INVPASM.getValue(6),VAR_A_J69ADDAR5INVPASC);
			eqCheck("7.8",(Crypto_ByteArray) VAR_A_DDAR7INVPASM.getValue(8),(Crypto_ByteArray) VAR_A_DDAR5INVPASC.getValue(7));
			eqCheck("7.9",VAR_A_DJ89ADDAR7INVPASMINVHKA,VAR_A_DJ79ADDAR5INVPASCINVHKA);

			break;
		
		case STEP_8:
			
			// 	a -> M, @(a|M,C|M): NxLIDM,NxXID,[OrderDesc:M],[pan(C,a):a],NxAuthCode
			SQNx11 = s.getSeqNumber();
			s.Send(s.encrypt(s.sign(new AnBx_Params(VAR_A_J39ADDAR7INVPASM,VAR_A_J49ADDAR7INVPASM,VAR_A_J59ADDAR7INVPASM,VAR_A_J69ADDAR7INVPASM,VAR_A_MAPANCAADJ89ADDAR7INVPASMINVHKA,s.encrypt(VAR_A_DJ89ADDAR7INVPASMINVHKA,s.getPublicKey(aliases.get("ROLE_a"),Crypto_KeyStoreType.hk())),NxAuthCode,SQNx11,aliases.get("ROLE_M"),aliases.get("ROLE_C"))),aliases.get("ROLE_M")));

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	

	
	

}