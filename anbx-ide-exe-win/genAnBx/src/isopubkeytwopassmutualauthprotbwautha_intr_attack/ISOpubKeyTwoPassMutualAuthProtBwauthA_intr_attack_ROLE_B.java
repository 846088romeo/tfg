/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-04-22 16:55:25.3287314 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package isopubkeytwopassmutualauthprotbwautha_intr_attack;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class ISOpubKeyTwoPassMutualAuthProtBwauthA_intr_attack_ROLE_B extends AnB_Protocol<ISOpubKeyTwoPassMutualAuthProtBwauthA_intr_attack_Steps,ISOpubKeyTwoPassMutualAuthProtBwauthA_intr_attack_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	private static Crypto_ByteArray empty = new Crypto_ByteArray("empty".getBytes());
	
	// local vars
	private Crypto_ByteArray NxNB = null;
	private Crypto_ByteArray Text3 = null;
	private SignedObject VAR_B_R5 = null;
	private PublicKey VAR_B_J22DBR5SS = null;
	private AnBx_Params VAR_B_R9 = null;
	private AnBx_Params VAR_B_DJ12BR9SS = null;
	
	
	public ISOpubKeyTwoPassMutualAuthProtBwauthA_intr_attack_ROLE_B(ISOpubKeyTwoPassMutualAuthProtBwauthA_intr_attack_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
        };

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		ISOpubKeyTwoPassMutualAuthProtBwauthA_intr_attack_ROLE_B.sessions = sessions;
		
		AnB_Session ROLE_B_channel_ROLE_intr_Server_Insecure = lbs.get("ROLE_B_channel_ROLE_intr_Server_Insecure");
        
		init();
		
        ROLE_B_channel_ROLE_intr_Server_Insecure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_B_channel_ROLE_intr_Server_Insecure, ISOpubKeyTwoPassMutualAuthProtBwauthA_intr_attack_Steps.STEP_5);
					executeStep(ROLE_B_channel_ROLE_intr_Server_Insecure, ISOpubKeyTwoPassMutualAuthProtBwauthA_intr_attack_Steps.STEP_6);
					executeStep(ROLE_B_channel_ROLE_intr_Server_Insecure, ISOpubKeyTwoPassMutualAuthProtBwauthA_intr_attack_Steps.STEP_9);
					executeStep(ROLE_B_channel_ROLE_intr_Server_Insecure, ISOpubKeyTwoPassMutualAuthProtBwauthA_intr_attack_Steps.STEP_10);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_B_channel_ROLE_intr_Server_Insecure.Close();
		
	};

	protected void executeStep(AnB_Session s, ISOpubKeyTwoPassMutualAuthProtBwauthA_intr_attack_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_5:
			
			VAR_B_R5 = (SignedObject) s.Receive();
			VAR_B_J22DBR5SS = (PublicKey) new AnBx_Params((AnBx_Params) s.verify(VAR_B_R5,aliases.get("ROLE_s"))).getValue(1);
			eqCheck("5.1",VAR_B_J22DBR5SS,s.getPublicKey((String) new AnBx_Params((AnBx_Params) s.verify(VAR_B_R5,aliases.get("ROLE_s"))).getValue(0),Crypto_KeyStoreType.sk()));
			eqCheck("5.2",(AnBx_Params) s.verify(VAR_B_R5,aliases.get("ROLE_s")),new AnBx_Params(aliases.get("ROLE_B"),s.getPublicKey(aliases.get("ROLE_B"),Crypto_KeyStoreType.sk())));

			break;
		
		case STEP_6:
			
			Text3 = s.getNonce();
			
			s.Send(empty);

			break;
		
		case STEP_9:
			
			VAR_B_R9 = (AnBx_Params) s.Receive();
			eqCheck("9.1",aliases.get("ROLE_B"),(String) new AnBx_Params((AnBx_Params) s.verify((SignedObject) VAR_B_R9.getValue(1),aliases.get("ROLE_A"))).getValue(1));
			eqCheck("9.2",VAR_B_J22DBR5SS,s.getPublicKey((String) new AnBx_Params((AnBx_Params) s.verify((SignedObject) VAR_B_R9.getValue(1),aliases.get("ROLE_A"))).getValue(1),Crypto_KeyStoreType.sk()));
			VAR_B_DJ12BR9SS = (AnBx_Params) s.verify((SignedObject) VAR_B_R9.getValue(0),aliases.get("ROLE_s"));
			eqCheck("9.3",(PublicKey) VAR_B_DJ12BR9SS.getValue(1),s.getPublicKey((String) VAR_B_DJ12BR9SS.getValue(0),Crypto_KeyStoreType.sk()));
			eqCheck("9.4",VAR_B_DJ12BR9SS,new AnBx_Params(aliases.get("ROLE_A"),s.getPublicKey(aliases.get("ROLE_A"),Crypto_KeyStoreType.sk())));

			break;
		
		case STEP_10:
			
			NxNB = s.getNonce();
			s.Send(new AnBx_Params(VAR_B_R5,s.sign(new AnBx_Params(NxNB,aliases.get("ROLE_A"),Text3))));

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	

	
	

}