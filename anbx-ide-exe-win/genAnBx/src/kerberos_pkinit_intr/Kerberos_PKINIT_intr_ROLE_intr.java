/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-04-22 19:28:23.0706813 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package kerberos_pkinit_intr;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class Kerberos_PKINIT_intr_ROLE_intr extends AnB_Protocol<Kerberos_PKINIT_intr_Steps,Kerberos_PKINIT_intr_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	private static Crypto_ByteArray tag = new Crypto_ByteArray("tag".getBytes());
	
	// local vars
	private Crypto_ByteArray Payload = null;
	private AnBx_Params VAR_INTR_R0 = null;
	private String VAR_INTR_J14INTRR0 = null;
	private Crypto_ByteArray VAR_INTR_J23DJ44INTRR0SJ14INTRR0 = null;
	private Crypto_ByteArray VAR_INTR_J33DJ44INTRR0SJ14INTRR0 = null;
	private Crypto_ByteArray VAR_INTR_J34INTRR0 = null;
	private AnBx_Params VAR_INTR_R2 = null;
	private AnBx_Params VAR_INTR_DJ44INTRR2INVPINTR = null;
	private AnBx_Params VAR_INTR_DSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = null;
	private SecretKey VAR_INTR_J24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = null;
	private SealedObject VAR_INTR_J24INTRR2 = null;
	private Crypto_ByteArray VAR_INTR_J34INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = null;
	private AnBx_Params VAR_INTR_R4 = null;
	private String VAR_INTR_J12DSJ44INTRR4INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = null;
	private SealedObject VAR_INTR_J34INTRR4 = null;
	private Crypto_ByteArray VAR_INTR_J24INTRR4 = null;
	private AnBx_Params VAR_INTR_R6 = null;
	private AnBx_Params VAR_INTR_DSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = null;
	private SealedObject VAR_INTR_J23INTRR6 = null;
	private SecretKey VAR_INTR_J24INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = null;
	private Crypto_ByteArray VAR_INTR_J34INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = null;
	private AnBx_Params VAR_INTR_R8 = null;
	private String VAR_INTR_J12DSJ22INTRR8INTRJ24INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = null;
	private Crypto_ByteArray VAR_INTR_HINTRJ34INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = null;
	
	
	public Kerberos_PKINIT_intr_ROLE_intr(Kerberos_PKINIT_intr_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
        };

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		Kerberos_PKINIT_intr_ROLE_intr.sessions = sessions;
		
		AnB_Session ROLE_intr_channel_ROLE_C_Server_Insecure = lbs.get("ROLE_intr_channel_ROLE_C_Server_Insecure");
        AnB_Session ROLE_intr_channel_ROLE_ath_Client_Insecure = lbs.get("ROLE_intr_channel_ROLE_ath_Client_Insecure");
        AnB_Session ROLE_intr_channel_ROLE_gw_Client_Insecure = lbs.get("ROLE_intr_channel_ROLE_gw_Client_Insecure");
        
		init();
		
        ROLE_intr_channel_ROLE_C_Server_Insecure.Open();
		ROLE_intr_channel_ROLE_ath_Client_Insecure.Open();
		ROLE_intr_channel_ROLE_gw_Client_Insecure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_intr_channel_ROLE_C_Server_Insecure, Kerberos_PKINIT_intr_Steps.STEP_0);
					executeStep(ROLE_intr_channel_ROLE_ath_Client_Insecure, Kerberos_PKINIT_intr_Steps.STEP_1);
					executeStep(ROLE_intr_channel_ROLE_ath_Client_Insecure, Kerberos_PKINIT_intr_Steps.STEP_2);
					executeStep(ROLE_intr_channel_ROLE_C_Server_Insecure, Kerberos_PKINIT_intr_Steps.STEP_3);
					executeStep(ROLE_intr_channel_ROLE_C_Server_Insecure, Kerberos_PKINIT_intr_Steps.STEP_4);
					executeStep(ROLE_intr_channel_ROLE_gw_Client_Insecure, Kerberos_PKINIT_intr_Steps.STEP_5);
					executeStep(ROLE_intr_channel_ROLE_gw_Client_Insecure, Kerberos_PKINIT_intr_Steps.STEP_6);
					executeStep(ROLE_intr_channel_ROLE_C_Server_Insecure, Kerberos_PKINIT_intr_Steps.STEP_7);
					executeStep(ROLE_intr_channel_ROLE_C_Server_Insecure, Kerberos_PKINIT_intr_Steps.STEP_8);
					executeStep(ROLE_intr_channel_ROLE_C_Server_Insecure, Kerberos_PKINIT_intr_Steps.STEP_9);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_intr_channel_ROLE_C_Server_Insecure.Close();
		ROLE_intr_channel_ROLE_ath_Client_Insecure.Close();
		ROLE_intr_channel_ROLE_gw_Client_Insecure.Close();
		
	};

	protected void executeStep(AnB_Session s, Kerberos_PKINIT_intr_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_0:
			
			noteqCheck("0.4",aliases.get("ROLE_intr"),aliases.get("ROLE_C"));
			VAR_INTR_R0 = (AnBx_Params) s.Receive();
			eqCheck("0.1",aliases.get("ROLE_gw"),(String) VAR_INTR_R0.getValue(1));
			VAR_INTR_J14INTRR0 = (String) VAR_INTR_R0.getValue(0);
			VAR_INTR_J23DJ44INTRR0SJ14INTRR0 = (Crypto_ByteArray) new AnBx_Params((AnBx_Params) s.verify((SignedObject) VAR_INTR_R0.getValue(3),s.getPublicKey(VAR_INTR_J14INTRR0,Crypto_KeyStoreType.sk()))).getValue(1);
			VAR_INTR_J33DJ44INTRR0SJ14INTRR0 = (Crypto_ByteArray) new AnBx_Params((AnBx_Params) s.verify((SignedObject) VAR_INTR_R0.getValue(3),s.getPublicKey(VAR_INTR_J14INTRR0,Crypto_KeyStoreType.sk()))).getValue(2);
			eqCheck("0.2",VAR_INTR_J33DJ44INTRR0SJ14INTRR0,s.makeDigest(new AnBx_Params(VAR_INTR_J14INTRR0,aliases.get("ROLE_gw"),VAR_INTR_J23DJ44INTRR0SJ14INTRR0)));
			VAR_INTR_J34INTRR0 = (Crypto_ByteArray) VAR_INTR_R0.getValue(2);
			eqCheck("0.3",VAR_INTR_J34INTRR0,VAR_INTR_J23DJ44INTRR0SJ14INTRR0);

			break;
		
		case STEP_1:
			
			Payload = s.getNonce();
			
			s.Send(new AnBx_Params(aliases.get("ROLE_intr"),aliases.get("ROLE_gw"),VAR_INTR_J34INTRR0,s.sign(new AnBx_Params((Crypto_ByteArray) new AnBx_Params((AnBx_Params) s.verify((SignedObject) VAR_INTR_R0.getValue(3),s.getPublicKey(VAR_INTR_J14INTRR0,Crypto_KeyStoreType.sk()))).getValue(0),VAR_INTR_J34INTRR0,s.makeDigest(new AnBx_Params(aliases.get("ROLE_intr"),aliases.get("ROLE_gw"),VAR_INTR_J34INTRR0))))));

			break;
		
		case STEP_2:
			
			VAR_INTR_R2 = (AnBx_Params) s.Receive();
			VAR_INTR_DJ44INTRR2INVPINTR = (AnBx_Params) s.decrypt((Crypto_SealedPair) VAR_INTR_R2.getValue(3));
			VAR_INTR_DSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = (AnBx_Params) s.decrypt((SealedObject) VAR_INTR_R2.getValue(2),(SecretKey) s.verify((SignedObject) VAR_INTR_DJ44INTRR2INVPINTR.getValue(1),aliases.get("ROLE_ath")));
			eqCheck("2.1",aliases.get("ROLE_gw"),(String) VAR_INTR_DSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH.getValue(0));
			eqCheck("2.2",aliases.get("ROLE_intr"),(String) VAR_INTR_R2.getValue(0));
			eqCheck("2.3",tag,(Crypto_ByteArray) VAR_INTR_DJ44INTRR2INVPINTR.getValue(0));
			eqCheck("2.4",VAR_INTR_J23DJ44INTRR0SJ14INTRR0,(Crypto_ByteArray) VAR_INTR_DSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH.getValue(3));

			break;
		
		case STEP_3:
			
			VAR_INTR_J24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = (SecretKey) VAR_INTR_DSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH.getValue(1);
			VAR_INTR_J24INTRR2 = (SealedObject) VAR_INTR_R2.getValue(1);
			VAR_INTR_J34INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = (Crypto_ByteArray) VAR_INTR_DSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH.getValue(2);
			s.Send(new AnBx_Params(VAR_INTR_J14INTRR0,VAR_INTR_J24INTRR2,s.encrypt(new AnBx_Params(aliases.get("ROLE_gw"),VAR_INTR_J24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH,VAR_INTR_J34INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH,VAR_INTR_J34INTRR0),(SecretKey) s.verify((SignedObject) VAR_INTR_DJ44INTRR2INVPINTR.getValue(1),aliases.get("ROLE_ath"))),s.encrypt(new AnBx_Params(tag,(SignedObject) VAR_INTR_DJ44INTRR2INVPINTR.getValue(1)),s.getPublicKey(VAR_INTR_J14INTRR0,Crypto_KeyStoreType.pk()))));

			break;
		
		case STEP_4:
			
			VAR_INTR_R4 = (AnBx_Params) s.Receive();
			eqCheck("4.1",aliases.get("ROLE_s"),(String) VAR_INTR_R4.getValue(0));
			VAR_INTR_J12DSJ44INTRR4INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = (String) new AnBx_Params((AnBx_Params) s.decrypt((SealedObject) VAR_INTR_R4.getValue(3),VAR_INTR_J24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH)).getValue(0);
			eqCheck("4.2",VAR_INTR_J14INTRR0,VAR_INTR_J12DSJ44INTRR4INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH);
			eqCheck("4.3",VAR_INTR_J33DJ44INTRR0SJ14INTRR0,s.makeDigest(new AnBx_Params(VAR_INTR_J14INTRR0,aliases.get("ROLE_gw"),VAR_INTR_J23DJ44INTRR0SJ14INTRR0)));
			VAR_INTR_J34INTRR4 = (SealedObject) VAR_INTR_R4.getValue(2);
			eqCheck("4.4",VAR_INTR_J34INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH,(Crypto_ByteArray) new AnBx_Params((AnBx_Params) s.decrypt((SealedObject) VAR_INTR_R4.getValue(3),VAR_INTR_J24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH)).getValue(1));

			break;
		
		case STEP_5:
			
			VAR_INTR_J24INTRR4 = (Crypto_ByteArray) VAR_INTR_R4.getValue(1);
			s.Send(new AnBx_Params(aliases.get("ROLE_s"),VAR_INTR_J24INTRR4,VAR_INTR_J34INTRR4,s.encrypt(new AnBx_Params(aliases.get("ROLE_intr"),VAR_INTR_J34INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH),VAR_INTR_J24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH)));

			break;
		
		case STEP_6:
			
			VAR_INTR_R6 = (AnBx_Params) s.Receive();
			eqCheck("6.1",aliases.get("ROLE_intr"),(String) VAR_INTR_R6.getValue(0));
			VAR_INTR_DSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = (AnBx_Params) s.decrypt((SealedObject) VAR_INTR_R6.getValue(2),VAR_INTR_J24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH);
			eqCheck("6.2",aliases.get("ROLE_s"),(String) VAR_INTR_DSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH.getValue(0));
			eqCheck("6.3",VAR_INTR_J24INTRR4,(Crypto_ByteArray) VAR_INTR_DSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH.getValue(3));

			break;
		
		case STEP_7:
			
			VAR_INTR_J23INTRR6 = (SealedObject) VAR_INTR_R6.getValue(1);
			VAR_INTR_J24INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = (SecretKey) VAR_INTR_DSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH.getValue(1);
			VAR_INTR_J34INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = (Crypto_ByteArray) VAR_INTR_DSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH.getValue(2);
			s.Send(new AnBx_Params(VAR_INTR_J14INTRR0,VAR_INTR_J23INTRR6,s.encrypt(new AnBx_Params(aliases.get("ROLE_s"),VAR_INTR_J24INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH,VAR_INTR_J34INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH,VAR_INTR_J24INTRR4),VAR_INTR_J24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH)));

			break;
		
		case STEP_8:
			
			VAR_INTR_R8 = (AnBx_Params) s.Receive();
			wffCheck("8.1",VAR_INTR_J24INTRR4);
			VAR_INTR_J12DSJ22INTRR8INTRJ24INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = (String) new AnBx_Params((AnBx_Params) s.decrypt((SealedObject) VAR_INTR_R8.getValue(1),VAR_INTR_J24INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH)).getValue(0);
			eqCheck("8.2",VAR_INTR_J14INTRR0,VAR_INTR_J12DSJ22INTRR8INTRJ24INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH);
			eqCheck("8.3",VAR_INTR_J33DJ44INTRR0SJ14INTRR0,s.makeDigest(new AnBx_Params(VAR_INTR_J14INTRR0,aliases.get("ROLE_gw"),VAR_INTR_J23DJ44INTRR0SJ14INTRR0)));
			VAR_INTR_HINTRJ34INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH = s.makeDigest(VAR_INTR_J34INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH);
			eqCheck("8.4",VAR_INTR_HINTRJ34INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH,(Crypto_ByteArray) new AnBx_Params((AnBx_Params) s.decrypt((SealedObject) VAR_INTR_R8.getValue(1),VAR_INTR_J24INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH)).getValue(1));

			break;
		
		case STEP_9:
			
			s.Send(new AnBx_Params(s.encrypt(VAR_INTR_HINTRJ34INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH,VAR_INTR_J24INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH),s.encrypt(new AnBx_Params(tag,Payload),VAR_INTR_J24INTRDSJ33INTRR6INTRJ24INTRDSJ34INTRR2DJ22DJ44INTRR2INVPINTRSATH)));

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	

	
	

}