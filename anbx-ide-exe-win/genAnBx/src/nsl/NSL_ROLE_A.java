/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-02-04 11:59:11.097702 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package nsl;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class NSL_ROLE_A extends AnB_Protocol<NSL_Steps,NSL_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	
	// local vars
	private Crypto_ByteArray NxNA = null;
	private Crypto_SealedPair VAR_A_R1 = null;
	private AnBx_Params VAR_A_DAR1INVPA = null;
	
	
	public NSL_ROLE_A(NSL_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
        };

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		NSL_ROLE_A.sessions = sessions;
		
		AnB_Session ROLE_A_channel_ROLE_B_Client_Insecure = lbs.get("ROLE_A_channel_ROLE_B_Client_Insecure");
        
		init();
		
        ROLE_A_channel_ROLE_B_Client_Insecure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_A_channel_ROLE_B_Client_Insecure, NSL_Steps.STEP_0);
					executeStep(ROLE_A_channel_ROLE_B_Client_Insecure, NSL_Steps.STEP_1);
					executeStep(ROLE_A_channel_ROLE_B_Client_Insecure, NSL_Steps.STEP_2);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_A_channel_ROLE_B_Client_Insecure.Close();
		
	};

	protected void executeStep(AnB_Session s, NSL_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_0:
			
			NxNA = s.getNonce();
			
			s.Send(s.encrypt(new AnBx_Params(NxNA,aliases.get("ROLE_A")),aliases.get("ROLE_B")));

			break;
		
		case STEP_1:
			
			VAR_A_R1 = (Crypto_SealedPair) s.Receive();
			VAR_A_DAR1INVPA = (AnBx_Params) s.decrypt(VAR_A_R1);
			eqCheck("1.1",aliases.get("ROLE_B"),(String) VAR_A_DAR1INVPA.getValue(2));
			eqCheck("1.2",NxNA,(Crypto_ByteArray) VAR_A_DAR1INVPA.getValue(0));

			break;
		
		case STEP_2:
			
			s.Send(s.encrypt((Crypto_ByteArray) VAR_A_DAR1INVPA.getValue(1),aliases.get("ROLE_B")));

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	

	
	

}