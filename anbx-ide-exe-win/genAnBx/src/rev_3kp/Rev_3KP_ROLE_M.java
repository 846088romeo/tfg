/*

 AnBx Compiler and Code Generator

 Copyright 2011-2025 Paolo Modesti
 Copyright 2018-2025 SCM/SCDT/SCEDT, Teesside University
 Copyright 2016-2018 School of Computer Science, University of Sunderland
 Copyright 2013-2015 School of Computing Science, Newcastle University
 Copyright 2011-2012 DAIS, Universita' Ca' Foscari Venezia
 
 This file was automatically generated by the AnBx Compiler 2025.01 on 2025-02-04 11:59:17.0760011 UTC -->

 AnBx is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.

 AnBx is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with AnBx. If not, see <http://www.gnu.org/licenses/>.

*/

package rev_3kp;

import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.AnBx_Params;
import anbxj.AnB_Protocol;
import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnB_Session;
import anbxj.Crypto_KeyStoreType;
import anbxj.Crypto_ByteArray;
import anbxj.Crypto_HmacPair;
import anbxj.Crypto_SealedPair;
import anbxj.Crypto_KeyPair;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

import java.util.Map;

public final class Rev_3KP_ROLE_M extends AnB_Protocol<Rev_3KP_Steps,Rev_3KP_Roles> {

//	private static boolean loop = false;
	private static long sessionID = 0;

	// local knowledge - constants
	private static Crypto_ByteArray empty = new Crypto_ByteArray("empty".getBytes());
	
	// local vars
	private Crypto_ByteArray Desc = null;
	private Crypto_ByteArray Price = null;
	private Crypto_ByteArray TID = null;
	private Crypto_ByteArray SQNx4 = null;
	private Crypto_ByteArray SQNx8 = null;
	private Crypto_SealedPair VAR_M_R0 = null;
	private AnBx_Params VAR_M_DDMR0INVPMSC = null;
	private Crypto_ByteArray VAR_M_J36MDDMR0INVPMSC = null;
	private Crypto_ByteArray VAR_M_MDESCDJ46MDDMR0INVPMSCINVHKM = null;
	private Crypto_ByteArray VAR_M_HPRICETIDJ16MDDMR0INVPMSCMMDESCDJ46MDDMR0INVPMSCINVHKM = null;
	private Crypto_SealedPair VAR_M_R2 = null;
	private Crypto_ByteArray VAR_M_R4 = null;
	private Crypto_SealedPair VAR_M_R6 = null;
	private AnBx_Params VAR_M_DDMR6INVPMSA = null;
	
	
	public Rev_3KP_ROLE_M(Rev_3KP_Roles role, String name, String sharepath) {
		super();
		this.role = role;
		this.name = name;   
		this.sharepath = sharepath;
		if (sessionID < Long.MAX_VALUE) {
			sessionID++;
		}
	}

    protected void init() {
		// set abortOnFail
		setAbortOnFail(false);
        // init shared vars
         Price = (Crypto_ByteArray) AnB_Session.readObject(sharepath+"Price.ser");
		 Desc = (Crypto_ByteArray) AnB_Session.readObject(sharepath+"Desc.ser");
		};

	public void run(Map<String, AnB_Session> lbs, Map<String, String> aliases, long sessions) {

		this.aliases = aliases;
		this.lbs = lbs;
		Rev_3KP_ROLE_M.sessions = sessions;
		
		AnB_Session ROLE_M_channel_ROLE_C_Server_Insecure = lbs.get("ROLE_M_channel_ROLE_C_Server_Insecure");
        AnB_Session ROLE_M_channel_ROLE_a_Client_Insecure = lbs.get("ROLE_M_channel_ROLE_a_Client_Insecure");
        
		init();
		
        ROLE_M_channel_ROLE_C_Server_Insecure.Open();
		ROLE_M_channel_ROLE_a_Client_Insecure.Open();
		  
		do {
			AnBx_Debug.out(layer, "Session started: " + sessionID + "/" + sessions);

			try {

                    executeStep(ROLE_M_channel_ROLE_C_Server_Insecure, Rev_3KP_Steps.STEP_0);
					executeStep(ROLE_M_channel_ROLE_C_Server_Insecure, Rev_3KP_Steps.STEP_1);
					executeStep(ROLE_M_channel_ROLE_C_Server_Insecure, Rev_3KP_Steps.STEP_2);
					executeStep(ROLE_M_channel_ROLE_a_Client_Insecure, Rev_3KP_Steps.STEP_3);
					executeStep(ROLE_M_channel_ROLE_a_Client_Insecure, Rev_3KP_Steps.STEP_4);
					executeStep(ROLE_M_channel_ROLE_a_Client_Insecure, Rev_3KP_Steps.STEP_5);
					executeStep(ROLE_M_channel_ROLE_a_Client_Insecure, Rev_3KP_Steps.STEP_6);
					executeStep(ROLE_M_channel_ROLE_C_Server_Insecure, Rev_3KP_Steps.STEP_7);
					
                    AnBx_Debug.out(layer, "Session completed: " + sessionID + "/" + sessions);
                    sessionID++;
			
			} catch (ClassCastException e) {
				abort("Message format type error",e,sessionID);
			} catch (NullPointerException e) {
				abort("Some data have not been properly initialised",e,sessionID);
			} catch (Exception e) {
				abort("Generic error",e,sessionID);
			}
		} while ((sessionID <= sessions && sessionID < Long.MAX_VALUE) || sessions < 0);
        ROLE_M_channel_ROLE_C_Server_Insecure.Close();
		ROLE_M_channel_ROLE_a_Client_Insecure.Close();
		
	};

	protected void executeStep(AnB_Session s, Rev_3KP_Steps step) {

		status(step);

		switch (step) {
		
		case STEP_0:
			
			// 	C -> M, @(C|M|M): [ccn(C,a):a],[Desc:M]
			VAR_M_R0 = (Crypto_SealedPair) s.Receive();
			VAR_M_DDMR0INVPMSC = (AnBx_Params) s.verify((SignedObject) s.decrypt(VAR_M_R0),aliases.get("ROLE_C"));
			seen("0.0",(Crypto_ByteArray) VAR_M_DDMR0INVPMSC.getValue(4));
			eqCheck("0.1",aliases.get("ROLE_M"),(String) VAR_M_DDMR0INVPMSC.getValue(5));
			VAR_M_J36MDDMR0INVPMSC = (Crypto_ByteArray) VAR_M_DDMR0INVPMSC.getValue(2);
			VAR_M_MDESCDJ46MDDMR0INVPMSCINVHKM = s.makeHmac(Desc,(SecretKey) (SecretKey) s.decrypt((Crypto_SealedPair) VAR_M_DDMR0INVPMSC.getValue(3),Crypto_KeyStoreType.hk()));
			eqCheck("0.2",VAR_M_J36MDDMR0INVPMSC,VAR_M_MDESCDJ46MDDMR0INVPMSCINVHKM);

			break;
		
		case STEP_1:
			
			// 	M -> C, @(M|C|C): TID,[Price,TID,[ccn(C,a):a],[Desc:M]]
			TID = s.getNonce();
			
			
			SQNx4 = s.getSeqNumber();
			VAR_M_HPRICETIDJ16MDDMR0INVPMSCMMDESCDJ46MDDMR0INVPMSCINVHKM = s.makeDigest(new AnBx_Params(Price,TID,(Crypto_ByteArray) VAR_M_DDMR0INVPMSC.getValue(0),VAR_M_MDESCDJ46MDDMR0INVPMSCINVHKM));
			s.Send(s.encrypt(s.sign(new AnBx_Params(aliases.get("ROLE_C"),SQNx4,TID,VAR_M_HPRICETIDJ16MDDMR0INVPMSCMMDESCDJ46MDDMR0INVPMSCINVHKM)),aliases.get("ROLE_C")));

			break;
		
		case STEP_2:
			
			// 	C -> M, (C|a|a): Price,TID,ccn(C,a),[ccn(C,a):a],[Price,TID,[ccn(C,a):a],[Desc:M]]
			VAR_M_R2 = (Crypto_SealedPair) s.Receive();
			wffCheck("2.1",VAR_M_R2);

			break;
		
		case STEP_3:
			
			// 	M -> a, ^(C|a|a): Price,TID,ccn(C,a),[ccn(C,a):a],[Price,TID,[ccn(C,a):a],[Desc:M]]
			s.Send(VAR_M_R2);

			break;
		
		case STEP_4:
			
			VAR_M_R4 = (Crypto_ByteArray) s.Receive();
			eqCheck("4.1",empty,VAR_M_R4);

			break;
		
		case STEP_5:
			
			// 	M -> a, @(M|a|a): Price,TID,[Desc:M],[Price,TID,[ccn(C,a):a],[Desc:M]]
			SQNx8 = s.getSeqNumber();
			s.Send(s.encrypt(s.sign(new AnBx_Params(aliases.get("ROLE_a"),SQNx8,Price,TID,VAR_M_MDESCDJ46MDDMR0INVPMSCINVHKM,s.encrypt((SecretKey) s.decrypt((Crypto_SealedPair) VAR_M_DDMR0INVPMSC.getValue(3),Crypto_KeyStoreType.hk()),s.getPublicKey(aliases.get("ROLE_M"),Crypto_KeyStoreType.hk())),VAR_M_HPRICETIDJ16MDDMR0INVPMSCMMDESCDJ46MDDMR0INVPMSCINVHKM)),aliases.get("ROLE_a")));

			break;
		
		case STEP_6:
			
			// 	a -> M, @(a|M,C|M): Auth,TID,[Price,TID,[ccn(C,a):a],[Desc:M]]
			VAR_M_R6 = (Crypto_SealedPair) s.Receive();
			VAR_M_DDMR6INVPMSA = (AnBx_Params) s.verify((SignedObject) s.decrypt(VAR_M_R6),aliases.get("ROLE_a"));
			seen("6.0",(Crypto_ByteArray) VAR_M_DDMR6INVPMSA.getValue(3));
			eqCheck("6.1",aliases.get("ROLE_C"),(String) VAR_M_DDMR6INVPMSA.getValue(5));
			eqCheck("6.2",aliases.get("ROLE_M"),(String) VAR_M_DDMR6INVPMSA.getValue(4));
			eqCheck("6.3",TID,(Crypto_ByteArray) VAR_M_DDMR6INVPMSA.getValue(1));
			eqCheck("6.4",(Crypto_ByteArray) VAR_M_DDMR6INVPMSA.getValue(2),s.makeDigest(new AnBx_Params(Price,TID,(Crypto_ByteArray) VAR_M_DDMR0INVPMSC.getValue(0),VAR_M_J36MDDMR0INVPMSC)));

			break;
		
		case STEP_7:
			
			// 	M -> C, ^@(a|M,C|C): Auth,TID,[Price,TID,[ccn(C,a):a],[Desc:M]]
			s.Send(s.encrypt((SignedObject) s.decrypt(VAR_M_R6),aliases.get("ROLE_C")));

			break;
		
		default:
			
            break;		
		}

		status(step);

	}

	

	
	

}