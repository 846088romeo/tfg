# This file was automatically generated by the AnBx Compiler $if(showverdatetime)$$version$ on $datetime$ $endif$-->
# from a template developed by Paolo Modesti and Marco Moscini
# Protocol: $prot$

services:
    $prot$_init:
        image: $dockerimage$
        container_name: $prot$_init
        build:
            context: .
            dockerfile: Dockerfile
        tty: true
        stdin_open: true
        cap_add:
            - NET_ADMIN
        volumes:
        - $dockerjavaroot$:/$dockersharedfolder$
        command: >
            sh -c "/usr/bin/timeout $dockerdytimeout$ ant -buildfile /$dockersharedfolder$/$dockerjavadest$/$package$/build.xml runinit"
        network_mode: none
  $dockerroles:{n|
    $prot$_$n.dockerrolename$:
        image: $dockerimage$
        container_name: $prot$_container_$n.dockerrolename$
        healthcheck:
            test: ["CMD", "ping", "-c", "2", "$n.ip$"]
            interval: 1s
            timeout: 3s
            retries: 30
        $if(dockermemlimitcond)$mem_limit: $dockermemlimit$ $endif$
        $if(dockercpuquotacond)$cpu_quota: $dockercpuquota$ $endif$
        tty: true
        sysctls:
        - net.ipv4.ip_forward=1
        stdin_open: true
        cap_add:
            - NET_ADMIN
        volumes:
            - $dockerjavaroot$:/$dockersharedfolder$
        command: >
            sh -c "ip route del default &&
                   ip route add default via $n.gateway$ &&
                   ip route list &&
                   ping $n.gateway$ -c $n.pings$ > /dev/null &&
                   # $if(dockerpcap)$tcpdump -ni any !icmp -w /$dockersharedfolder$/$dockerjavadest$/$package$/$prot$_ROLE_$n.dockerrolename$.pcap & $endif$
                   /usr/bin/timeout $dockerdytimeout$ ant -buildfile /$dockersharedfolder$/$dockerjavadest$/$package$/build.xml ROLE_$n.dockerrolename$ && 
                   $if(dockerpcap)$sleep $dockersessiontimeout$ $else$sleep 0$endif$"
        networks:
            net-$n.dockerrolename$:
                ipv4_address: $n.ip$
        $n.ports$
        depends_on:
            $prot$_DY_intruder:
                condition: service_healthy
        }$
    $prot$_DY_intruder:
        image: $dockerdyimage$
        container_name: $prot$_container_DY
        healthcheck:
            test: ["CMD", "ping", "-c", "2", "$dockerdyiptest$"]
            interval: 1s
            timeout: 3s
            retries: 30
        build:
            context: .
            dockerfile: Dockerfile_DY
        $if(dockermemlimitcond)$# mem_limit: $dockermemlimit$ $endif$
        $if(dockercpuquotacond)$# cpu_quota: $dockercpuquota$ $endif$
        tty: true
        sysctls:
        - net.ipv4.ip_forward=1
        stdin_open: true
        cap_add:
            - NET_ADMIN
        volumes:
        - $dockerjavaroot$:/$dockersharedfolder$
        command: >
            sh -c "while ! netstat -tuln | grep -q 'LISTEN'; do sleep $dockerdyinterval$; done &&
                   ip route list > /dev/null && 
                   ip route del default &&
                   $dockerroles:{n|ip route del $n.subnet$/24 &&
                   ip route add $n.subnet$/24 via $n.gateway$ &&
                   }$ip route list &&
                   $if(dockerdyactive)$sleep $dockerdywait$ && $endif$ 
                   $if(dockerpcap)$tcpdump -ni any !icmp -w /$dockersharedfolder$/$dockerjavadest$/$package$/$prot$_$dockerdyname$.pcap & $endif$
                   # $if(dockerpcap)$tcpdump -ni any -w /$dockersharedfolder$/$dockerjavadest$/$package$/$prot$_$dockerdyname$.pcap & $endif$
                   $if(dockerdyactive)$/usr/bin/timeout $dockerdytimeout$ ant -buildfile /$dockersharedfolder$/$dockerjavadest$/$package$/build.xml ROLE_$dockerdyname$ & $endif$ 
                   # let the agents start up
                   sleep $dockerdyinterval$ &&
                   /usr/bin/timeout $dockerdytimeout$ sh -c 'while true; do
                       # Check availability of services using ping
                       $dockerroles:{n|ping -c 1 $n.ip$ > /dev/null}; separator=" && \\
                       "$ || break
                   sleep $dockerdyinterval$ 
                   done'$if(dockerpcap)$ &&
                   kill \$(ps -e | pgrep tcpdump) && 
                   sleep $dockerdyinterval$ $endif$
                   "
        networks:$dockerroles:{n|
                net-$n.dockerrolename$:
                    ipv4_address: $n.gateway$}$
        depends_on:
            $prot$_init:
                condition: service_completed_successfully

networks:
    $dockerroles:{n|
        net-$n.dockerrolename$:
            driver: bridge
            ipam:
                # driver: default
                config:
                - subnet: $n.subnet$/24
                # gateway: $n.gateway$}$

# -------------- Instructions --------------

# Images will be built automatically when running this composition.
# To build images by hand:
# docker build . -t $dockerimage$ -f Dockerfile
# docker build . -t $dockerdyimage$ -f Dockerfile_DY

# To clean-up stopped/unused containers and networks:
# docker container prune -f
# docker network prune -f

# To run the service composition:
# docker compose up

# To shutdown the service composition:
# docker compose down

# To check if docker is installed:
# docker -v
# If the above command does not work, either docker is not installed or not in the system path.

# Moreover, in order to execute the service composition, the docker deamon should be running.
# The specific procedure to start the docker deamon depends from the operating system.
# https://docs.docker.com/config/daemon/start/
