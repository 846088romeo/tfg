% IF specification - Protocol: AndrewSecureRPC
% Automatically generated by the
% AnBx Compiler and Code Generator - Version 2025.01
% Sessions: 2
% Goals:
%	B *->* A: NB2
%	A authenticates B on NB2

section types:
i,A,B,A11,B11,B21,A21,A12,B12,B22,A22,AnB_A,AnB_B:agent
A,B:agent
NA,NB,NB2,tag:text
shk:function
succ:function

section inits:
 initial_state init1 :=
state_rA(A11,2,0,apply(shk,pair(A11,B11)),tag,succ,B11).
state_rB(B21,2,0,apply(shk,pair(A21,B21)),succ,A21).
state_rA(A12,4,0,apply(shk,pair(A12,B12)),tag,succ,B12).
state_rB(B22,4,0,apply(shk,pair(A22,B22)),succ,A22).
iknows(guessPW).
iknows(i).
iknows(0).
iknows(apply(shk,pair(i,B11))).
iknows(tag).
iknows(succ).
iknows(B11).
iknows(SID).
iknows(apply(shk,pair(A21,i))).
iknows(A21).
iknows(apply(shk,pair(i,B12))).
iknows(B12).
iknows(apply(shk,pair(A22,i))).
iknows(A22).
iknows(confChCr).
iknows(authChCr).
iknows(inv(apply(authChCr,i))).
iknows(inv(apply(confChCr,i))).
iknows(apply(secChCr,pair(i,A11))).
iknows(apply(secChCr,pair(i,B11))).
iknows(apply(secChCr,pair(i,B21))).
iknows(apply(secChCr,pair(i,A21))).
iknows(apply(secChCr,pair(i,A12))).
iknows(apply(secChCr,pair(i,B12))).
iknows(apply(secChCr,pair(i,B22))).
iknows(apply(secChCr,pair(i,A22))).
iknows(apply(secChCr,pair(A11,i))).
iknows(apply(secChCr,pair(B11,i))).
iknows(apply(secChCr,pair(B21,i))).
iknows(apply(secChCr,pair(A21,i))).
iknows(apply(secChCr,pair(A12,i))).
iknows(apply(secChCr,pair(B12,i))).
iknows(apply(secChCr,pair(B22,i))).
iknows(apply(secChCr,pair(A22,i))).
iknows(apply(secChCr,pair(i,apply(pseudonym,A11)))).
iknows(apply(secChCr,pair(i,apply(pseudonym,B11)))).
iknows(apply(secChCr,pair(i,apply(pseudonym,B21)))).
iknows(apply(secChCr,pair(i,apply(pseudonym,A21)))).
iknows(apply(secChCr,pair(i,apply(pseudonym,A12)))).
iknows(apply(secChCr,pair(i,apply(pseudonym,B12)))).
iknows(apply(secChCr,pair(i,apply(pseudonym,B22)))).
iknows(apply(secChCr,pair(i,apply(pseudonym,A22)))).
iknows(apply(secChCr,pair(apply(pseudonym,A11),i))).
iknows(apply(secChCr,pair(apply(pseudonym,B11),i))).
iknows(apply(secChCr,pair(apply(pseudonym,B21),i))).
iknows(apply(secChCr,pair(apply(pseudonym,A21),i))).
iknows(apply(secChCr,pair(apply(pseudonym,A12),i))).
iknows(apply(secChCr,pair(apply(pseudonym,B12),i))).
iknows(apply(secChCr,pair(apply(pseudonym,B22),i))).
iknows(apply(secChCr,pair(apply(pseudonym,A22),i))) & A11/=i & A12/=i & B21/=i & B22/=i

section rules:
step trans0:=
state_rA(A,SID,0,XshkAB,tag,succ,B)
=[exists NA]=>
state_rA(A,SID,1,XshkAB,tag,succ,B,NA,pair(A,scrypt(XshkAB,pair(tag,NA)))).
iknows(pair(A,scrypt(XshkAB,pair(tag,NA))))

step trans1:=
state_rB(B,SID,0,XshkAB,succ,A).
iknows(pair(A,scrypt(XshkAB,pair(tag,NA))))
=[exists NB]=>
state_rB(B,SID,1,XshkAB,succ,A,NA,tag,scrypt(XshkAB,pair(tag,NA)),pair(A,scrypt(XshkAB,pair(tag,NA))),NB,scrypt(XshkAB,pair(apply(succ,NA),NB))).
iknows(scrypt(XshkAB,pair(apply(succ,NA),NB)))

step trans2:=
state_rA(A,SID,1,XshkAB,tag,succ,B,NA,pair(A,scrypt(XshkAB,pair(tag,NA)))).
iknows(scrypt(XshkAB,pair(apply(succ,NA),NB)))
=>
state_rA(A,SID,2,XshkAB,tag,succ,B,NA,pair(A,scrypt(XshkAB,pair(tag,NA))),scrypt(XshkAB,pair(tag,NA)),NB,apply(succ,NA),scrypt(XshkAB,pair(apply(succ,NA),NB)),scrypt(XshkAB,apply(succ,NB))).
iknows(scrypt(XshkAB,apply(succ,NB)))

step trans3:=
state_rB(B,SID,1,XshkAB,succ,A,NA,tag,scrypt(XshkAB,pair(tag,NA)),pair(A,scrypt(XshkAB,pair(tag,NA))),NB,scrypt(XshkAB,pair(apply(succ,NA),NB))).
iknows(scrypt(XshkAB,apply(succ,NB)))
=[exists NB2]=>
secret(NB2,A).
witness(B,A,pABNB2,NB2).
witness(B,A,pABNB2,NB2).
state_rB(B,SID,2,XshkAB,succ,A,NA,tag,scrypt(XshkAB,pair(tag,NA)),pair(A,scrypt(XshkAB,pair(tag,NA))),NB,scrypt(XshkAB,pair(apply(succ,NA),NB)),scrypt(XshkAB,apply(succ,NB)),NB2,scrypt(XshkAB,NB2)).
iknows(scrypt(XshkAB,NB2))

step trans4:=
state_rA(A,SID,2,XshkAB,tag,succ,B,NA,pair(A,scrypt(XshkAB,pair(tag,NA))),scrypt(XshkAB,pair(tag,NA)),NB,apply(succ,NA),scrypt(XshkAB,pair(apply(succ,NA),NB)),scrypt(XshkAB,apply(succ,NB))).
iknows(scrypt(XshkAB,NB2))
=>
request(A,B,pABNB2,NB2,SID).
request(A,B,pABNB2,NB2,SID).
state_rA(A,SID,3,XshkAB,tag,succ,B,NA,pair(A,scrypt(XshkAB,pair(tag,NA))),scrypt(XshkAB,pair(tag,NA)),NB,apply(succ,NA),scrypt(XshkAB,pair(apply(succ,NA),NB)),scrypt(XshkAB,apply(succ,NB)),NB2,scrypt(XshkAB,NB2))

section attack_states:
  attack_state secrecy :=
    secret(AnB_M,AnB_A).
    iknows(AnB_M)
    & AnB_A/=i

  attack_state weak_auth :=
    request(AnB_A,AnB_B,AnB_PURP,AnB_MSG,SID)
    & not(witness(AnB_B,AnB_A,AnB_PURP,AnB_MSG))
    & AnB_B/=i
    & AnB_A/=AnB_B

  attack_state weak_auth :=
    wrequest(AnB_A,AnB_B,AnB_PURP,AnB_MSG)
    & not(witness(AnB_B,AnB_A,AnB_PURP,AnB_MSG))
    & AnB_B/=i
    & AnB_A/=AnB_B

  attack_state strong_auth :=
    request(AnB_A,AnB_B,AnB_PURP,AnB_MSG,SID).
    request(AnB_A,AnB_B,AnB_PURP,AnB_MSG,SID2)
    & SID/=SID2
    & AnB_B/=i
    & AnB_A/=AnB_B

  attack_state secrets :=
    secrets(AnB_M,AnB_SET).
    iknows(AnB_M)
    & not(contains(AnB_SET,i))
  attack_state guesswhat :=
    guessChal(AnB_M,AnB_SET).
    iknows(AnB_M)
    & not(contains(AnB_SET,i))
